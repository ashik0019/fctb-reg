/*! jQuery v2.2.3 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.3",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c;
}catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ca(b),i="border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Fa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Ba.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+Oa(b,c,e||(i?"border":"content"),f,h)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,
e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g,hb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(hb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \t]*([^\r\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\/\//,sb={},tb={},ub="*/".concat("*"),vb=d.createElement("a");vb.href=jb.href;function wb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:"GET",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ub,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+"").replace(mb,"").replace(rb,jb.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+"//"+vb.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,"$1_="+kb++):f+(lb.test(f)?"&":"?")+"_="+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+ub+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\[\]$/,Db=/\r?\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Gb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join("&").replace(Bb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,"\r\n")}}):{name:b.name,value:c.replace(Db,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&"withCredentials"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Jb.pop()||n.expando+"_"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,"$1"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});

/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.6",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.6",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),a(c.target).is('input[type="radio"]')||a(c.target).is('input[type="checkbox"]')||c.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.6",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.6",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),c.isInStateTrue()?void 0:(clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide())},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover%20requires%20tooltip.html");c.VERSION="3.3.6",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.6",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");
d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.6",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return c>e?"top":!1;if("bottom"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:"bottom":a-d>=e+g?!1:"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=e?"top":null!=d&&i+j>=a-d?"bottom":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
// Register the namespace
window.FormValidation = {
    AddOn:     {},  // Add-ons
    Framework: {},  // Supported frameworks
    I18n:      {},  // i18n
    Validator: {}   // Available validators
};

if (typeof jQuery === 'undefined') {
    throw new Error('FormValidation requires jQuery');
}

(function($) {
    var version = $.fn.jquery.split(' ')[0].split('.');
    if ((+version[0] < 2 && +version[1] < 9) || (+version[0] === 1 && +version[1] === 9 && +version[2] < 1)) {
        throw new Error('FormValidation requires jQuery version 1.9.1 or higher');
    }
}(jQuery));

(function($) {
    // TODO: Remove backward compatibility in v0.7.0
    /**
     * Constructor
     *
     * @param {jQuery|String} form The form element or selector
     * @param {Object} options The options
     * @param {String} [namespace] The optional namespace which is used for data-{namespace}-xxx attributes and internal data.
     * Currently, it's used to support backward version
     * @constructor
     */
    FormValidation.Base = function(form, options, namespace) {
        this.$form      = $(form);
        this.options    = $.extend({}, $.fn.formValidation.DEFAULT_OPTIONS, options);
        this._namespace = namespace || 'fv';

        this.$invalidFields = $([]);    // Array of invalid fields
        this.$submitButton  = null;     // The submit button which is clicked to submit form
        this.$hiddenButton  = null;

        // Validating status
        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';
        this.STATUS_VALIDATING    = 'VALIDATING';
        this.STATUS_INVALID       = 'INVALID';
        this.STATUS_VALID         = 'VALID';

        // Determine the event that is fired when user change the field value
        // Most modern browsers supports input event except IE 7, 8.
        // IE 9 supports input event but the event is still not fired if I press the backspace key.
        // Get IE version
        // https://gist.github.com/padolsey/527683/#comment-7595
        var ieVersion = (function() {
            var v = 3, div = document.createElement('div'), a = div.all || [];
            while (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]) {}
            return v > 4 ? v : !v;
        }());

        var el = document.createElement('div');
        this._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';

        // The flag to indicate that the form is ready to submit when a remote/callback validator returns
        this._submitIfValid = null;

        // Field elements
        this._cacheFields = {};

        this._init();
    };

    FormValidation.Base.prototype = {
        constructor: FormValidation.Base,

        /**
         * Check if the number of characters of field value exceed the threshold or not
         *
         * @param {jQuery} $field The field element
         * @returns {Boolean}
         */
        _exceedThreshold: function($field) {
            var ns        = this._namespace,
                field     = $field.attr('data-' + ns + '-field'),
                threshold = this.options.fields[field].threshold || this.options.threshold;
            if (!threshold) {
                return true;
            }
            var cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;
            return (cannotType || $field.val().length >= threshold);
        },

        /**
         * Init form
         */
        _init: function() {
            var that    = this,
                ns      = this._namespace,
                options = {
                    addOns:         {},
                    autoFocus:      this.$form.attr('data-' + ns + '-autofocus'),
                    button: {
                        selector: this.$form.attr('data-' + ns + '-button-selector') || this.$form.attr('data-' + ns + '-submitbuttons'), // Support backward
                        disabled: this.$form.attr('data-' + ns + '-button-disabled')
                    },
                    control: {
                        valid:   this.$form.attr('data-' + ns + '-control-valid'),
                        invalid: this.$form.attr('data-' + ns + '-control-invalid')
                    },
                    err: {
                        clazz:     this.$form.attr('data-' + ns + '-err-clazz'),
                        container: this.$form.attr('data-' + ns + '-err-container') || this.$form.attr('data-' + ns + '-container'), // Support backward
                        parent:    this.$form.attr('data-' + ns + '-err-parent')
                    },
                    events: {
                        formInit:         this.$form.attr('data-' + ns + '-events-form-init'),
                        formError:        this.$form.attr('data-' + ns + '-events-form-error'),
                        formSuccess:      this.$form.attr('data-' + ns + '-events-form-success'),
                        fieldAdded:       this.$form.attr('data-' + ns + '-events-field-added'),
                        fieldRemoved:     this.$form.attr('data-' + ns + '-events-field-removed'),
                        fieldInit:        this.$form.attr('data-' + ns + '-events-field-init'),
                        fieldError:       this.$form.attr('data-' + ns + '-events-field-error'),
                        fieldSuccess:     this.$form.attr('data-' + ns + '-events-field-success'),
                        fieldStatus:      this.$form.attr('data-' + ns + '-events-field-status'),
                        localeChanged:    this.$form.attr('data-' + ns + '-events-locale-changed'),
                        validatorError:   this.$form.attr('data-' + ns + '-events-validator-error'),
                        validatorSuccess: this.$form.attr('data-' + ns + '-events-validator-success')
                    },
                    excluded:      this.$form.attr('data-' + ns + '-excluded'),
                    icon: {
                        valid:      this.$form.attr('data-' + ns + '-icon-valid')      || this.$form.attr('data-' + ns + '-feedbackicons-valid'),      // Support backward
                        invalid:    this.$form.attr('data-' + ns + '-icon-invalid')    || this.$form.attr('data-' + ns + '-feedbackicons-invalid'),    // Support backward
                        validating: this.$form.attr('data-' + ns + '-icon-validating') || this.$form.attr('data-' + ns + '-feedbackicons-validating'), // Support backward
                        feedback:   this.$form.attr('data-' + ns + '-icon-feedback')
                    },
                    live:          this.$form.attr('data-' + ns + '-live'),
                    locale:        this.$form.attr('data-' + ns + '-locale'),
                    message:       this.$form.attr('data-' + ns + '-message'),
                    onError:       this.$form.attr('data-' + ns + '-onerror'),
                    onSuccess:     this.$form.attr('data-' + ns + '-onsuccess'),
                    row: {
                        selector: this.$form.attr('data-' + ns + '-row-selector') || this.$form.attr('data-' + ns + '-group'), // Support backward
                        valid:    this.$form.attr('data-' + ns + '-row-valid'),
                        invalid:  this.$form.attr('data-' + ns + '-row-invalid'),
                        feedback: this.$form.attr('data-' + ns + '-row-feedback')
                    },
                    threshold:     this.$form.attr('data-' + ns + '-threshold'),
                    trigger:       this.$form.attr('data-' + ns + '-trigger'),
                    verbose:       this.$form.attr('data-' + ns + '-verbose'),
                    fields:        {}
                };

            this.$form
                // Disable client side validation in HTML 5
                .attr('novalidate', 'novalidate')
                .addClass(this.options.elementClass)
                // Disable the default submission first
                .on('submit.' + ns, function(e) {
                    e.preventDefault();
                    that.validate();
                })
                .on('click.' + ns, this.options.button.selector, function() {
                    that.$submitButton  = $(this);
                    // The user just click the submit button
                    that._submitIfValid = true;
                });

            if (this.options.declarative === true || this.options.declarative === 'true') {
                // Find all fields which have either "name" or "data-{namespace}-field" attribute
                this.$form
                    .find('[name], [data-' + ns + '-field]')
                    .each(function () {
                        var $field = $(this),
                            field  = $field.attr('name') || $field.attr('data-' + ns + '-field'),
                            opts   = that._parseOptions($field);
                        if (opts) {
                            $field.attr('data-' + ns + '-field', field);
                            options.fields[field] = $.extend({}, opts, options.fields[field]);
                        }
                    });
            }

            this.options = $.extend(true, this.options, options);

            // Normalize the err.parent option
            if ('string' === typeof this.options.err.parent) {
                this.options.err.parent = new RegExp(this.options.err.parent);
            }

            // Support backward
            if (this.options.container) {
                this.options.err.container = this.options.container;
                delete this.options.container;
            }
            if (this.options.feedbackIcons) {
                this.options.icon = $.extend(true, this.options.icon, this.options.feedbackIcons);
                delete this.options.feedbackIcons;
            }
            if (this.options.group) {
                this.options.row.selector = this.options.group;
                delete this.options.group;
            }
            if (this.options.submitButtons) {
                this.options.button.selector = this.options.submitButtons;
                delete this.options.submitButtons;
            }

            // If the locale is not found, reset it to default one
            if (!FormValidation.I18n[this.options.locale]) {
                this.options.locale = $.fn.formValidation.DEFAULT_OPTIONS.locale;
            }

            // Parse the add-on options from HTML attributes
            if (this.options.declarative === true || this.options.declarative === 'true') {
                this.options = $.extend(true, this.options, { addOns: this._parseAddOnOptions() });
            }

            // When pressing Enter on any field in the form, the first submit button will do its job.
            // The form then will be submitted.
            // I create a first hidden submit button
            this.$hiddenButton = $('<button/>')
                                    .attr('type', 'submit')
                                    .prependTo(this.$form)
                                    .addClass('fv-hidden-submit')
                                    .css({ display: 'none', width: 0, height: 0 });

            this.$form
                .on('click.' +  this._namespace, '[type="submit"]', function(e) {
                    // #746: Check if the button click handler returns false
                    if (!e.isDefaultPrevented()) {
                        var $target = $(e.target),
                            // The button might contain HTML tag
                            $button = $target.is('[type="submit"]') ? $target.eq(0) : $target.parent('[type="submit"]').eq(0);

                        // Don't perform validation when clicking on the submit button/input
                        // which aren't defined by the 'button.selector' option
                        if (that.options.button.selector && !$button.is(that.options.button.selector) && !$button.is(that.$hiddenButton)) {
                            that.$form.off('submit.' + that._namespace).submit();
                        }
                    }
                });

            for (var field in this.options.fields) {
                this._initField(field);
            }

            // Init the add-ons
            for (var addOn in this.options.addOns) {
                if ('function' === typeof FormValidation.AddOn[addOn].init) {
                    FormValidation.AddOn[addOn].init(this, this.options.addOns[addOn]);
                }
            }

            this.$form.trigger($.Event(this.options.events.formInit), {
                bv: this,   // Support backward
                fv: this,
                options: this.options
            });

            // Prepare the events
            if (this.options.onSuccess) {
                this.$form.on(this.options.events.formSuccess, function(e) {
                    FormValidation.Helper.call(that.options.onSuccess, [e]);
                });
            }
            if (this.options.onError) {
                this.$form.on(this.options.events.formError, function(e) {
                    FormValidation.Helper.call(that.options.onError, [e]);
                });
            }
        },

        /**
         * Init field
         *
         * @param {String|jQuery} field The field name or field element
         */
        _initField: function(field) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    fields = this.getFieldElements(field);
                    fields.attr('data-' + ns + '-field', field);
                    break;
                default:
                    break;
            }

            // We don't need to validate non-existing fields
            if (fields.length === 0) {
                return;
            }

            if (this.options.fields[field] === null || this.options.fields[field].validators === null) {
                return;
            }

            var validatorName;
            for (validatorName in this.options.fields[field].validators) {
                if (!FormValidation.Validator[validatorName]) {
                    delete this.options.fields[field].validators[validatorName];
                }
            }
            if (this.options.fields[field].enabled === null) {
                this.options.fields[field].enabled = true;
            }

            var that      = this,
                total     = fields.length,
                type      = fields.attr('type'),
                updateAll = (total === 1) || ('radio' === type) || ('checkbox' === type),
                trigger   = this._getFieldTrigger(fields.eq(0)),
                events    = $.map(trigger, function(item) {
                    return item + '.update.' + ns;
                }).join(' ');

            for (var i = 0; i < total; i++) {
                var $field    = fields.eq(i),
                    row       = this.options.fields[field].row || this.options.row.selector,
                    $parent   = $field.closest(row),
                    // Allow user to indicate where the error messages are shown
                    // Support backward
                    container = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))
                                ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)
                                : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container),
                    $message  = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this._getMessageContainer($field, row);

                if (container && container !== 'tooltip' && container !== 'popover') {
                    $message.addClass(this.options.err.clazz);
                }

                // Remove all error messages and feedback icons
                $message.find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for="' + field + '"]').remove();
                $parent.find('i[data-' + ns + '-icon-for="' + field + '"]').remove();

                // Whenever the user change the field value, mark it as not validated yet
                $field.off(events).on(events, function() {
                    that.updateStatus($(this), that.STATUS_NOT_VALIDATED);
                });

                // Create help block elements for showing the error messages
                $field.data(ns + '.messages', $message);
                for (validatorName in this.options.fields[field].validators) {
                    $field.data(ns + '.result.' + validatorName, this.STATUS_NOT_VALIDATED);

                    if (!updateAll || i === total - 1) {
                        $('<small/>')
                            .css('display', 'none')
                            .addClass(this.options.err.clazz)
                            .attr('data-' + ns + '-validator', validatorName)
                            .attr('data-' + ns + '-for', field)
                            .attr('data-' + ns + '-result', this.STATUS_NOT_VALIDATED)
                            .html(this._getMessage(field, validatorName))
                            .appendTo($message);
                    }

                    // Init the validator
                    if ('function' === typeof FormValidation.Validator[validatorName].init) {
                        FormValidation.Validator[validatorName].init(this, $field, this.options.fields[field].validators[validatorName]);
                    }
                }

                // Prepare the feedback icons
                // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)
                if (this.options.fields[field].icon !== false && this.options.fields[field].icon !== 'false'
                    && this.options.icon
                    && this.options.icon.valid && this.options.icon.invalid && this.options.icon.validating
                    && (!updateAll || i === total - 1))
                {
                    // $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid).addClass(this.options.row.feedback);
                    // Keep error messages which are populated from back-end
                    $parent.addClass(this.options.row.feedback);
                    var $icon = $('<i/>')
                                    .css('display', 'none')
                                    .addClass(this.options.icon.feedback)
                                    .attr('data-' + ns + '-icon-for', field)
                                    .insertAfter($field);

                    // Store the icon as a data of field element
                    (!updateAll ? $field : fields).data(ns + '.icon', $icon);

                    if ('tooltip' === container || 'popover' === container) {
                        (!updateAll ? $field : fields)
                            .on(this.options.events.fieldError, function() {
                                $parent.addClass('fv-has-tooltip');
                            })
                            .on(this.options.events.fieldSuccess, function() {
                                $parent.removeClass('fv-has-tooltip');
                            });

                        $field
                            // Show tooltip/popover message when field gets focus
                            .off('focus.container.' + ns)
                            .on('focus.container.' + ns, function() {
                                that._showTooltip($field, container);
                            })
                            // and hide them when losing focus
                            .off('blur.container.' + ns)
                            .on('blur.container.' + ns, function() {
                                that._hideTooltip($field, container);
                            });
                    }

                    if ('string' === typeof this.options.fields[field].icon && this.options.fields[field].icon !== 'true') {
                        $icon.appendTo($(this.options.fields[field].icon));
                    } else {
                        this._fixIcon($field, $icon);
                    }
                }
            }

            // Prepare the events
            fields
                .on(this.options.events.fieldSuccess, function(e, data) {
                    var onSuccess = that.getOptions(data.field, null, 'onSuccess');
                    if (onSuccess) {
                        FormValidation.Helper.call(onSuccess, [e, data]);
                    }
                })
                .on(this.options.events.fieldError, function(e, data) {
                    var onError = that.getOptions(data.field, null, 'onError');
                    if (onError) {
                        FormValidation.Helper.call(onError, [e, data]);
                    }
                })
                .on(this.options.events.fieldStatus, function(e, data) {
                    var onStatus = that.getOptions(data.field, null, 'onStatus');
                    if (onStatus) {
                        FormValidation.Helper.call(onStatus, [e, data]);
                    }
                })
                .on(this.options.events.validatorError, function(e, data) {
                    var onError = that.getOptions(data.field, data.validator, 'onError');
                    if (onError) {
                        FormValidation.Helper.call(onError, [e, data]);
                    }
                })
                .on(this.options.events.validatorSuccess, function(e, data) {
                    var onSuccess = that.getOptions(data.field, data.validator, 'onSuccess');
                    if (onSuccess) {
                        FormValidation.Helper.call(onSuccess, [e, data]);
                    }
                });

            // Set live mode
            this.onLiveChange(fields, 'live', function() {
                if (that._exceedThreshold($(this))) {
                    that.validateField($(this));
                }
            });

            fields.trigger($.Event(this.options.events.fieldInit), {
                bv: this,   // Support backward
                fv: this,
                field: field,
                element: fields
            });
        },

        /**
         * Check if the field is excluded.
         * Returning true means that the field will not be validated
         *
         * @param {jQuery} $field The field element
         * @returns {Boolean}
         */
        _isExcluded: function($field) {
            var ns           = this._namespace,
                excludedAttr = $field.attr('data-' + ns + '-excluded'),
                // I still need to check the 'name' attribute while initializing the field
                field        = $field.attr('data-' + ns + '-field') || $field.attr('name');

            switch (true) {
                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):
                case (excludedAttr === 'true'):
                case (excludedAttr === ''):
                    return true;

                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):
                case (excludedAttr === 'false'):
                    return false;

                default:
                    if (this.options.excluded) {
                        // Convert to array first
                        if ('string' === typeof this.options.excluded) {
                            this.options.excluded = $.map(this.options.excluded.split(','), function(item) {
                                // Trim the spaces
                                return $.trim(item);
                            });
                        }

                        var length = this.options.excluded.length;
                        for (var i = 0; i < length; i++) {
                            if (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))
                                || ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true))
                            {
                                return true;
                            }
                        }
                    }
                    return false;
            }
        },

        /**
         * Get a field changed trigger event
         *
         * @param {jQuery} $field The field element
         * @returns {String[]} The event names triggered on field change
         */
        _getFieldTrigger: function($field) {
            var ns      = this._namespace,
                trigger = $field.data(ns + '.trigger');
            if (trigger) {
                return trigger;
            }

            var type  = $field.attr('type'),
                name  = $field.attr('data-' + ns + '-field'),
                event = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $field.get(0).tagName) ? 'change' : this._changeEvent;
            trigger   = ((this.options.fields[name] ? this.options.fields[name].trigger : null) || this.options.trigger || event).split(' ');

            // Since the trigger data is used many times, I need to cache it to use later
            $field.data(ns + '.trigger', trigger);

            return trigger;
        },

        /**
         * Get the error message for given field and validator
         *
         * @param {String} field The field name
         * @param {String} validatorName The validator name
         * @returns {String}
         */
        _getMessage: function(field, validatorName) {
            if (!this.options.fields[field] || !FormValidation.Validator[validatorName]
                || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName])
            {
                return '';
            }

            switch (true) {
                case !!this.options.fields[field].validators[validatorName].message:
                    return this.options.fields[field].validators[validatorName].message;
                case !!this.options.fields[field].message:
                    return this.options.fields[field].message;
                case (!!FormValidation.I18n[this.options.locale] && !!FormValidation.I18n[this.options.locale][validatorName] && !!FormValidation.I18n[this.options.locale][validatorName]['default']):
                    return FormValidation.I18n[this.options.locale][validatorName]['default'];
                default:
                    return this.options.message;
            }
        },

        /**
         * Get the element to place the error messages
         *
         * @param {jQuery} $field The field element
         * @param {String} row
         * @returns {jQuery}
         */
        _getMessageContainer: function($field, row) {
            if (!this.options.err.parent) {
                throw new Error('The err.parent option is not defined');
            }

            var $parent = $field.parent();
            if ($parent.is(row)) {
                return $parent;
            }

            var cssClasses = $parent.attr('class');
            if (!cssClasses) {
                return this._getMessageContainer($parent, row);
            }

            if (this.options.err.parent.test(cssClasses)) {
                return $parent;
            }

            return this._getMessageContainer($parent, row);
        },

        /**
         * Parse the add-on options from HTML attributes
         *
         * @returns {Object}
         */
        _parseAddOnOptions: function() {
            var ns     = this._namespace,
                names  = this.$form.attr('data-' + ns + '-addons'),
                addOns = this.options.addOns || {};

            if (names) {
                names = names.replace(/\s/g, '').split(',');
                for (var i = 0; i < names.length; i++) {
                    if (!addOns[names[i]]) {
                        addOns[names[i]] = {};
                    }
                }
            }

            // Try to parse each add-on options
            var addOn, attrMap, attr, option;
            for (addOn in addOns) {
                if (!FormValidation.AddOn[addOn]) {
                    // Add-on is not found
                    delete addOns[addOn];
                    continue;
                }

                attrMap = FormValidation.AddOn[addOn].html5Attributes;
                if (attrMap) {
                    for (attr in attrMap) {
                        option = this.$form.attr('data-' + ns + '-addons-' + addOn.toLowerCase() + '-' + attr.toLowerCase());
                        if (option) {
                            addOns[addOn][attrMap[attr]] = option;
                        }
                    }
                }
            }

            return addOns;
        },

        /**
         * Parse the validator options from HTML attributes
         *
         * @param {jQuery} $field The field element
         * @returns {Object}
         */
        _parseOptions: function($field) {
            var ns         = this._namespace,
                field      = $field.attr('name') || $field.attr('data-' + ns + '-field'),
                validators = {},
                validator,
                v,          // Validator name
                attrName,
                enabled,
                optionName,
                optionAttrName,
                optionValue,
                html5AttrName,
                html5AttrMap;

            for (v in FormValidation.Validator) {
                validator    = FormValidation.Validator[v];
                attrName     = 'data-' + ns + '-' + v.toLowerCase(),
                enabled      = $field.attr(attrName) + '';
                html5AttrMap = ('function' === typeof validator.enableByHtml5) ? validator.enableByHtml5($field) : null;

                if ((html5AttrMap && enabled !== 'false')
                    || (html5AttrMap !== true && ('' === enabled || 'true' === enabled || attrName === enabled.toLowerCase())))
                {
                    // Try to parse the options via attributes
                    validator.html5Attributes = $.extend({}, {
                                                    message: 'message',
                                                    onerror: 'onError',
                                                    onsuccess: 'onSuccess',
                                                    transformer: 'transformer'
                                                }, validator.html5Attributes);
                    validators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);

                    for (html5AttrName in validator.html5Attributes) {
                        optionName  = validator.html5Attributes[html5AttrName];
                        optionAttrName = 'data-' + ns + '-' + v.toLowerCase() + '-' + html5AttrName,
                        optionValue = $field.attr(optionAttrName);
                        if (optionValue) {
                            if ('true' === optionValue || optionAttrName === optionValue.toLowerCase()) {
                                optionValue = true;
                            } else if ('false' === optionValue) {
                                optionValue = false;
                            }
                            validators[v][optionName] = optionValue;
                        }
                    }
                }
            }

            var opts = {
                    autoFocus:   $field.attr('data-' + ns + '-autofocus'),
                    err:         $field.attr('data-' + ns + '-err-container') || $field.attr('data-' + ns + '-container'), // Support backward
                    excluded:    $field.attr('data-' + ns + '-excluded'),
                    icon:        $field.attr('data-' + ns + '-icon') || $field.attr('data-' + ns + '-feedbackicons') || (this.options.fields && this.options.fields[field] ? this.options.fields[field].feedbackIcons : null), // Support backward
                    message:     $field.attr('data-' + ns + '-message'),
                    onError:     $field.attr('data-' + ns + '-onerror'),
                    onStatus:    $field.attr('data-' + ns + '-onstatus'),
                    onSuccess:   $field.attr('data-' + ns + '-onsuccess'),
                    row:         $field.attr('data-' + ns + '-row') || $field.attr('data-' + ns + '-group') || (this.options.fields && this.options.fields[field] ? this.options.fields[field].group : null), // Support backward
                    selector:    $field.attr('data-' + ns + '-selector'),
                    threshold:   $field.attr('data-' + ns + '-threshold'),
                    transformer: $field.attr('data-' + ns + '-transformer'),
                    trigger:     $field.attr('data-' + ns + '-trigger'),
                    verbose:     $field.attr('data-' + ns + '-verbose'),
                    validators:  validators
                },
                emptyOptions    = $.isEmptyObject(opts),        // Check if the field options are set using HTML attributes
                emptyValidators = $.isEmptyObject(validators);  // Check if the field validators are set using HTML attributes

            if (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {
                opts.validators = validators;
                return opts;
            } else {
                return null;
            }
        },

        /**
         * Called when all validations are completed
         */
        _submit: function() {
            var isValid = this.isValid();
            if (isValid === null) {
                return;
            }

            var eventType = isValid ? this.options.events.formSuccess : this.options.events.formError,
                e         = $.Event(eventType);

            this.$form.trigger(e);

            // Call default handler
            // Check if whether the submit button is clicked
            if (this.$submitButton) {
                isValid ? this._onSuccess(e) : this._onError(e);
            }
        },

        // ~~~~~~
        // Events
        // ~~~~~~

        /**
         * The default handler of error.form.fv event.
         * It will be called when there is a invalid field
         *
         * @param {jQuery.Event} e The jQuery event object
         */
        _onError: function(e) {
            if (e.isDefaultPrevented()) {
                return;
            }

            if ('submitted' === this.options.live) {
                // Enable live mode
                this.options.live = 'enabled';

                var that = this;
                for (var field in this.options.fields) {
                    (function(f) {
                        var fields  = that.getFieldElements(f);
                        if (fields.length) {
                            that.onLiveChange(fields, 'live', function() {
                                if (that._exceedThreshold($(this))) {
                                    that.validateField($(this));
                                }
                            });
                        }
                    })(field);
                }
            }

            // Determined the first invalid field which will be focused on automatically
            var ns = this._namespace;
            for (var i = 0; i < this.$invalidFields.length; i++) {
                var $field    = this.$invalidFields.eq(i),
                    autoFocus = this.isOptionEnabled($field.attr('data-' + ns + '-field'), 'autoFocus');
                if (autoFocus) {
                    // Focus the field
                    $field.focus();
                    break;
                }
            }
        },

        /**
         * Called after validating a field element
         *
         * @param {jQuery} $field The field element
         * @param {String} [validatorName] The validator name
         */
        _onFieldValidated: function($field, validatorName) {
            var ns            = this._namespace,
                field         = $field.attr('data-' + ns + '-field'),
                validators    = this.options.fields[field].validators,
                counter       = {},
                numValidators = 0,
                data          = {
                    bv: this,   // Support backward
                    fv: this,
                    field: field,
                    element: $field,
                    validator: validatorName,
                    result: $field.data(ns + '.response.' + validatorName)
                };

            // Trigger an event after given validator completes
            if (validatorName) {
                switch ($field.data(ns + '.result.' + validatorName)) {
                    case this.STATUS_INVALID:
                        $field.trigger($.Event(this.options.events.validatorError), data);
                        break;
                    case this.STATUS_VALID:
                        $field.trigger($.Event(this.options.events.validatorSuccess), data);
                        break;
                    default:
                        break;
                }
            }

            counter[this.STATUS_NOT_VALIDATED] = 0;
            counter[this.STATUS_VALIDATING]    = 0;
            counter[this.STATUS_INVALID]       = 0;
            counter[this.STATUS_VALID]         = 0;

            for (var v in validators) {
                if (validators[v].enabled === false) {
                    continue;
                }

                numValidators++;
                var result = $field.data(ns + '.result.' + v);
                if (result) {
                    counter[result]++;
                }
            }

            if (counter[this.STATUS_VALID] === numValidators) {
                // Remove from the list of invalid fields
                this.$invalidFields = this.$invalidFields.not($field);

                $field.trigger($.Event(this.options.events.fieldSuccess), data);
            }
            // If all validators are completed and there is at least one validator which doesn't pass
            else if ((counter[this.STATUS_NOT_VALIDATED] === 0 || !this.isOptionEnabled(field, 'verbose')) && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {
                // Add to the list of invalid fields
                this.$invalidFields = this.$invalidFields.add($field);

                $field.trigger($.Event(this.options.events.fieldError), data);
            }
        },

        /**
         * The default handler of success.form.fv event.
         * It will be called when all the fields are valid
         *
         * @param {jQuery.Event} e The jQuery event object
         */
        _onSuccess: function(e) {
            if (e.isDefaultPrevented()) {
                return;
            }

            // Submit the form
            this.disableSubmitButtons(true).defaultSubmit();
        },

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // Abstract methods
        // Need to be implemented by sub-class that supports specific framework
        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
        },

        /**
         * Create a tooltip or popover
         * It will be shown when focusing on the field
         *
         * @param {jQuery} $field The field element
         * @param {String} message The message
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _createTooltip: function($field, message, type) {
        },

        /**
         * Destroy the tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _destroyTooltip: function($field, type) {
        },

        /**
         * Hide a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _hideTooltip: function($field, type) {
        },

        /**
         * Show a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _showTooltip: function($field, type) {
        },

        // ~~~~~~~~~~~~~~
        // Public methods
        // ~~~~~~~~~~~~~~

        /**
         * Submit the form using default submission.
         * It also does not perform any validations when submitting the form
         */
        defaultSubmit: function() {
            var ns = this._namespace;
            if (this.$submitButton) {
                // Create hidden input to send the submit buttons
                $('<input/>')
                    .attr({
                        'type': 'hidden',
                        name: this.$submitButton.attr('name')
                    })
                    .attr('data-' + ns + '-submit-hidden', '')
                    .val(this.$submitButton.val())
                    .appendTo(this.$form);
            }

            // Submit form
            this.$form.off('submit.' + ns).submit();
        },

        /**
         * Disable/enable submit buttons
         *
         * @param {Boolean} disabled Can be true or false
         * @returns {FormValidation.Base}
         */
        disableSubmitButtons: function(disabled) {
            if (!disabled) {
                this.$form
                    .find(this.options.button.selector)
                        .removeAttr('disabled')
                        .removeClass(this.options.button.disabled);
            } else if (this.options.live !== 'disabled') {
                // Don't disable if the live validating mode is disabled
                this.$form
                    .find(this.options.button.selector)
                        .attr('disabled', 'disabled')
                        .addClass(this.options.button.disabled);
            }

            return this;
        },

        /**
         * Retrieve the field elements by given name
         *
         * @param {String} field The field name
         * @returns {null|jQuery[]}
         */
        getFieldElements: function(field) {
            if (!this._cacheFields[field]) {
                if (this.options.fields[field] && this.options.fields[field].selector) {
                    // Look for the field inside the form first
                    var f = this.$form.find(this.options.fields[field].selector);
                    // If not found, search in entire document
                    this._cacheFields[field] = f.length ? f : $(this.options.fields[field].selector);
                } else {
                    this._cacheFields[field] = this.$form.find('[name="' + field + '"]');
                }
            }

            return this._cacheFields[field];
        },

        /**
         * Get the field value after applying transformer
         *
         * @param {String|jQuery} field The field name or field element
         * @param {String} validatorName The validator name
         * @returns {String}
         */
        getFieldValue: function(field, validatorName) {
            var $field, ns = this._namespace;
            if ('string' === typeof field) {
                $field = this.getFieldElements(field);
                if ($field.length === 0) {
                    return null;
                }
            } else {
                $field = field;
                field  = $field.attr('data-' + ns + '-field');
            }

            if (!field || !this.options.fields[field]) {
                return $field.val();
            }

            var transformer = (this.options.fields[field].validators && this.options.fields[field].validators[validatorName]
                                ? this.options.fields[field].validators[validatorName].transformer : null)
                                || this.options.fields[field].transformer;
            return transformer ? FormValidation.Helper.call(transformer, [$field, validatorName, this]) : $field.val();
        },

        /**
         * Get the namespace
         *
         * @returns {String}
         */
        getNamespace: function() {
            return this._namespace;
        },

        /**
         * Get the field options
         *
         * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options
         * @param {String} [validator] The name of validator. It null, the method returns form options
         * @param {String} [option] The option name
         * @return {String|Object}
         */
        getOptions: function(field, validator, option) {
            var ns = this._namespace;
            if (!field) {
                return option ? this.options[option] : this.options;
            }
            if ('object' === typeof field) {
                field = field.attr('data-' + ns + '-field');
            }
            if (!this.options.fields[field]) {
                return null;
            }

            var options = this.options.fields[field];
            if (!validator) {
                return option ? options[option] : options;
            }
            if (!options.validators || !options.validators[validator]) {
                return null;
            }

            return option ? options.validators[validator][option] : options.validators[validator];
        },

        /**
         * Get the validating result of field
         *
         * @param {String|jQuery} field The field name or field element
         * @param {String} validatorName The validator name
         * @returns {String} The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'
         */
        getStatus: function(field, validatorName) {
            var ns = this._namespace;
            switch (typeof field) {
                case 'object':
                    return field.data(ns + '.result.' + validatorName);
                case 'string':
                /* falls through */
                default:
                    return this.getFieldElements(field).eq(0).data(ns + '.result.' + validatorName);
            }
        },

        /**
         * Check whether or not a field option is enabled
         *
         * @param {String} field The field name
         * @param {String} option The option name, "verbose", "autoFocus", for example
         * @returns {Boolean}
         */
        isOptionEnabled: function(field, option) {
            if (this.options.fields[field] && (this.options.fields[field][option] === 'true' || this.options.fields[field][option] === true)) {
                return true;
            }
            if (this.options.fields[field] && (this.options.fields[field][option] === 'false' || this.options.fields[field][option] === false)) {
                return false;
            }
            return this.options[option] === 'true' || this.options[option] === true;
        },

        /**
         * Check the form validity
         *
         * @returns {Boolean|null} Returns one of three values
         * - true, if all fields are valid
         * - false, if there is one invalid field
         * - null, if there is at least one field which is not validated yet or being validated
         */
        isValid: function() {
            for (var field in this.options.fields) {
                var isValidField = this.isValidField(field);
                if (isValidField === null) {
                    return null;
                }
                if (isValidField === false) {
                    return false;
                }
            }

            return true;
        },

        /**
         * Check if all fields inside a given container are valid.
         * It's useful when working with a wizard-like such as tab, collapse
         *
         * @param {String|jQuery} container The container selector or element
         * @returns {Boolean|null} Returns one of three values
         * - true, if all fields inside the container are valid
         * - false, if there is one invalid field inside the container
         * - null, if the container consists of at least one field which is not validated yet or being validated
         */
        isValidContainer: function(container) {
            var that       = this,
                ns         = this._namespace,
                fields     = [],
                $container = ('string' === typeof container) ? $(container) : container;
            if ($container.length === 0) {
                return true;
            }

            $container.find('[data-' + ns + '-field]').each(function() {
                var $field = $(this);
                if (!that._isExcluded($field)) {
                    fields.push($field);
                }
            });

            var total = fields.length;
            for (var i = 0; i < total; i++) {
                var $f      = fields[i],
                    field   = $f.attr('data-' + ns + '-field'),
                    $errors = $f.data(ns + '.messages')
                                .find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for="' + field + '"]');

                if ($errors.filter('[data-' + ns + '-result="' + this.STATUS_INVALID + '"]').length > 0) {
                    return false;
                }

                // If the field is not validated
                if ($errors.filter('[data-' + ns + '-result="' + this.STATUS_NOT_VALIDATED + '"]').length > 0
                    || $errors.filter('[data-' + ns + '-result="' + this.STATUS_VALIDATING + '"]').length > 0)
                {
                    return null;
                }
            }

            return true;
        },

        /**
         * Check if the field is valid or not
         *
         * @param {String|jQuery} field The field name or field element
         * @returns {Boolean|null} Returns one of three values
         * - true, if the field passes all validators
         * - false, if the field doesn't pass any validator
         * - null, if there is at least one validator which isn't validated yet or being validated
         */
        isValidField: function(field) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }
            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {
                return true;
            }

            var type  = fields.attr('type'),
                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,
                $field, validatorName, status;
            for (var i = 0; i < total; i++) {
                $field = fields.eq(i);
                if (this._isExcluded($field)) {
                    continue;
                }

                for (validatorName in this.options.fields[field].validators) {
                    if (this.options.fields[field].validators[validatorName].enabled === false) {
                        continue;
                    }

                    status = $field.data(ns + '.result.' + validatorName);
                    if (status === this.STATUS_VALIDATING || status === this.STATUS_NOT_VALIDATED) {
                        return null;
                    } else if (status === this.STATUS_INVALID) {
                        return false;
                    }
                }
            }

            return true;
        },

        /**
         * Detach a handler function for a field live change event
         *
         * @param {jQuery[]} $fields The field elements
         * @param {String} namespace The event namespace
         * @returns {FormValidation.Base}
         */
        offLiveChange: function($fields, namespace) {
            if ($fields === null || $fields.length === 0) {
                return this;
            }

            var ns      = this._namespace,
                trigger = this._getFieldTrigger($fields.eq(0)),
                events  = $.map(trigger, function(item) {
                    return item + '.' + namespace + '.' + ns;
                }).join(' ');

            $fields.off(events);
            return this;
        },

        /**
         * Attach a handler function for a field live change event
         *
         * @param {jQuery[]} $fields The field elements
         * @param {String} namespace The event namespace
         * @param {Function} handler The handler function
         * @returns {FormValidation.Base}
         */
        onLiveChange: function($fields, namespace, handler) {
            if ($fields === null || $fields.length === 0) {
                return this;
            }

            var ns      = this._namespace,
                trigger = this._getFieldTrigger($fields.eq(0)),
                events  = $.map(trigger, function(item) {
                    return item + '.' + namespace + '.' + ns;
                }).join(' ');

            switch (this.options.live) {
                case 'submitted':
                    break;
                case 'disabled':
                    $fields.off(events);
                    break;
                case 'enabled':
                /* falls through */
                default:
                    $fields.off(events).on(events, function(e) {
                        handler.apply(this, arguments);
                    });
                    break;
            }

            return this;
        },

        /**
         * Update the error message
         *
         * @param {String|jQuery} field The field name or field element
         * @param {String} validator The validator name
         * @param {String} message The message
         * @returns {FormValidation.Base}
         */
        updateMessage: function(field, validator, message) {
            var that    = this,
                ns      = this._namespace,
                $fields = $([]);
            switch (typeof field) {
                case 'object':
                    $fields = field;
                    field   = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    $fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            $fields.each(function() {
                $(this)
                    .data(ns + '.messages')
                    .find('.' + that.options.err.clazz + '[data-' + ns + '-validator="' + validator + '"][data-' + ns + '-for="' + field + '"]').html(message);
            });
        },

        /**
         * Update all validating results of field
         *
         * @param {String|jQuery} field The field name or field element
         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'
         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators
         * @returns {FormValidation.Base}
         */
        updateStatus: function(field, status, validatorName) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            if (!field || !this.options.fields[field]) {
                return this;
            }

            if (status === this.STATUS_NOT_VALIDATED) {
                // Reset the flag
                // To prevent the form from doing submit when a deferred validator returns true while typing
                this._submitIfValid = false;
            }

            var that  = this,
                type  = fields.attr('type'),
                row   = this.options.fields[field].row || this.options.row.selector,
                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;

            for (var i = 0; i < total; i++) {
                var $field       = fields.eq(i);
                if (this._isExcluded($field)) {
                    continue;
                }

                var $parent      = $field.closest(row),
                    $message     = $field.data(ns + '.messages'),
                    $allErrors   = $message.find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for="' + field + '"]'),
                    $errors      = validatorName ? $allErrors.filter('[data-' + ns + '-validator="' + validatorName + '"]') : $allErrors,
                    $icon        = $field.data(ns + '.icon'),
                    // Support backward
                    container    = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))
                                    ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)
                                    : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container),
                    isValidField = null;

                // Update status
                if (validatorName) {
                    $field.data(ns + '.result.' + validatorName, status);
                } else {
                    for (var v in this.options.fields[field].validators) {
                        $field.data(ns + '.result.' + v, status);
                    }
                }

                // Show/hide error elements and feedback icons
                $errors.attr('data-' + ns + '-result', status);

                switch (status) {
                    case this.STATUS_VALIDATING:
                        isValidField = null;
                        this.disableSubmitButtons(true);
                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);
                        $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid);
                        if ($icon) {
                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).addClass(this.options.icon.validating).show();
                        }
                        break;

                    case this.STATUS_INVALID:
                        isValidField = false;
                        this.disableSubmitButtons(true);
                        $field.removeClass(this.options.control.valid).addClass(this.options.control.invalid);
                        $parent.removeClass(this.options.row.valid).addClass(this.options.row.invalid);
                        if ($icon) {
                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.validating).addClass(this.options.icon.invalid).show();
                        }
                        break;

                    case this.STATUS_VALID:
                        var isValidating   = ($allErrors.filter('[data-' + ns + '-result="' + this.STATUS_VALIDATING +'"]').length > 0),
                            isNotValidated = ($allErrors.filter('[data-' + ns + '-result="' + this.STATUS_NOT_VALIDATED +'"]').length > 0);

                        // If the field is valid (passes all validators)
                        isValidField = (isValidating || isNotValidated)     // There are some validators that have not done
                                     ? null
                                     : ($allErrors.filter('[data-' + ns + '-result="' + this.STATUS_VALID +'"]').length === $allErrors.length); // All validators are completed

                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);

                        if (isValidField === true) {
                            this.disableSubmitButtons(this.isValid() === false);
                            $field.addClass(this.options.control.valid);
                        } else if (isValidField === false) {
                            this.disableSubmitButtons(true);
                            $field.addClass(this.options.control.invalid);
                        }

                        if ($icon) {
                            $icon
                                .removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).removeClass(this.options.icon.valid)
                                .addClass(isValidField === null ? '' : (isValidField ? this.options.icon.valid
                                                                                     : (isValidating ? this.options.icon.validating : this.options.icon.invalid)))
                                .show();
                        }

                        var isValidContainer = this.isValidContainer($parent);
                        if (isValidContainer !== null) {
                            $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid).addClass(isValidContainer ? this.options.row.valid : this.options.row.invalid);
                        }
                        break;

                    case this.STATUS_NOT_VALIDATED:
                    /* falls through */
                    default:
                        isValidField = null;
                        this.disableSubmitButtons(false);
                        $field.removeClass(this.options.control.valid).removeClass(this.options.control.invalid);
                        $parent.removeClass(this.options.row.valid).removeClass(this.options.row.invalid);
                        if ($icon) {
                            $icon.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).hide();
                        }
                        break;
                }

                if ($icon && ('tooltip' === container || 'popover' === container)) {
                    (isValidField === false)
                        // Only show the first error message
                        ? this._createTooltip($field, $allErrors.filter('[data-' + ns + '-result="' + that.STATUS_INVALID + '"]').eq(0).html(), container)
                        : this._destroyTooltip($field, container);
                } else {
                    (status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();
                }

                // Trigger an event
                $field.trigger($.Event(this.options.events.fieldStatus), {
                    bv: this,   // Support backward
                    fv: this,
                    field: field,
                    element: $field,
                    status: status
                });
                this._onFieldValidated($field, validatorName);
            }

            return this;
        },

        /**
         * Validate the form
         *
         * @returns {FormValidation.Base}
         */
        validate: function() {
            if ($.isEmptyObject(this.options.fields)) {
                this._submit();
                return this;
            }
            this.disableSubmitButtons(true);

            this._submitIfValid = false;
            for (var field in this.options.fields) {
                this.validateField(field);
            }

            this._submit();
            this._submitIfValid = true;

            return this;
        },

        /**
         * Validate given field
         *
         * @param {String|jQuery} field The field name or field element
         * @returns {FormValidation.Base}
         */
        validateField: function(field) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {
                return this;
            }

            var that       = this,
                type       = fields.attr('type'),
                total      = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,
                updateAll  = ('radio' === type || 'checkbox' === type),
                validators = this.options.fields[field].validators,
                verbose    = this.isOptionEnabled(field, 'verbose'),
                validatorName,
                validateResult;

            for (var i = 0; i < total; i++) {
                var $field = fields.eq(i);
                if (this._isExcluded($field)) {
                    continue;
                }

                var stop = false;
                for (validatorName in validators) {
                    if ($field.data(ns + '.dfs.' + validatorName)) {
                        $field.data(ns + '.dfs.' + validatorName).reject();
                    }
                    if (stop) {
                        break;
                    }

                    // Don't validate field if it is already done
                    var result = $field.data(ns + '.result.' + validatorName);
                    if (result === this.STATUS_VALID || result === this.STATUS_INVALID) {
                        this._onFieldValidated($field, validatorName);
                        continue;
                    } else if (validators[validatorName].enabled === false) {
                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALID, validatorName);
                        continue;
                    }

                    $field.data(ns + '.result.' + validatorName, this.STATUS_VALIDATING);
                    validateResult = FormValidation.Validator[validatorName].validate(this, $field, validators[validatorName]);

                    // validateResult can be a $.Deferred object ...
                    if ('object' === typeof validateResult && validateResult.resolve) {
                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);
                        $field.data(ns + '.dfs.' + validatorName, validateResult);

                        validateResult.done(function($f, v, response) {
                            // v is validator name
                            $f.removeData(ns + '.dfs.' + v).data(ns + '.response.' + v, response);
                            if (response.message) {
                                that.updateMessage($f, v, response.message);
                            }

                            that.updateStatus(updateAll ? $f.attr('data-' + ns + '-field') : $f, response.valid ? that.STATUS_VALID : that.STATUS_INVALID, v);

                            if (response.valid && that._submitIfValid === true) {
                                // If a remote validator returns true and the form is ready to submit, then do it
                                that._submit();
                            } else if (!response.valid && !verbose) {
                                stop = true;
                            }
                        });
                    }
                    // ... or object { valid: true/false, message: 'dynamic message', otherKey: value, ... }
                    else if ('object' === typeof validateResult && validateResult.valid !== undefined) {
                        $field.data(ns + '.response.' + validatorName, validateResult);
                        if (validateResult.message) {
                            this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);
                        }
                        this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);
                        if (!validateResult.valid && !verbose) {
                            break;
                        }
                    }
                    // ... or a boolean value
                    else if ('boolean' === typeof validateResult) {
                        $field.data(ns + '.response.' + validatorName, validateResult);
                        this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);
                        if (!validateResult && !verbose) {
                            break;
                        }
                    }
                }
            }

            return this;
        },

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // Useful APIs which aren't used internally
        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        /**
         * Add a new field
         *
         * @param {String|jQuery} field The field name or field element
         * @param {Object} [options] The validator rules
         * @returns {FormValidation.Base}
         */
        addField: function(field, options) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field') || field.attr('name');
                    break;
                case 'string':
                    delete this._cacheFields[field];
                    fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            fields.attr('data-' + ns + '-field', field);

            var type  = fields.attr('type'),
                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;

            for (var i = 0; i < total; i++) {
                var $field = fields.eq(i);

                // Try to parse the options from HTML attributes
                var opts = this._parseOptions($field);
                opts = (opts === null) ? options : $.extend(true, options, opts);

                this.options.fields[field] = $.extend(true, this.options.fields[field], opts);

                // Update the cache
                this._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field;

                // Init the element
                this._initField(('checkbox' === type || 'radio' === type) ? field : $field);
            }

            this.disableSubmitButtons(false);
            // Trigger an event
            this.$form.trigger($.Event(this.options.events.fieldAdded), {
                field: field,
                element: fields,
                options: this.options.fields[field]
            });

            return this;
        },

        /**
         * Destroy the plugin
         * It will remove all error messages, feedback icons and turn off the events
         */
        destroy: function() {
            var ns = this._namespace, i, field, fields, $field, validator, $icon, row;

            // Destroy the validators first
            for (field in this.options.fields) {
                fields = this.getFieldElements(field);
                for (i = 0; i < fields.length; i++) {
                    $field = fields.eq(i);
                    for (validator in this.options.fields[field].validators) {
                        if ($field.data(ns + '.dfs.' + validator)) {
                            $field.data(ns + '.dfs.' + validator).reject();
                        }
                        $field.removeData(ns + '.result.' + validator)
                              .removeData(ns + '.response.' + validator)
                              .removeData(ns + '.dfs.' + validator);

                        // Destroy the validator
                        if ('function' === typeof FormValidation.Validator[validator].destroy) {
                            FormValidation.Validator[validator].destroy(this, $field, this.options.fields[field].validators[validator]);
                        }
                    }
                }
            }

            // Remove messages and icons
            for (field in this.options.fields) {
                fields = this.getFieldElements(field);
                row    = this.options.fields[field].row || this.options.row.selector;
                for (i = 0; i < fields.length; i++) {
                    $field = fields.eq(i);
                    $field
                        // Remove all error messages
                        .data(ns + '.messages')
                            .find('.' + this.options.err.clazz.split(' ').join('.') + '[data-' + ns + '-validator][data-' + ns + '-for="' + field + '"]').remove().end()
                            .end()
                        .removeData(ns + '.messages')
                        // Remove feedback classes
                        .closest(row)
                            .removeClass(this.options.row.valid)
                            .removeClass(this.options.row.invalid)
                            .removeClass(this.options.row.feedback)
                            .end()
                        // Turn off events
                        .off('.' + ns)
                        .removeAttr('data-' + ns + '-field');

                    // Remove feedback icons, tooltip/popover container
                    // Support backward
                    var container = ('function' === typeof (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container))
                                    ? (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container).call(this, $field, this)
                                    : (this.options.fields[field].container || this.options.fields[field].err || this.options.err.container);
                    if ('tooltip' === container || 'popover' === container) {
                        this._destroyTooltip($field, container);
                    }

                    $icon = $field.data(ns + '.icon');
                    if ($icon) {
                        $icon.remove();
                    }
                    $field.removeData(ns + '.icon')
                          // It's safe to remove trigger data here, because it might be used when destroying the validator
                          .removeData(ns + '.trigger');
                }
            }

            // Destroy the add-ons
            for (var addOn in this.options.addOns) {
                if ('function' === typeof FormValidation.AddOn[addOn].destroy) {
                    FormValidation.AddOn[addOn].destroy(this, this.options.addOns[addOn]);
                }
            }

            this.disableSubmitButtons(false);   // Enable submit buttons
            this.$hiddenButton.remove();        // Remove the hidden button

            this.$form
                .removeClass(this.options.elementClass)
                .off('.' + ns)
                .removeData('bootstrapValidator')   // Support backward
                .removeData('formValidation')
                // Remove generated hidden elements
                .find('[data-' + ns + '-submit-hidden]').remove().end()
                .find('[type="submit"]')
                    .off('click.' + ns);
        },

        /**
         * Enable/Disable all validators to given field
         *
         * @param {String} field The field name
         * @param {Boolean} enabled Enable/Disable field validators
         * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled
         * @returns {FormValidation.Base}
         */
        enableFieldValidators: function(field, enabled, validatorName) {
            var validators = this.options.fields[field].validators;

            // Enable/disable particular validator
            if (validatorName
                && validators
                && validators[validatorName] && validators[validatorName].enabled !== enabled)
            {
                this.options.fields[field].validators[validatorName].enabled = enabled;
                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);
            }
            // Enable/disable all validators
            else if (!validatorName && this.options.fields[field].enabled !== enabled) {
                this.options.fields[field].enabled = enabled;
                for (var v in validators) {
                    this.enableFieldValidators(field, enabled, v);
                }
            }

            return this;
        },

        /**
         * Some validators have option which its value is dynamic.
         * For example, the zipCode validator has the country option which might be changed dynamically by a select element.
         *
         * @param {jQuery|String} field The field name or element
         * @param {String|Function} option The option which can be determined by:
         * - a string
         * - name of field which defines the value
         * - name of function which returns the value
         * - a function returns the value
         *
         * The callback function has the format of
         *      callback: function(value, validator, $field) {
         *          // value is the value of field
         *          // validator is the BootstrapValidator instance
         *          // $field is the field element
         *      }
         *
         * @returns {String}
         */
        getDynamicOption: function(field, option) {
            var $field = ('string' === typeof field) ? this.getFieldElements(field) : field,
                value  = $field.val();

            // Option can be determined by
            // ... a function
            if ('function' === typeof option) {
                return FormValidation.Helper.call(option, [value, this, $field]);
            }
            // ... value of other field
            else if ('string' === typeof option) {
                var $f = this.getFieldElements(option);
                if ($f.length) {
                    return $f.val();
                }
                // ... return value of callback
                else {
                    return FormValidation.Helper.call(option, [value, this, $field]) || option;
                }
            }

            return null;
        },

        /**
         * Get the form element
         *
         * @returns {jQuery}
         */
        getForm: function() {
            return this.$form;
        },

        /**
         * Get the list of invalid fields
         *
         * @returns {jQuery[]}
         */
        getInvalidFields: function() {
            return this.$invalidFields;
        },

        /**
         * Get the current locale
         *
         * @return {String}
         */
        getLocale: function() {
            return this.options.locale;
        },

        /**
         * Get the error messages
         *
         * @param {String|jQuery} [field] The field name or field element
         * If the field is not defined, the method returns all error messages of all fields
         * @param {String} [validator] The name of validator
         * If the validator is not defined, the method returns error messages of all validators
         * @returns {String[]}
         */
        getMessages: function(field, validator) {
            var that     = this,
                ns       = this._namespace,
                messages = [],
                $fields  = $([]);

            switch (true) {
                case (field && 'object' === typeof field):
                    $fields = field;
                    break;
                case (field && 'string' === typeof field):
                    var f = this.getFieldElements(field);
                    if (f.length > 0) {
                        var type = f.attr('type');
                        $fields = ('radio' === type || 'checkbox' === type) ? f.eq(0) : f;
                    }
                    break;
                default:
                    $fields = this.$invalidFields;
                    break;
            }

            var filter = validator ? '[data-' + ns + '-validator="' + validator + '"]' : '';
            $fields.each(function() {
                messages = messages.concat(
                    $(this)
                        .data(ns + '.messages')
                        .find('.' + that.options.err.clazz + '[data-' + ns + '-for="' + $(this).attr('data-' + ns + '-field') + '"][data-' + ns + '-result="' + that.STATUS_INVALID + '"]' + filter)
                        .map(function() {
                            var v = $(this).attr('data-' + ns + '-validator'),
                                f = $(this).attr('data-' + ns + '-for');
                            return (that.options.fields[f].validators[v].enabled === false) ? '' : $(this).html();
                        })
                        .get()
                );
            });

            return messages;
        },

        /**
         * Returns the clicked submit button
         *
         * @returns {jQuery}
         */
        getSubmitButton: function() {
            return this.$submitButton;
        },

        /**
         * Remove a given field
         *
         * @param {String|jQuery} field The field name or field element
         * @returns {FormValidation.Base}
         */
        removeField: function(field) {
            var ns     = this._namespace,
                fields = $([]);
            switch (typeof field) {
                case 'object':
                    fields = field;
                    field  = field.attr('data-' + ns + '-field') || field.attr('name');
                    fields.attr('data-' + ns + '-field', field);
                    break;
                case 'string':
                    fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            if (fields.length === 0) {
                return this;
            }

            var type  = fields.attr('type'),
                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;

            for (var i = 0; i < total; i++) {
                var $field = fields.eq(i);

                // Remove from the list of invalid fields
                this.$invalidFields = this.$invalidFields.not($field);

                // Update the cache
                this._cacheFields[field] = this._cacheFields[field].not($field);
            }

            if (!this._cacheFields[field] || this._cacheFields[field].length === 0) {
                delete this.options.fields[field];
            }
            if ('checkbox' === type || 'radio' === type) {
                this._initField(field);
            }

            this.disableSubmitButtons(false);
            // Trigger an event
            this.$form.trigger($.Event(this.options.events.fieldRemoved), {
                field: field,
                element: fields
            });

            return this;
        },

        /**
         * Reset given field
         *
         * @param {String|jQuery} field The field name or field element
         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)
         * @returns {FormValidation.Base}
         */
        resetField: function(field, resetValue) {
            var ns      = this._namespace,
                $fields = $([]);
            switch (typeof field) {
                case 'object':
                    $fields = field;
                    field   = field.attr('data-' + ns + '-field');
                    break;
                case 'string':
                    $fields = this.getFieldElements(field);
                    break;
                default:
                    break;
            }

            var total = $fields.length;
            if (this.options.fields[field]) {
                for (var i = 0; i < total; i++) {
                    for (var validator in this.options.fields[field].validators) {
                        $fields.eq(i).removeData(ns + '.dfs.' + validator);
                    }
                }
            }

            // Mark field as not validated yet
            this.updateStatus(field, this.STATUS_NOT_VALIDATED);

            if (resetValue) {
                var type = $fields.attr('type');
                ('radio' === type || 'checkbox' === type) ? $fields.prop('checked', false).removeAttr('selected') : $fields.val('');
            }

            return this;
        },

        /**
         * Reset the form
         *
         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)
         * @returns {FormValidation.Base}
         */
        resetForm: function(resetValue) {
            for (var field in this.options.fields) {
                this.resetField(field, resetValue);
            }

            this.$invalidFields = $([]);
            this.$submitButton  = null;

            // Enable submit buttons
            this.disableSubmitButtons(false);

            return this;
        },

        /**
         * Revalidate given field
         * It's used when you need to revalidate the field which its value is updated by other plugin
         *
         * @param {String|jQuery} field The field name of field element
         * @returns {FormValidation.Base}
         */
        revalidateField: function(field) {
            this.updateStatus(field, this.STATUS_NOT_VALIDATED)
                .validateField(field);

            return this;
        },

        /**
         * Set the locale
         *
         * @param {String} locale The locale in format of countrycode_LANGUAGECODE
         * @returns {FormValidation.Base}
         */
        setLocale: function(locale) {
            this.options.locale = locale;
            this.$form.trigger($.Event(this.options.events.localeChanged), {
                locale: locale,
                bv: this,   // Support backward
                fv: this
            });

            return this;
        },

        /**
         * Update the option of a specific validator
         *
         * @param {String|jQuery} field The field name or field element
         * @param {String} validator The validator name
         * @param {String} option The option name
         * @param {String} value The value to set
         * @returns {FormValidation.Base}
         */
        updateOption: function(field, validator, option, value) {
            var ns = this._namespace;
            if ('object' === typeof field) {
                field = field.attr('data-' + ns + '-field');
            }
            if (this.options.fields[field] && this.options.fields[field].validators[validator]) {
                this.options.fields[field].validators[validator][option] = value;
                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);
            }

            return this;
        },

        /**
         * Validate given container
         * It can be used with isValidContainer() when you want to work with wizard form
         *
         * @param {String|jQuery} container The container selector or element
         * @returns {FormValidation.Base}
         */
        validateContainer: function(container) {
            var that       = this,
                ns         = this._namespace,
                fields     = [],
                $container = ('string' === typeof container) ? $(container) : container;
            if ($container.length === 0) {
                return this;
            }

            $container.find('[data-' + ns + '-field]').each(function() {
                var $field = $(this);
                if (!that._isExcluded($field)) {
                    fields.push($field);
                }
            });

            var total = fields.length;
            for (var i = 0; i < total; i++) {
                this.validateField(fields[i]);
            }

            return this;
        }
    };

    // Plugin definition
    $.fn.formValidation = function(option) {
        var params = arguments;
        return this.each(function() {
            var $this   = $(this),
                data    = $this.data('formValidation'),
                options = 'object' === typeof option && option;
            if (!data) {
                var framework = (options.framework || $this.attr('data-fv-framework') || 'bootstrap').toLowerCase(),
                    clazz     = framework.substr(0, 1).toUpperCase() + framework.substr(1);

                if (typeof FormValidation.Framework[clazz] === 'undefined') {
                    throw new Error('The class FormValidation.Framework.' + clazz + ' is not implemented');
                }

                data = new FormValidation.Framework[clazz](this, options);
                $this.addClass('fv-form-' + framework)
                     .data('formValidation', data);
            }

            // Allow to call plugin method
            if ('string' === typeof option) {
                data[option].apply(data, Array.prototype.slice.call(params, 1));
            }
        });
    };

    $.fn.formValidation.Constructor = FormValidation.Base;

    // The default options
    // Sorted in alphabetical order
    $.fn.formValidation.DEFAULT_OPTIONS = {
        // The first invalid field will be focused automatically
        autoFocus: true,

        // Support declarative usage (setting options via HTML 5 attributes)
        // Setting to false can improve the performance
        declarative: true,

        // The form CSS class
        elementClass: 'fv-form',

        // Use custom event name to avoid window.onerror being invoked by jQuery
        // See #630
        events: {
            // Support backward
            formInit: 'init.form.fv',
            formError: 'err.form.fv',
            formSuccess: 'success.form.fv',
            fieldAdded: 'added.field.fv',
            fieldRemoved: 'removed.field.fv',
            fieldInit: 'init.field.fv',
            fieldError: 'err.field.fv',
            fieldSuccess: 'success.field.fv',
            fieldStatus: 'status.field.fv',
            localeChanged: 'changed.locale.fv',
            validatorError: 'err.validator.fv',
            validatorSuccess: 'success.validator.fv'
        },

        // Indicate fields which won't be validated
        // By default, the plugin will not validate the following kind of fields:
        // - disabled
        // - hidden
        // - invisible
        //
        // The setting consists of jQuery filters. Accept 3 formats:
        // - A string. Use a comma to separate filter
        // - An array. Each element is a filter
        // - An array. Each element can be a callback function
        //      function($field, validator) {
        //          $field is jQuery object representing the field element
        //          validator is the BootstrapValidator instance
        //          return true or false;
        //      }
        //
        // The 3 following settings are equivalent:
        //
        // 1) ':disabled, :hidden, :not(:visible)'
        // 2) [':disabled', ':hidden', ':not(:visible)']
        // 3) [':disabled', ':hidden', function($field) {
        //        return !$field.is(':visible');
        //    }]
        excluded: [':disabled', ':hidden', ':not(:visible)'],

        // Map the field name with validator rules
        fields: null,

        // Live validating option
        // Can be one of 3 values:
        // - enabled: The plugin validates fields as soon as they are changed
        // - disabled: Disable the live validating. The error messages are only shown after the form is submitted
        // - submitted: The live validating is enabled after the form is submitted
        live: 'enabled',

        // Locale in the format of languagecode_COUNTRYCODE
        locale: 'en_US',

        // Default invalid message
        message: 'This value is not valid',

        // The field will not be live validated if its length is less than this number of characters
        threshold: null,

        // Whether to be verbose when validating a field or not.
        // Possible values:
        // - true:  when a field has multiple validators, all of them will be checked, and respectively - if errors occur in
        //          multiple validators, all of them will be displayed to the user
        // - false: when a field has multiple validators, validation for this field will be terminated upon the first encountered error.
        //          Thus, only the very first error message related to this field will be displayed to the user
        verbose: true,

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // These options mostly are overridden by specific framework
        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        button: {
            // The submit buttons selector
            // These buttons will be disabled to prevent the valid form from multiple submissions
            selector: '[type="submit"]',

            // The disabled class
            disabled: ''
        },

        control: {
            // The CSS class for valid control
            valid: '',

            // The CSS class for invalid control
            invalid: ''
        },

        err: {
            // The CSS class of each message element
            clazz: '',

            // The error messages container. It can be:
            // - 'tooltip' if you want to use Bootstrap tooltip to show error messages
            // - 'popover' if you want to use Bootstrap popover to show error messages
            // - a CSS selector indicating the container
            // In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message
            // You also can define the message container for particular field
            container: null,

            // Used to determine where the messages are placed
            parent: null
        },

        // Shows ok/error/loading icons based on the field validity.
        icon: {
            valid: null,
            invalid: null,
            validating: null,
            feedback: ''
        },

        row: {
            // The CSS selector for indicating the element consists of the field
            // You should adjust this option if your form group consists of many fields which not all of them need to be validated
            selector: null,
            valid: '',
            invalid: '',
            feedback: ''
        }
    };
}(jQuery));
;(function($) {
    // Helper methods, which can be used in validator class
    FormValidation.Helper = {
        /**
         * Execute a callback function
         *
         * @param {String|Function} functionName Can be
         * - name of global function
         * - name of namespace function (such as A.B.C)
         * - a function
         * @param {Array} args The callback arguments
         */
        call: function(functionName, args) {
            if ('function' === typeof functionName) {
                return functionName.apply(this, args);
            } else if ('string' === typeof functionName) {
                if ('()' === functionName.substring(functionName.length - 2)) {
                    functionName = functionName.substring(0, functionName.length - 2);
                }
                var ns      = functionName.split('.'),
                    func    = ns.pop(),
                    context = window;
                for (var i = 0; i < ns.length; i++) {
                    context = context[ns[i]];
                }

                return (typeof context[func] === 'undefined') ? null : context[func].apply(this, args);
            }
        },

        /**
         * Validate a date
         *
         * @param {Number} year The full year in 4 digits
         * @param {Number} month The month number
         * @param {Number} day The day number
         * @param {Boolean} [notInFuture] If true, the date must not be in the future
         * @returns {Boolean}
         */
        date: function(year, month, day, notInFuture) {
            if (isNaN(year) || isNaN(month) || isNaN(day)) {
                return false;
            }
            if (day.length > 2 || month.length > 2 || year.length > 4) {
                return false;
            }

            day   = parseInt(day, 10);
            month = parseInt(month, 10);
            year  = parseInt(year, 10);

            if (year < 1000 || year > 9999 || month <= 0 || month > 12) {
                return false;
            }
            var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            // Update the number of days in Feb of leap year
            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
                numDays[1] = 29;
            }

            // Check the day
            if (day <= 0 || day > numDays[month - 1]) {
                return false;
            }

            if (notInFuture === true) {
                var currentDate  = new Date(),
                    currentYear  = currentDate.getFullYear(),
                    currentMonth = currentDate.getMonth(),
                    currentDay   = currentDate.getDate();
                return (year < currentYear
                || (year === currentYear && month - 1 < currentMonth)
                || (year === currentYear && month - 1 === currentMonth && day < currentDay));
            }

            return true;
        },

        /**
         * Format a string
         * It's used to format the error message
         * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'
         *
         * @param {String} message
         * @param {Array} parameters
         * @returns {String}
         */
        format: function(message, parameters) {
            if (!$.isArray(parameters)) {
                parameters = [parameters];
            }

            for (var i in parameters) {
                message = message.replace('%s', parameters[i]);
            }

            return message;
        },

        /**
         * Implement Luhn validation algorithm
         * Credit to https://gist.github.com/ShirtlessKirk/2134376
         *
         * @see http://en.wikipedia.org/wiki/Luhn
         * @param {String} value
         * @returns {Boolean}
         */
        luhn: function(value) {
            var length  = value.length,
                mul     = 0,
                prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],
                sum     = 0;

            while (length--) {
                sum += prodArr[mul][parseInt(value.charAt(length), 10)];
                mul ^= 1;
            }

            return (sum % 10 === 0 && sum > 0);
        },

        /**
         * Implement modulus 11, 10 (ISO 7064) algorithm
         *
         * @param {String} value
         * @returns {Boolean}
         */
        mod11And10: function(value) {
            var check  = 5,
                length = value.length;
            for (var i = 0; i < length; i++) {
                check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;
            }
            return (check === 1);
        },

        /**
         * Implements Mod 37, 36 (ISO 7064) algorithm
         * Usages:
         * mod37And36('A12425GABC1234002M')
         * mod37And36('002006673085', '0123456789')
         *
         * @param {String} value
         * @param {String} [alphabet]
         * @returns {Boolean}
         */
        mod37And36: function(value, alphabet) {
            alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            var modulus = alphabet.length,
                length  = value.length,
                check   = Math.floor(modulus / 2);
            for (var i = 0; i < length; i++) {
                check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;
            }
            return (check === 1);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            base64: {
                'default': 'Please enter a valid base 64 encoded'
            }
        }
    });

    FormValidation.Validator.base64 = {
        /**
         * Return true if the input value is a base 64 encoded string.
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'base64');
            if (value === '') {
                return true;
            }

            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            between: {
                'default': 'Please enter a value between %s and %s',
                notInclusive: 'Please enter a value between %s and %s strictly'
            }
        }
    });

    FormValidation.Validator.between = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max',
            inclusive: 'inclusive'
        },

        enableByHtml5: function($field) {
            if ('range' === $field.attr('type')) {
                return {
                    min: $field.attr('min'),
                    max: $field.attr('max')
                };
            }

            return false;
        },

        /**
         * Return true if the input value is between (strictly or not) two given numbers
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - min
         * - max
         *
         * The min, max keys define the number which the field value compares to. min, max can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - inclusive [optional]: Can be true or false. Default is true
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'between');
            if (value === '') {
                return true;
            }

			value = this._format(value);
            if (!$.isNumeric(value)) {
                return false;
            }

            var locale   = validator.getLocale(),
                min      = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),
                max      = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),
                minValue = this._format(min),
                maxValue = this._format(max);

            value = parseFloat(value);
			return (options.inclusive === true || options.inclusive === undefined)
                    ? {
                        valid: value >= minValue && value <= maxValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].between['default'], [min, max])
                    }
                    : {
                        valid: value > minValue  && value <  maxValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].between.notInclusive, [min, max])
                    };
        },

        _format: function(value) {
            return (value + '').replace(',', '.');
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            bic: {
                'default': 'Please enter a valid BIC number'
            }
        }
    });

    FormValidation.Validator.bic = {
        /**
         * Validate an Business Identifier Code (BIC), also known as ISO 9362, SWIFT-BIC, SWIFT ID or SWIFT code
         *
         * For more information see http://en.wikipedia.org/wiki/ISO_9362
         *
         * @todo The 5 and 6 characters are an ISO 3166-1 country code, this could also be validated
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'bic');
            if (value === '') {
                return true;
            }
            return /^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.Validator.blank = {
        /**
         * Placeholder validator that can be used to display a custom validation message
         * returned from the server
         * Example:
         *
         * (1) a "blank" validator is applied to an input field.
         * (2) data is entered via the UI that is unable to be validated client-side.
         * (3) server returns a 400 with JSON data that contains the field that failed
         *     validation and an associated message.
         * (4) ajax 400 call handler does the following:
         *
         *      bv.updateMessage(field, 'blank', errorMessage);
         *      bv.updateStatus(field, 'INVALID');
         *
         * @see https://github.com/formvalidation/formvalidation/issues/542
         * @see https://github.com/formvalidation/formvalidation/pull/666
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            return true;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            callback: {
                'default': 'Please enter a valid value'
            }
        }
    });

    FormValidation.Validator.callback = {
        html5Attributes: {
            message: 'message',
            callback: 'callback'
        },

        /**
         * Return result from the callback method
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - callback: The callback method that passes 2 parameters:
         *      callback: function(fieldValue, validator, $field) {
         *          // fieldValue is the value of field
         *          // validator is instance of BootstrapValidator
         *          // $field is the field element
         *      }
         * - message: The invalid message
         * @returns {Deferred}
         */
        validate: function(validator, $field, options) {
            var value  = validator.getFieldValue($field, 'callback'),
                dfd    = new $.Deferred(),
                result = { valid: true };

            if (options.callback) {
                var response = FormValidation.Helper.call(options.callback, [value, validator, $field]);
                result = ('boolean' === typeof response) ? { valid: response } : response;
            }

            dfd.resolve($field, 'callback', result);
            return dfd;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            choice: {
                'default': 'Please enter a valid value',
                less: 'Please choose %s options at minimum',
                more: 'Please choose %s options at maximum',
                between: 'Please choose %s - %s options'
            }
        }
    });

    FormValidation.Validator.choice = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max'
        },

        /**
         * Check if the number of checked boxes are less or more than a given number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of following keys:
         * - min
         * - max
         *
         * At least one of two keys is required
         * The min, max keys define the number which the field value compares to. min, max can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - message: The invalid message
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var locale     = validator.getLocale(),
                ns         = validator.getNamespace(),
                numChoices = $field.is('select')
                            ? validator.getFieldElements($field.attr('data-' + ns + '-field')).find('option').filter(':selected').length
                            : validator.getFieldElements($field.attr('data-' + ns + '-field')).filter(':checked').length,
                min        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,
                max        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,
                isValid    = true,
                message    = options.message || FormValidation.I18n[locale].choice['default'];

            if ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {
                isValid = false;
            }

            switch (true) {
                case (!!min && !!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.between, [parseInt(min, 10), parseInt(max, 10)]);
                    break;

                case (!!min):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.less, parseInt(min, 10));
                    break;

                case (!!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].choice.more, parseInt(max, 10));
                    break;

                default:
                    break;
            }

            return { valid: isValid, message: message };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            color: {
                'default': 'Please enter a valid color'
            }
        }
    });

    FormValidation.Validator.color = {
        html5Attributes: {
            message: 'message',
            type: 'type'
        },

        enableByHtml5: function($field) {
            return ('color' === $field.attr('type'));
        },

        SUPPORTED_TYPES: [
            'hex', 'rgb', 'rgba', 'hsl', 'hsla', 'keyword'
        ],

        KEYWORD_COLORS: [
            // Colors start with A
            'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure',
            // B
            'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood',
            // C
            'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan',
            // D
            'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta',
            'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue',
            'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray',
            'dimgrey', 'dodgerblue',
            // F
            'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',
            // G
            'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey',
            // H
            'honeydew', 'hotpink',
            // I
            'indianred', 'indigo', 'ivory',
            // K
            'khaki',
            // L
            'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',
            'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',
            'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen',
            'linen',
            // M
            'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen',
            'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream',
            'mistyrose', 'moccasin',
            // N
            'navajowhite', 'navy',
            // O
            'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid',
            // P
            'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink',
            'plum', 'powderblue', 'purple',
            // R
            'red', 'rosybrown', 'royalblue',
            // S
            'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue',
            'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue',
            // T
            'tan', 'teal', 'thistle', 'tomato', 'transparent', 'turquoise',
            // V
            'violet',
            // W
            'wheat', 'white', 'whitesmoke',
            // Y
            'yellow', 'yellowgreen'
        ],

        /**
         * Return true if the input value is a valid color
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * - type: The array of valid color types
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'color');
            if (value === '') {
                return true;
            }

            // Only accept 6 hex character values due to the HTML 5 spec
            // See http://www.w3.org/TR/html-markup/input.color.html#input.color.attrs.value
            if (this.enableByHtml5($field)) {
                return /^#[0-9A-F]{6}$/i.test(value);
            }

            var types = options.type || this.SUPPORTED_TYPES;
            if (!$.isArray(types)) {
                types = types.replace(/s/g, '').split(',');
            }

            var method,
                type,
                isValid = false;

            for (var i = 0; i < types.length; i++) {
                type    = types[i];
                method  = '_' + type.toLowerCase();
                isValid = isValid || this[method](value);
                if (isValid) {
                    return true;
                }
            }

            return false;
        },

        _hex: function(value) {
            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);
        },

        _hsl: function(value) {
            return /^hsl\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/.test(value);
        },

        _hsla: function(value) {
            return /^hsla\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/.test(value);
        },

        _keyword: function(value) {
            return $.inArray(value, this.KEYWORD_COLORS) >= 0;
        },

        _rgb: function(value) {
            var regexInteger = /^rgb\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){2}(\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*)\)$/,
                regexPercent = /^rgb\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/;
            return regexInteger.test(value) || regexPercent.test(value);
        },

        _rgba: function(value) {
            var regexInteger = /^rgba\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/,
                regexPercent = /^rgba\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/;
            return regexInteger.test(value) || regexPercent.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            creditCard: {
                'default': 'Please enter a valid credit card number'
            }
        }
    });

    FormValidation.Validator.creditCard = {
        /**
         * Return true if the input value is valid credit card number
         * Based on https://gist.github.com/DiegoSalazar/4075533
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} [options] Can consist of the following key:
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'creditCard');
            if (value === '') {
                return true;
            }

            // Accept only digits, dashes or spaces
            if (/[^0-9-\s]+/.test(value)) {
                return false;
            }
            value = value.replace(/\D/g, '');

            if (!FormValidation.Helper.luhn(value)) {
                return false;
            }

            // Validate the card number based on prefix (IIN ranges) and length
            var cards = {
                AMERICAN_EXPRESS: {
                    length: [15],
                    prefix: ['34', '37']
                },
                DINERS_CLUB: {
                    length: [14],
                    prefix: ['300', '301', '302', '303', '304', '305', '36']
                },
                DINERS_CLUB_US: {
                    length: [16],
                    prefix: ['54', '55']
                },
                DISCOVER: {
                    length: [16],
                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',
                             '62214', '62215', '62216', '62217', '62218', '62219',
                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',
                             '62290', '62291', '622920', '622921', '622922', '622923',
                             '622924', '622925', '644', '645', '646', '647', '648',
                             '649', '65']
                },
                JCB: {
                    length: [16],
                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']
                },
                LASER: {
                    length: [16, 17, 18, 19],
                    prefix: ['6304', '6706', '6771', '6709']
                },
                MAESTRO: {
                    length: [12, 13, 14, 15, 16, 17, 18, 19],
                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']
                },
                MASTERCARD: {
                    length: [16],
                    prefix: ['51', '52', '53', '54', '55']
                },
                SOLO: {
                    length: [16, 18, 19],
                    prefix: ['6334', '6767']
                },
                UNIONPAY: {
                    length: [16, 17, 18, 19],
                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',
                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',
                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',
                             '622920', '622921', '622922', '622923', '622924', '622925']
                },
                VISA: {
                    length: [16],
                    prefix: ['4']
                }
            };

            var type, i;
            for (type in cards) {
                for (i in cards[type].prefix) {
                    if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix
                        && $.inArray(value.length, cards[type].length) !== -1)                      // and length
                    {
                        return {
                            valid: true,
                            type: type
                        };
                    }
                }
            }

            return false;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            cusip: {
                'default': 'Please enter a valid CUSIP number'
            }
        }
    });

    FormValidation.Validator.cusip = {
        /**
         * Validate a CUSIP number
         * Examples:
         * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6
         * - Invalid: 31430F200, 022615AC2
         *
         * @see http://en.wikipedia.org/wiki/CUSIP
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} [options] Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'cusip');
            if (value === '') {
                return true;
            }

            value = value.toUpperCase();
            if (!/^[0-9A-Z]{9}$/.test(value)) {
                return false;
            }

            var converted = $.map(value.split(''), function(item) {
                                var code = item.charCodeAt(0);
                                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))
                                            // Replace A, B, C, ..., Z with 10, 11, ..., 35
                                            ? (code - 'A'.charCodeAt(0) + 10)
                                            : item;
                            }),
                length    = converted.length,
                sum       = 0;
            for (var i = 0; i < length - 1; i++) {
                var num = parseInt(converted[i], 10);
                if (i % 2 !== 0) {
                    num *= 2;
                }
                if (num > 9) {
                    num -= 9;
                }
                sum += num;
            }

            sum = (10 - (sum % 10)) % 10;
            return sum === parseInt(converted[length - 1], 10);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            cvv: {
                'default': 'Please enter a valid CVV number'
            }
        }
    });

    FormValidation.Validator.cvv = {
        html5Attributes: {
            message: 'message',
            ccfield: 'creditCardField'
        },

        /**
         * Bind the validator on the live change of the credit card field
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - creditCardField: The credit card number field
         */
        init: function(validator, $field, options) {
            if (options.creditCardField) {
                var creditCardField = validator.getFieldElements(options.creditCardField);
                validator.onLiveChange(creditCardField, 'live_cvv', function() {
                    var status = validator.getStatus($field, 'cvv');
                    if (status !== validator.STATUS_NOT_VALIDATED) {
                        validator.revalidateField($field);
                    }
                });
            }
        },

        /**
         * Unbind the validator on the live change of the credit card field
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - creditCardField: The credit card number field
         */
        destroy: function(validator, $field, options) {
            if (options.creditCardField) {
                var creditCardField = validator.getFieldElements(options.creditCardField);
                validator.offLiveChange(creditCardField, 'live_cvv');
            }
        },

        /**
         * Return true if the input value is a valid CVV number.
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - creditCardField: The credit card number field. It can be null
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'cvv');
            if (value === '') {
                return true;
            }

            if (!/^[0-9]{3,4}$/.test(value)) {
                return false;
            }

            if (!options.creditCardField) {
                return true;
            }

            // Get the credit card number
            var creditCard = validator.getFieldElements(options.creditCardField).val();
            if (creditCard === '') {
                return true;
            }
            
            creditCard = creditCard.replace(/\D/g, '');

            // Supported credit card types
            var cards = {
                AMERICAN_EXPRESS: {
                    length: [15],
                    prefix: ['34', '37']
                },
                DINERS_CLUB: {
                    length: [14],
                    prefix: ['300', '301', '302', '303', '304', '305', '36']
                },
                DINERS_CLUB_US: {
                    length: [16],
                    prefix: ['54', '55']
                },
                DISCOVER: {
                    length: [16],
                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',
                             '62214', '62215', '62216', '62217', '62218', '62219',
                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',
                             '62290', '62291', '622920', '622921', '622922', '622923',
                             '622924', '622925', '644', '645', '646', '647', '648',
                             '649', '65']
                },
                JCB: {
                    length: [16],
                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']
                },
                LASER: {
                    length: [16, 17, 18, 19],
                    prefix: ['6304', '6706', '6771', '6709']
                },
                MAESTRO: {
                    length: [12, 13, 14, 15, 16, 17, 18, 19],
                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']
                },
                MASTERCARD: {
                    length: [16],
                    prefix: ['51', '52', '53', '54', '55']
                },
                SOLO: {
                    length: [16, 18, 19],
                    prefix: ['6334', '6767']
                },
                UNIONPAY: {
                    length: [16, 17, 18, 19],
                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',
                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',
                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',
                             '622920', '622921', '622922', '622923', '622924', '622925']
                },
                VISA: {
                    length: [16],
                    prefix: ['4']
                }
            };
            var type, i, creditCardType = null;
            for (type in cards) {
                for (i in cards[type].prefix) {
                    if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix
                        && $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length
                    {
                        creditCardType = type;
                        break;
                    }
                }
            }

            return (creditCardType === null)
                        ? false
                        : (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            date: {
                'default': 'Please enter a valid date',
                min: 'Please enter a date after %s',
                max: 'Please enter a date before %s',
                range: 'Please enter a date in the range %s - %s'
            }
        }
    });

    FormValidation.Validator.date = {
        html5Attributes: {
            message: 'message',
            format: 'format',
            min: 'min',
            max: 'max',
            separator: 'separator'
        },

        /**
         * Return true if the input value is valid date
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * - min: the minimum date
         * - max: the maximum date
         * - separator: Use to separate the date, month, and year.
         * By default, it is /
         * - format: The date format. Default is MM/DD/YYYY
         * The format can be:
         *
         * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option
         * ii) date and time:
         * The time can consist of h, m, s parts which are separated by :
         * ii) date, time and A (indicating AM or PM)
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'date');
            if (value === '') {
                return true;
            }

            options.format = options.format || 'MM/DD/YYYY';

            // #683: Force the format to YYYY-MM-DD as the default browser behaviour when using type="date" attribute
            if ($field.attr('type') === 'date') {
                options.format = 'YYYY-MM-DD';
            }

            var locale     = validator.getLocale(),
                message    = options.message || FormValidation.I18n[locale].date['default'],
                formats    = options.format.split(' '),
                dateFormat = formats[0],
                timeFormat = (formats.length > 1) ? formats[1] : null,
                amOrPm     = (formats.length > 2) ? formats[2] : null,
                sections   = value.split(' '),
                date       = sections[0],
                time       = (sections.length > 1) ? sections[1] : null;

            if (formats.length !== sections.length) {
                return {
                    valid: false,
                    message: message
                };
            }

            // Determine the separator
            var separator = options.separator;
            if (!separator) {
                separator = (date.indexOf('index.html') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);
            }
            if (separator === null || date.indexOf(separator) === -1) {
                return {
                    valid: false,
                    message: message
                };
            }

            // Determine the date
            date       = date.split(separator);
            dateFormat = dateFormat.split(separator);
            if (date.length !== dateFormat.length) {
                return {
                    valid: false,
                    message: message
                };
            }

            var year  = date[$.inArray('YYYY', dateFormat)],
                month = date[$.inArray('MM', dateFormat)],
                day   = date[$.inArray('DD', dateFormat)];

            if (!year || !month || !day || year.length !== 4) {
                return {
                    valid: false,
                    message: message
                };
            }

            // Determine the time
            var minutes = null, hours = null, seconds = null;
            if (timeFormat) {
                timeFormat = timeFormat.split(':');
                time       = time.split(':');

                if (timeFormat.length !== time.length) {
                    return {
                        valid: false,
                        message: message
                    };
                }

                hours   = time.length > 0 ? time[0] : null;
                minutes = time.length > 1 ? time[1] : null;
                seconds = time.length > 2 ? time[2] : null;

                if (hours === '' || minutes === '' || seconds === '') {
                    return {
                        valid: false,
                        message: message
                    };
                }

                // Validate seconds
                if (seconds) {
                    if (isNaN(seconds) || seconds.length > 2) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                    seconds = parseInt(seconds, 10);
                    if (seconds < 0 || seconds > 60) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                }

                // Validate hours
                if (hours) {
                    if (isNaN(hours) || hours.length > 2) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                    hours = parseInt(hours, 10);
                    if (hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                }

                // Validate minutes
                if (minutes) {
                    if (isNaN(minutes) || minutes.length > 2) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                    minutes = parseInt(minutes, 10);
                    if (minutes < 0 || minutes > 59) {
                        return {
                            valid: false,
                            message: message
                        };
                    }
                }
            }

            // Validate day, month, and year
            var valid     = FormValidation.Helper.date(year, month, day),
                // declare the date, min and max objects
                min       = null,
                max       = null,
                minOption = options.min,
                maxOption = options.max;

            if (minOption) {
                if (isNaN(Date.parse(minOption))) {
                    minOption = validator.getDynamicOption($field, minOption);
                }

                min       = minOption instanceof Date ? minOption : this._parseDate(minOption, dateFormat, separator);
                // In order to avoid displaying a date string like "Mon Dec 08 2014 19:14:12 GMT+0000 (WET)"
                minOption = minOption instanceof Date ? this._formatDate(minOption, options.format) : minOption;
            }

            if (maxOption) {
                if (isNaN(Date.parse(maxOption))) {
                    maxOption = validator.getDynamicOption($field, maxOption);
                }

                max       = maxOption instanceof Date ? maxOption : this._parseDate(maxOption, dateFormat, separator);
                // In order to avoid displaying a date string like "Mon Dec 08 2014 19:14:12 GMT+0000 (WET)"
                maxOption = maxOption instanceof Date ? this._formatDate(maxOption, options.format) : maxOption;
            }

            date = new Date(year, month -1, day, hours, minutes, seconds);

            switch (true) {
                case (minOption && !maxOption && valid):
                    valid   = date.getTime() >= min.getTime();
                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.min, minOption);
                    break;

                case (maxOption && !minOption && valid):
                    valid   = date.getTime() <= max.getTime();
                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.max, maxOption);
                    break;

                case (maxOption && minOption && valid):
                    valid   = date.getTime() <= max.getTime() && date.getTime() >= min.getTime();
                    message = options.message || FormValidation.Helper.format(FormValidation.I18n[locale].date.range, [minOption, maxOption]);
                    break;

                default:
                    break;
            }

            return {
                valid: valid,
                message: message
            };
        },

        /**
         * Return a date object after parsing the date string
         *
         * @param {String} date   The date string to parse
         * @param {String} format The date format
         * The format can be:
         *   - date: Consist of DD, MM, YYYY parts which are separated by the separator option
         *   - date and time:
         *     The time can consist of h, m, s parts which are separated by :
         * @param {String} separator The separator used to separate the date, month, and year
         * @returns {Date}
         */
        _parseDate: function(date, format, separator) {
            var minutes     = 0, hours = 0, seconds = 0,
                sections    = date.split(' '),
                dateSection = sections[0],
                timeSection = (sections.length > 1) ? sections[1] : null;

            dateSection = dateSection.split(separator);
            var year  = dateSection[$.inArray('YYYY', format)],
                month = dateSection[$.inArray('MM', format)],
                day   = dateSection[$.inArray('DD', format)];
            if (timeSection) {
                timeSection = timeSection.split(':');
                hours       = timeSection.length > 0 ? timeSection[0] : null;
                minutes     = timeSection.length > 1 ? timeSection[1] : null;
                seconds     = timeSection.length > 2 ? timeSection[2] : null;
            }

            return new Date(year, month -1, day, hours, minutes, seconds);
        },

        /**
         * Format date
         *
         * @param {Date} date The date object to format
         * @param {String} format The date format
         * The format can consist of the following tokens:
         *      d       Day of the month without leading zeros (1 through 31)
         *      dd      Day of the month with leading zeros (01 through 31)
         *      m       Month without leading zeros (1 through 12)
         *      mm      Month with leading zeros (01 through 12)
         *      yy      Last two digits of year (for example: 14)
         *      yyyy    Full four digits of year (for example: 2014)
         *      h       Hours without leading zeros (1 through 12)
         *      hh      Hours with leading zeros (01 through 12)
         *      H       Hours without leading zeros (0 through 23)
         *      HH      Hours with leading zeros (00 through 23)
         *      M       Minutes without leading zeros (0 through 59)
         *      MM      Minutes with leading zeros (00 through 59)
         *      s       Seconds without leading zeros (0 through 59)
         *      ss      Seconds with leading zeros (00 through 59)
         * @returns {String}
         */
        _formatDate: function(date, format) {
            format = format
                        .replace(/Y/g, 'y')
                        .replace(/M/g, 'm')
                        .replace(/D/g, 'd')
                        .replace(/:m/g, ':M')
                        .replace(/:mm/g, ':MM')
                        .replace(/:S/, ':s')
                        .replace(/:SS/, ':ss');

            var replacer = {
                d: function(date) {
                    return date.getDate();
                },
                dd: function(date) {
                    var d = date.getDate();
                    return (d < 10) ? '0' + d : d;
                },
                m: function(date) {
                    return date.getMonth() + 1;
                },
                mm: function(date) {
                    var m = date.getMonth() + 1;
                    return m < 10 ? '0' + m : m;
                },
                yy: function(date) {
                    return ('' + date.getFullYear()).substr(2);
                },
                yyyy: function(date) {
                    return date.getFullYear();
                },
                h: function(date) {
                    return date.getHours() % 12 || 12;
                },
                hh: function(date) {
                    var h = date.getHours() % 12 || 12;
                    return h < 10 ? '0' + h : h;
                },
                H: function(date) {
                    return date.getHours();
                },
                HH: function(date) {
                    var H = date.getHours();
                    return H < 10 ? '0' + H : H;
                },
                M: function(date) {
                    return date.getMinutes();
                },
                MM: function(date) {
                    var M = date.getMinutes();
                    return M < 10 ? '0' + M : M;
                },
                s: function(date) {
                    return date.getSeconds();
                },
                ss: function(date) {
                    var s = date.getSeconds();
                    return s < 10 ? '0' + s : s;
                }
            };

            return format.replace(/d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|"[^"]*"|'[^']*'/g, function(match) {
                return replacer[match] ? replacer[match](date) : match.slice(1, match.length - 1);
            });
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            different: {
                'default': 'Please enter a different value'
            }
        }
    });

    FormValidation.Validator.different = {
        html5Attributes: {
            message: 'message',
            field: 'field'
        },

        /**
         * Bind the validator on the live change of the field to compare with current one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         */
        init: function(validator, $field, options) {
            var fields = options.field.split(',');
            for (var i = 0; i < fields.length; i++) {
                var compareWith = validator.getFieldElements(fields[i]);
                validator.onLiveChange(compareWith, 'live_different', function() {
                    var status = validator.getStatus($field, 'different');
                    if (status !== validator.STATUS_NOT_VALIDATED) {
                        validator.revalidateField($field);
                    }
                });
            }
        },

        /**
         * Unbind the validator on the live change of the field to compare with current one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         */
        destroy: function(validator, $field, options) {
            var fields = options.field.split(',');
            for (var i = 0; i < fields.length; i++) {
                var compareWith = validator.getFieldElements(fields[i]);
                validator.offLiveChange(compareWith, 'live_different');
            }
        },

        /**
         * Return true if the input value is different with given field's value
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'different');
            if (value === '') {
                return true;
            }

            var fields  = options.field.split(','),
                isValid = true;

            for (var i = 0; i < fields.length; i++) {
                var compareWith = validator.getFieldElements(fields[i]);
                if (compareWith == null || compareWith.length === 0) {
                    continue;
                }

                var compareValue = validator.getFieldValue(compareWith, 'different');
                if (value === compareValue) {
                    isValid = false;
                } else if (compareValue !== '') {
                    validator.updateStatus(compareWith, validator.STATUS_VALID, 'different');
                }
            }

            return isValid;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            digits: {
                'default': 'Please enter only digits'
            }
        }
    });

    FormValidation.Validator.digits = {
        /**
         * Return true if the input value contains digits only
         *
         * @param {FormValidation.Base} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} [options]
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'digits');
            if (value === '') {
                return true;
            }

            return /^\d+$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            ean: {
                'default': 'Please enter a valid EAN number'
            }
        }
    });

    FormValidation.Validator.ean = {
        /**
         * Validate EAN (International Article Number)
         * Examples:
         * - Valid: 73513537, 9780471117094, 4006381333931
         * - Invalid: 73513536
         *
         * @see http://en.wikipedia.org/wiki/European_Article_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'ean');
            if (value === '') {
                return true;
            }

            if (!/^(\d{8}|\d{12}|\d{13})$/.test(value)) {
                return false;
            }

            var length = value.length,
                sum    = 0,
                weight = (length === 8) ? [3, 1] : [1, 3];
            for (var i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i % 2];
            }
            sum = (10 - sum % 10) % 10;
            return (sum + '' === value.charAt(length - 1));
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            ein: {
                'default': 'Please enter a valid EIN number'
            }
        }
    });

    FormValidation.Validator.ein = {
        // The first two digits are called campus
        // See http://en.wikipedia.org/wiki/Employer_Identification_Number
        // http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes
        CAMPUS: {
            ANDOVER: ['10', '12'],
            ATLANTA: ['60', '67'],
            AUSTIN: ['50', '53'],
            BROOKHAVEN: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],
            CINCINNATI: ['30', '32', '35', '36', '37', '38', '61'],
            FRESNO: ['15', '24'],
            KANSAS_CITY: ['40', '44'],
            MEMPHIS: ['94', '95'],
            OGDEN: ['80', '90'],
            PHILADELPHIA: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],
            INTERNET: ['20', '26', '27', '45', '46'],
            SMALL_BUSINESS_ADMINISTRATION: ['31']
        },

        /**
         * Validate EIN (Employer Identification Number) which is also known as
         * Federal Employer Identification Number (FEIN) or Federal Tax Identification Number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Object|Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'ein');
            if (value === '') {
                return true;
            }

            if (!/^[0-9]{2}-?[0-9]{7}$/.test(value)) {
                return false;
            }
            // Check the first two digits
            var campus = value.substr(0, 2) + '';
            for (var key in this.CAMPUS) {
                if ($.inArray(campus, this.CAMPUS[key]) !== -1) {
                    return {
                        valid: true,
                        campus: key
                    };
                }
            }

            return false;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            emailAddress: {
                'default': 'Please enter a valid email address'
            }
        }
    });

    FormValidation.Validator.emailAddress = {
        html5Attributes: {
            message: 'message',
            multiple: 'multiple',
            separator: 'separator'
        },

        enableByHtml5: function($field) {
            return ('email' === $field.attr('type'));
        },

        /**
         * Return true if and only if the input value is a valid email address
         *
         * @param {FormValidation.Base} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} [options]
         * - multiple: Allow multiple email addresses, separated by a comma or semicolon; default is false.
         * - separator: Regex for character or characters expected as separator between addresses; default is comma /[,;]/, i.e. comma or semicolon.
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'emailAddress');
            if (value === '') {
                return true;
            }

            // Email address regular expression
            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
            var emailRegExp   = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
                allowMultiple = options.multiple === true || options.multiple === 'true';

            if (allowMultiple) {
                var separator = options.separator || /[,;]/,
                    addresses = this._splitEmailAddresses(value, separator);

                for (var i = 0; i < addresses.length; i++) {
                    if (!emailRegExp.test(addresses[i])) {
                        return false;
                    }
                }

                return true;
            } else {
                return emailRegExp.test(value);
            }
        },

        _splitEmailAddresses: function(emailAddresses, separator) {
            var quotedFragments     = emailAddresses.split(/"/),
                quotedFragmentCount = quotedFragments.length,
                emailAddressArray   = [],
                nextEmailAddress    = '';

            for (var i = 0; i < quotedFragmentCount; i++) {
                if (i % 2 === 0) {
                    var splitEmailAddressFragments     = quotedFragments[i].split(separator),
                        splitEmailAddressFragmentCount = splitEmailAddressFragments.length;

                    if (splitEmailAddressFragmentCount === 1) {
                        nextEmailAddress += splitEmailAddressFragments[0];
                    } else {
                        emailAddressArray.push(nextEmailAddress + splitEmailAddressFragments[0]);

                        for (var j = 1; j < splitEmailAddressFragmentCount - 1; j++) {
                            emailAddressArray.push(splitEmailAddressFragments[j]);
                        }
                        nextEmailAddress = splitEmailAddressFragments[splitEmailAddressFragmentCount - 1];
                    }
                } else {
                    nextEmailAddress += '"' + quotedFragments[i];
                    if (i < quotedFragmentCount - 1) {
                        nextEmailAddress += '"';
                    }
                }
            }

            emailAddressArray.push(nextEmailAddress);
            return emailAddressArray;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            file: {
                'default': 'Please choose a valid file'
            }
        }
    });

    FormValidation.Validator.file = {
        html5Attributes: {
            extension: 'extension',
            maxfiles: 'maxFiles',
            minfiles: 'minFiles',
            maxsize: 'maxSize',
            minsize: 'minSize',
            maxtotalsize: 'maxTotalSize',
            mintotalsize: 'minTotalSize',
            message: 'message',
            type: 'type'
        },

        /**
         * Validate upload file. Use HTML 5 API if the browser supports
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - extension: The allowed extensions, separated by a comma
         * - maxFiles: The maximum number of files
         * - minFiles: The minimum number of files
         * - maxSize: The maximum size in bytes
         * - minSize: The minimum size in bytes
         * - maxTotalSize: The maximum size in bytes for all files
         * - minTotalSize: The minimum size in bytes for all files
         * - message: The invalid message
         * - type: The allowed MIME type, separated by a comma
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'file');
            if (value === '') {
                return true;
            }

            var ext,
                extensions = options.extension ? options.extension.toLowerCase().split(',') : null,
                types      = options.type      ? options.type.toLowerCase().split(',')      : null,
                html5      = (window.File && window.FileList && window.FileReader);

            if (html5) {
                // Get FileList instance
                var files     = $field.get(0).files,
                    total     = files.length,
                    totalSize = 0;

                if ((options.maxFiles && total > parseInt(options.maxFiles, 10))        // Check the maxFiles
                    || (options.minFiles && total < parseInt(options.minFiles, 10)))    // Check the minFiles
                {
                    return false;
                }

                for (var i = 0; i < total; i++) {
                    totalSize += files[i].size;
                    ext        = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);

                    if ((options.minSize && files[i].size < parseInt(options.minSize, 10))                      // Check the minSize
                        || (options.maxSize && files[i].size > parseInt(options.maxSize, 10))                   // Check the maxSize
                        || (extensions && $.inArray(ext.toLowerCase(), extensions) === -1)                      // Check file extension
                        || (files[i].type && types && $.inArray(files[i].type.toLowerCase(), types) === -1))    // Check file type
                    {
                        return false;
                    }
                }

                if ((options.maxTotalSize && totalSize > parseInt(options.maxTotalSize, 10))        // Check the maxTotalSize
                    || (options.minTotalSize && totalSize < parseInt(options.minTotalSize, 10)))    // Check the minTotalSize
                {
                    return false;
                }
            } else {
                // Check file extension
                ext = value.substr(value.lastIndexOf('.') + 1);
                if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {
                    return false;
                }
            }

            return true;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            greaterThan: {
                'default': 'Please enter a value greater than or equal to %s',
                notInclusive: 'Please enter a value greater than %s'
            }
        }
    });

    FormValidation.Validator.greaterThan = {
        html5Attributes: {
            message: 'message',
            value: 'value',
            inclusive: 'inclusive'
        },

        enableByHtml5: function($field) {
            var type = $field.attr('type'),
                min  = $field.attr('min');
            if (min && type !== 'date') {
                return {
                    value: min
                };
            }

            return false;
        },

        /**
         * Return true if the input value is greater than or equals to given number
         *
         * @param {FormValidation.Base} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - value: Define the number to compare with. It can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - inclusive [optional]: Can be true or false. Default is true
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'greaterThan');
            if (value === '') {
                return true;
            }
            
            value = this._format(value);
            if (!$.isNumeric(value)) {
                return false;
            }

            var locale         = validator.getLocale(),
                compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),
                compareToValue = this._format(compareTo);

            value = parseFloat(value);
			return (options.inclusive === true || options.inclusive === undefined)
                    ? {
                        valid: value >= compareToValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].greaterThan['default'], compareTo)
                    }
                    : {
                        valid: value > compareToValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].greaterThan.notInclusive, compareTo)
                    };
        },

        _format: function(value) {
            return (value + '').replace(',', '.');
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            grid: {
                'default': 'Please enter a valid GRId number'
            }
        }
    });

    FormValidation.Validator.grid = {
        /**
         * Validate GRId (Global Release Identifier)
         * Examples:
         * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M
         * - Invalid: A1-2425G-ABC1234002-Q
         *
         * @see http://en.wikipedia.org/wiki/Global_Release_Identifier
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'grid');
            if (value === '') {
                return true;
            }

            value = value.toUpperCase();
            if (!/^[GRID:]*([0-9A-Z]{2})[-\s]*([0-9A-Z]{5})[-\s]*([0-9A-Z]{10})[-\s]*([0-9A-Z]{1})$/g.test(value)) {
                return false;
            }
            value = value.replace(/\s/g, '').replace(/-/g, '');
            if ('GRID:' === value.substr(0, 5)) {
                value = value.substr(5);
            }
            return FormValidation.Helper.mod37And36(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            hex: {
                'default': 'Please enter a valid hexadecimal number'
            }
        }
    });

    FormValidation.Validator.hex = {
        /**
         * Return true if and only if the input value is a valid hexadecimal number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'hex');
            if (value === '') {
                return true;
            }

            return /^[0-9a-fA-F]+$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            iban: {
                'default': 'Please enter a valid IBAN number',
                country: 'Please enter a valid IBAN number in %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'United Arab Emirates',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia and Herzegovina',
                    BE: 'Belgium',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CI: 'Ivory Coast',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    DO: 'Dominican Republic',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FO: 'Faroe Islands',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Greece',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Hungary',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Italy',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PK: 'Pakistan',
                    PL: 'Poland',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turkey',
                    VG: 'Virgin Islands, British'
                }
            }
        }
    });

    FormValidation.Validator.iban = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf
        // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country
        REGEX: {
            AD: 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                       // Andorra
            AE: 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                  // United Arab Emirates
            AL: 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                               // Albania
            AO: 'AO[0-9]{2}[0-9]{21}',                                          // Angola
            AT: 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Austria
            AZ: 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                               // Azerbaijan
            BA: 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                   // Bosnia and Herzegovina
            BE: 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                           // Belgium
            BF: 'BF[0-9]{2}[0-9]{23}',                                          // Burkina Faso
            BG: 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',                // Bulgaria
            BH: 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                               // Bahrain
            BI: 'BI[0-9]{2}[0-9]{12}',                                          // Burundi
            BJ: 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Benin
            BR: 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',             // Brazil
            CH: 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Switzerland
            CI: 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Ivory Coast
            CM: 'CM[0-9]{2}[0-9]{23}',                                          // Cameroon
            CR: 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                  // Costa Rica
            CV: 'CV[0-9]{2}[0-9]{21}',                                          // Cape Verde
            CY: 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                       // Cyprus
            CZ: 'CZ[0-9]{2}[0-9]{20}',                                          // Czech Republic
            DE: 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                  // Germany
            DK: 'DK[0-9]{2}[0-9]{14}',                                          // Denmark
            DO: 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                               // Dominican Republic
            DZ: 'DZ[0-9]{2}[0-9]{20}',                                          // Algeria
            EE: 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                  // Estonia
            ES: 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',          // Spain
            FI: 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                           // Finland
            FO: 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Faroe Islands
            FR: 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // France
            GB: 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // United Kingdom
            GE: 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                  // Georgia
            GI: 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                               // Gibraltar
            GL: 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Greenland
            GR: 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                       // Greece
            GT: 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                            // Guatemala
            HR: 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                  // Croatia
            HU: 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',          // Hungary
            IE: 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // Ireland
            IL: 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                          // Israel
            IR: 'IR[0-9]{2}[0-9]{22}',                                          // Iran
            IS: 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                  // Iceland
            IT: 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // Italy
            JO: 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',                 // Jordan
            KW: 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                  // Kuwait
            KZ: 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Kazakhstan
            LB: 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                               // Lebanon
            LI: 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Liechtenstein
            LT: 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Lithuania
            LU: 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Luxembourg
            LV: 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                               // Latvia
            MC: 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // Monaco
            MD: 'MD[0-9]{2}[A-Z0-9]{20}',                                       // Moldova
            ME: 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Montenegro
            MG: 'MG[0-9]{2}[0-9]{23}',                                          // Madagascar
            MK: 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                       // Macedonia
            ML: 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Mali
            MR: 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                        // Mauritania
            MT: 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                       // Malta
            MU: 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',  // Mauritius
            MZ: 'MZ[0-9]{2}[0-9]{21}',                                          // Mozambique
            NL: 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                  // Netherlands
            NO: 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                           // Norway
            PK: 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Pakistan
            PL: 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                  // Poland
            PS: 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Palestinian
            PT: 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                  // Portugal
            QA: 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Qatar
            RO: 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Romania
            RS: 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Serbia
            SA: 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                               // Saudi Arabia
            SE: 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                          // Sweden
            SI: 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                           // Slovenia
            SK: 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                          // Slovakia
            SM: 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // San Marino
            SN: 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Senegal
            TN: 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Tunisia
            TR: 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                    // Turkey
            VG: 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                   // Virgin Islands, British
        },

        /**
         * Validate an International Bank Account Number (IBAN)
         * To test it, take the sample IBAN from
         * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * - country: The ISO 3166-1 country code. It can be
         *      - A country code
         *      - Name of field which its value defines the country code
         *      - Name of callback function that returns the country code
         *      - A callback function that returns the country code
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'iban');
            if (value === '') {
                return true;
            }

            value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();
            var country = options.country;
            if (!country) {
                country = value.substr(0, 2);
            } else if (typeof country !== 'string' || !this.REGEX[country]) {
                // Determine the country code
                country = validator.getDynamicOption($field, country);
            }

            var locale = validator.getLocale();
            if (!this.REGEX[country]) {
                return true;
            }

            if (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {
                return {
                    valid: false,
                    message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].iban.country, FormValidation.I18n[locale].iban.countries[country])
                };
            }

            value = value.substr(4) + value.substr(0, 4);
            value = $.map(value.split(''), function(n) {
                var code = n.charCodeAt(0);
                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))
                        // Replace A, B, C, ..., Z with 10, 11, ..., 35
                        ? (code - 'A'.charCodeAt(0) + 10)
                        : n;
            });
            value = value.join('');

            var temp   = parseInt(value.substr(0, 1), 10),
                length = value.length;
            for (var i = 1; i < length; ++i) {
                temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;
            }

            return {
                valid: (temp === 1),
                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].iban.country, FormValidation.I18n[locale].iban.countries[country])
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            id: {
                'default': 'Please enter a valid identification number',
                country: 'Please enter a valid identification number in %s',
                countries: {
                    BA: 'Bosnia and Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'South Africa'
                }
            }
        }
    });

    FormValidation.Validator.id = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        // Supported country codes
        COUNTRY_CODES: [
            'BA', 'BG', 'BR', 'CH', 'CL', 'CN', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',
            'PL', 'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'TH', 'ZA'
        ],

        /**
         * Validate identification number in different countries
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The ISO 3166-1 country code. It can be
         *      - One of country code defined in COUNTRY_CODES
         *      - Name of field which its value defines the country code
         *      - Name of callback function that returns the country code
         *      - A callback function that returns the country code
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'id');
            if (value === '') {
                return true;
            }

            var locale  = validator.getLocale(),
                country = options.country;
            if (!country) {
                country = value.substr(0, 2);
            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {
                // Determine the country code
                country = validator.getDynamicOption($field, country);
            }

            if ($.inArray(country, this.COUNTRY_CODES) === -1) {
                return true;
            }

            var method  = ['_', country.toLowerCase()].join('');
            return this[method](value)
                    ? true
                    : {
                        valid: false,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].id.country, FormValidation.I18n[locale].id.countries[country.toUpperCase()])
                    };
        },

        /**
         * Validate Unique Master Citizen Number which uses in
         * - Bosnia and Herzegovina (country code: BA)
         * - Macedonia (MK)
         * - Montenegro (ME)
         * - Serbia (RS)
         * - Slovenia (SI)
         *
         * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number
         * @param {String} value The ID
         * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI
         * @returns {Boolean}
         */
        _validateJMBG: function(value, countryCode) {
            if (!/^\d{13}$/.test(value)) {
                return false;
            }
            var day   = parseInt(value.substr(0, 2), 10),
                month = parseInt(value.substr(2, 2), 10),
                year  = parseInt(value.substr(4, 3), 10),
                rr    = parseInt(value.substr(7, 2), 10),
                k     = parseInt(value.substr(12, 1), 10);

            // Validate date of birth
            // FIXME: Validate the year of birth
            if (day > 31 || month > 12) {
                return false;
            }

            // Validate checksum
            var sum = 0;
            for (var i = 0; i < 6; i++) {
                sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));
            }
            sum = 11 - sum % 11;
            if (sum === 10 || sum === 11) {
                sum = 0;
            }
            if (sum !== k) {
                return false;
            }

            // Validate political region
            // rr is the political region of birth, which can be in ranges:
            // 10-19: Bosnia and Herzegovina
            // 20-29: Montenegro
            // 30-39: Croatia (not used anymore)
            // 41-49: Macedonia
            // 50-59: Slovenia (only 50 is used)
            // 70-79: Central Serbia
            // 80-89: Serbian province of Vojvodina
            // 90-99: Kosovo
            switch (countryCode.toUpperCase()) {
                case 'BA':
                    return (10 <= rr && rr <= 19);
                case 'MK':
                    return (41 <= rr && rr <= 49);
                case 'ME':
                    return (20 <= rr && rr <= 29);
                case 'RS':
                    return (70 <= rr && rr <= 99);
                case 'SI':
                    return (50 <= rr && rr <= 59);
                default:
                    return true;
            }
        },

        _ba: function(value) {
            return this._validateJMBG(value, 'BA');
        },
        _mk: function(value) {
            return this._validateJMBG(value, 'MK');
        },
        _me: function(value) {
            return this._validateJMBG(value, 'ME');
        },
        _rs: function(value) {
            return this._validateJMBG(value, 'RS');
        },

        /**
         * Examples: 0101006500006
         */
        _si: function(value) {
            return this._validateJMBG(value, 'SI');
        },

        /**
         * Validate Bulgarian national identification number (EGN)
         * Examples:
         * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030
         * - Invalid: 8019010008
         *
         * @see http://en.wikipedia.org/wiki/Uniform_civil_number
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _bg: function(value) {
            if (!/^\d{10}$/.test(value) && !/^\d{6}\s\d{3}\s\d{1}$/.test(value)) {
                return false;
            }
            value = value.replace(/\s/g, '');
            // Check the birth date
            var year  = parseInt(value.substr(0, 2), 10) + 1900,
                month = parseInt(value.substr(2, 2), 10),
                day   = parseInt(value.substr(4, 2), 10);
            if (month > 40) {
                year += 100;
                month -= 40;
            } else if (month > 20) {
                year -= 100;
                month -= 20;
            }

            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }

            var sum    = 0,
                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];
            for (var i = 0; i < 9; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = (sum % 11) % 10;
            return (sum + '' === value.substr(9, 1));
        },

        /**
         * Validate Brazilian national identification number (CPF)
         * Examples:
         * - Valid: 39053344705, 390.533.447-05, 111.444.777-35
         * - Invalid: 231.002.999-00
         *
         * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _br: function(value) {
            value = value.replace(/\D/g, '');

            if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {
                return false;
            }

            var d1 = 0;
            for (var i = 0; i < 9; i++) {
                d1 += (10 - i) * parseInt(value.charAt(i), 10);
            }
            d1 = 11 - d1 % 11;
            if (d1 === 10 || d1 === 11) {
                d1 = 0;
            }
            if (d1 + '' !== value.charAt(9)) {
                return false;
            }

            var d2 = 0;
            for (i = 0; i < 10; i++) {
                d2 += (11 - i) * parseInt(value.charAt(i), 10);
            }
            d2 = 11 - d2 % 11;
            if (d2 === 10 || d2 === 11) {
                d2 = 0;
            }

            return (d2 + '' === value.charAt(10));
        },

        /**
         * Validate Swiss Social Security Number (AHV-Nr/No AVS)
         * Examples:
         * - Valid: 756.1234.5678.95, 7561234567895
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland
         * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _ch: function(value) {
            if (!/^756[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{2}$/.test(value)) {
                return false;
            }
            value = value.replace(/\D/g, '').substr(3);
            var length = value.length,
                sum    = 0,
                weight = (length === 8) ? [3, 1] : [1, 3];
            for (var i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i % 2];
            }
            sum = 10 - sum % 10;
            return (sum + '' === value.charAt(length - 1));
        },

        /**
         * Validate Chilean national identification number (RUN/RUT)
         * Examples:
         * - Valid: 76086428-5, 22060449-7, 12531909-2
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#Chile
         * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _cl: function(value) {
            if (!/^\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {
                return false;
            }
            value = value.replace(/\-/g, '');
            while (value.length < 9) {
                value = '0' + value;
            }
            var sum    = 0,
                weight = [3, 2, 7, 6, 5, 4, 3, 2];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = 11 - sum % 11;
            if (sum === 11) {
                sum = 0;
            } else if (sum === 10) {
                sum = 'K';
            }
            return sum + '' === value.charAt(8).toUpperCase();
        },

        /**
         * Validate Chinese citizen identification number
         *
         * Rules:
         * - For current 18-digit system (since 1st Oct 1999, defined by GB11643—1999 national standard):
         *     - Digit 0-5: Must be a valid administrative division code of China PR.
         *     - Digit 6-13: Must be a valid YYYYMMDD date of birth. A future date is tolerated.
         *     - Digit 14-16: Order code, any integer.
         *     - Digit 17: An ISO 7064:1983, MOD 11-2 checksum.
         *       Both upper/lower case of X are tolerated.
         * - For deprecated 15-digit system:
         *     - Digit 0-5: Must be a valid administrative division code of China PR.
         *     - Digit 6-11: Must be a valid YYMMDD date of birth, indicating the year of 19XX.
         *     - Digit 12-14: Order code, any integer.
         * Lists of valid administrative division codes of China PR can be seen here:
         * <http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/>
         * Published and maintained by National Bureau of Statistics of China PR.
         * NOTE: Current and deprecated codes MUST BOTH be considered valid.
         * Many Chinese citizens born in once existed administrative divisions!
         *
         * @see http://en.wikipedia.org/wiki/Resident_Identity_Card#Identity_card_number
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _cn: function(value) {
            // Basic format check (18 or 15 digits, considering X in checksum)
            value = value.trim();
            if (!/^\d{15}$/.test(value) && !/^\d{17}[\dXx]{1}$/.test(value)) {
                return false;
            }
            
            // Check China PR Administrative division code
            var adminDivisionCodes = {
                11: {
                    0: [0],
                    1: [[0, 9], [11, 17]],
                    2: [0, 28, 29]
                },
                12: {
                    0: [0],
                    1: [[0, 16]],
                    2: [0, 21, 23, 25]
                },
                13: {
                    0: [0],
                    1: [[0, 5], 7, 8, 21, [23, 33], [81, 85]],
                    2: [[0, 5], [7, 9], [23, 25], 27, 29, 30, 81, 83],
                    3: [[0, 4], [21, 24]],
                    4: [[0, 4], 6, 21, [23, 35], 81],
                    5: [[0, 3], [21, 35], 81, 82],
                    6: [[0, 4], [21, 38], [81, 84]],
                    7: [[0, 3], 5, 6, [21, 33]],
                    8: [[0, 4], [21, 28]],
                    9: [[0, 3], [21, 30], [81, 84]],
                    10: [[0, 3], [22, 26], 28, 81, 82],
                    11: [[0, 2], [21, 28], 81, 82]
                },
                14: {
                    0: [0],
                    1: [0, 1, [5, 10], [21, 23], 81],
                    2: [[0, 3], 11, 12, [21, 27]],
                    3: [[0, 3], 11, 21, 22],
                    4: [[0, 2], 11, 21, [23, 31], 81],
                    5: [[0, 2], 21, 22, 24, 25, 81],
                    6: [[0, 3], [21, 24]],
                    7: [[0, 2], [21, 29], 81],
                    8: [[0, 2], [21, 30], 81, 82],
                    9: [[0, 2], [21, 32], 81],
                    10: [[0, 2], [21, 34], 81, 82],
                    11: [[0, 2], [21, 30], 81, 82],
                    23: [[0, 3], 22, 23, [25, 30], 32, 33]
                },
                15: {
                    0: [0],
                    1: [[0, 5], [21, 25]],
                    2: [[0, 7], [21, 23]],
                    3: [[0, 4]],
                    4: [[0, 4], [21, 26], [28, 30]],
                    5: [[0, 2], [21, 26], 81],
                    6: [[0, 2], [21, 27]],
                    7: [[0, 3], [21, 27], [81, 85]],
                    8: [[0, 2], [21, 26]],
                    9: [[0, 2], [21, 29], 81],
                    22: [[0, 2], [21, 24]],
                    25: [[0, 2], [22, 31]],
                    26: [[0, 2], [24, 27], [29, 32], 34],
                    28: [0, 1, [22, 27]],
                    29: [0, [21, 23]]
                },
                21: {
                    0: [0],
                    1: [[0, 6], [11, 14], [22, 24], 81],
                    2: [[0, 4], [11, 13], 24, [81, 83]],
                    3: [[0, 4], 11, 21, 23, 81],
                    4: [[0, 4], 11, [21, 23]],
                    5: [[0, 5], 21, 22],
                    6: [[0, 4], 24, 81, 82],
                    7: [[0, 3], 11, 26, 27, 81, 82],
                    8: [[0, 4], 11, 81, 82],
                    9: [[0, 5], 11, 21, 22],
                    10: [[0, 5], 11, 21, 81],
                    11: [[0, 3], 21, 22],
                    12: [[0, 2], 4, 21, 23, 24, 81, 82],
                    13: [[0, 3], 21, 22, 24, 81, 82],
                    14: [[0, 4], 21, 22, 81]
                },
                22: {
                    0: [0],
                    1: [[0, 6], 12, 22, [81, 83]],
                    2: [[0, 4], 11, 21, [81, 84]],
                    3: [[0, 3], 22, 23, 81, 82],
                    4: [[0, 3], 21, 22],
                    5: [[0, 3], 21, 23, 24, 81, 82],
                    6: [[0, 2], 4, 5, [21, 23], 25, 81],
                    7: [[0, 2], [21, 24], 81],
                    8: [[0, 2], 21, 22, 81, 82],
                    24: [[0, 6], 24, 26]
                },
                23: {
                    0: [0],
                    1: [[0, 12], 21, [23, 29], [81, 84]],
                    2: [[0, 8], 21, [23, 25], 27, [29, 31], 81],
                    3: [[0, 7], 21, 81, 82],
                    4: [[0, 7], 21, 22],
                    5: [[0, 3], 5, 6, [21, 24]],
                    6: [[0, 6], [21, 24]],
                    7: [[0, 16], 22, 81],
                    8: [[0, 5], 11, 22, 26, 28, 33, 81, 82],
                    9: [[0, 4], 21],
                    10: [[0, 5], 24, 25, 81, [83, 85]],
                    11: [[0, 2], 21, 23, 24, 81, 82],
                    12: [[0, 2], [21, 26], [81, 83]],
                    27: [[0, 4], [21, 23]]
                },
                31: {
                    0: [0],
                    1: [0, 1, [3, 10], [12, 20]],
                    2: [0, 30]
                },
                32: {
                    0: [0],
                    1: [[0, 7], 11, [13, 18], 24, 25],
                    2: [[0, 6], 11, 81, 82],
                    3: [[0, 5], 11, 12, [21, 24], 81, 82],
                    4: [[0, 2], 4, 5, 11, 12, 81, 82],
                    5: [[0, 9], [81, 85]],
                    6: [[0, 2], 11, 12, 21, 23, [81, 84]],
                    7: [0, 1, 3, 5, 6, [21, 24]],
                    8: [[0, 4], 11, 26, [29, 31]],
                    9: [[0, 3], [21, 25], 28, 81, 82],
                    10: [[0, 3], 11, 12, 23, 81, 84, 88],
                    11: [[0, 2], 11, 12, [81, 83]],
                    12: [[0, 4], [81, 84]],
                    13: [[0, 2], 11, [21, 24]]
                },
                33: {
                    0: [0],
                    1: [[0, 6], [8, 10], 22, 27, 82, 83, 85],
                    2: [0, 1, [3, 6], 11, 12, 25, 26, [81, 83]],
                    3: [[0, 4], 22, 24, [26, 29], 81, 82],
                    4: [[0, 2], 11, 21, 24, [81, 83]],
                    5: [[0, 3], [21, 23]],
                    6: [[0, 2], 21, 24, [81, 83]],
                    7: [[0, 3], 23, 26, 27, [81, 84]],
                    8: [[0, 3], 22, 24, 25, 81],
                    9: [[0, 3], 21, 22],
                    10: [[0, 4], [21, 24], 81, 82],
                    11: [[0, 2], [21, 27], 81]
                },
                34: {
                    0: [0],
                    1: [[0, 4], 11, [21, 24], 81],
                    2: [[0, 4], 7, 8, [21, 23], 25],
                    3: [[0, 4], 11, [21, 23]],
                    4: [[0, 6], 21],
                    5: [[0, 4], 6, [21, 23]],
                    6: [[0, 4], 21],
                    7: [[0, 3], 11, 21],
                    8: [[0, 3], 11, [22, 28], 81],
                    10: [[0, 4], [21, 24]],
                    11: [[0, 3], 22, [24, 26], 81, 82],
                    12: [[0, 4], 21, 22, 25, 26, 82],
                    13: [[0, 2], [21, 24]],
                    14: [[0, 2], [21, 24]],
                    15: [[0, 3], [21, 25]],
                    16: [[0, 2], [21, 23]],
                    17: [[0, 2], [21, 23]],
                    18: [[0, 2], [21, 25], 81]
                },
                35: {
                    0: [0],
                    1: [[0, 5], 11, [21, 25], 28, 81, 82],
                    2: [[0, 6], [11, 13]],
                    3: [[0, 5], 22],
                    4: [[0, 3], 21, [23, 30], 81],
                    5: [[0, 5], 21, [24, 27], [81, 83]],
                    6: [[0, 3], [22, 29], 81],
                    7: [[0, 2], [21, 25], [81, 84]],
                    8: [[0, 2], [21, 25], 81],
                    9: [[0, 2], [21, 26], 81, 82]
                },
                36: {
                    0: [0],
                    1: [[0, 5], 11, [21, 24]],
                    2: [[0, 3], 22, 81],
                    3: [[0, 2], 13, [21, 23]],
                    4: [[0, 3], 21, [23, 30], 81, 82],
                    5: [[0, 2], 21],
                    6: [[0, 2], 22, 81],
                    7: [[0, 2], [21, 35], 81, 82],
                    8: [[0, 3], [21, 30], 81],
                    9: [[0, 2], [21, 26], [81, 83]],
                    10: [[0, 2], [21, 30]],
                    11: [[0, 2], [21, 30], 81]
                },
                37: {
                    0: [0],
                    1: [[0, 5], 12, 13, [24, 26], 81],
                    2: [[0, 3], 5, [11, 14], [81, 85]],
                    3: [[0, 6], [21, 23]],
                    4: [[0, 6], 81],
                    5: [[0, 3], [21, 23]],
                    6: [[0, 2], [11, 13], 34, [81, 87]],
                    7: [[0, 5], 24, 25, [81, 86]],
                    8: [[0, 2], 11, [26, 32], [81, 83]],
                    9: [[0, 3], 11, 21, 23, 82, 83],
                    10: [[0, 2], [81, 83]],
                    11: [[0, 3], 21, 22],
                    12: [[0, 3]],
                    13: [[0, 2], 11, 12, [21, 29]],
                    14: [[0, 2], [21, 28], 81, 82],
                    15: [[0, 2], [21, 26], 81],
                    16: [[0, 2], [21, 26]],
                    17: [[0, 2], [21, 28]]
                },
                41: {
                    0: [0],
                    1: [[0, 6], 8, 22, [81, 85]],
                    2: [[0, 5], 11, [21, 25]],
                    3: [[0, 7], 11, [22, 29], 81],
                    4: [[0, 4], 11, [21, 23], 25, 81, 82],
                    5: [[0, 3], 5, 6, 22, 23, 26, 27, 81],
                    6: [[0, 3], 11, 21, 22],
                    7: [[0, 4], 11, 21, [24, 28], 81, 82],
                    8: [[0, 4], 11, [21, 23], 25, [81, 83]],
                    9: [[0, 2], 22, 23, [26, 28]],
                    10: [[0, 2], [23, 25], 81, 82],
                    11: [[0, 4], [21, 23]],
                    12: [[0, 2], 21, 22, 24, 81, 82],
                    13: [[0, 3], [21, 30], 81],
                    14: [[0, 3], [21, 26], 81],
                    15: [[0, 3], [21, 28]],
                    16: [[0, 2], [21, 28], 81],
                    17: [[0, 2], [21, 29]],
                    90: [0, 1]
                },
                42: {
                    0: [0],
                    1: [[0, 7], [11, 17]],
                    2: [[0, 5], 22, 81],
                    3: [[0, 3], [21, 25], 81],
                    5: [[0, 6], [25, 29], [81, 83]],
                    6: [[0, 2], 6, 7, [24, 26], [82, 84]],
                    7: [[0, 4]],
                    8: [[0, 2], 4, 21, 22, 81],
                    9: [[0, 2], [21, 23], 81, 82, 84],
                    10: [[0, 3], [22, 24], 81, 83, 87],
                    11: [[0, 2], [21, 27], 81, 82],
                    12: [[0, 2], [21, 24], 81],
                    13: [[0, 3], 21, 81],
                    28: [[0, 2], 22, 23, [25, 28]],
                    90: [0, [4, 6], 21]
                },
                43: {
                    0: [0],
                    1: [[0, 5], 11, 12, 21, 22, 24, 81],
                    2: [[0, 4], 11, 21, [23, 25], 81],
                    3: [[0, 2], 4, 21, 81, 82],
                    4: [0, 1, [5, 8], 12, [21, 24], 26, 81, 82],
                    5: [[0, 3], 11, [21, 25], [27, 29], 81],
                    6: [[0, 3], 11, 21, 23, 24, 26, 81, 82],
                    7: [[0, 3], [21, 26], 81],
                    8: [[0, 2], 11, 21, 22],
                    9: [[0, 3], [21, 23], 81],
                    10: [[0, 3], [21, 28], 81],
                    11: [[0, 3], [21, 29]],
                    12: [[0, 2], [21, 30], 81],
                    13: [[0, 2], 21, 22, 81, 82],
                    31: [0, 1, [22, 27], 30]
                },
                44: {
                    0: [0],
                    1: [[0, 7], [11, 16], 83, 84],
                    2: [[0, 5], 21, 22, 24, 29, 32, 33, 81, 82],
                    3: [0, 1, [3, 8]],
                    4: [[0, 4]],
                    5: [0, 1, [6, 15], 23, 82, 83],
                    6: [0, 1, [4, 8]],
                    7: [0, 1, [3, 5], 81, [83, 85]],
                    8: [[0, 4], 11, 23, 25, [81, 83]],
                    9: [[0, 3], 23, [81, 83]],
                    12: [[0, 3], [23, 26], 83, 84],
                    13: [[0, 3], [22, 24], 81],
                    14: [[0, 2], [21, 24], 26, 27, 81],
                    15: [[0, 2], 21, 23, 81],
                    16: [[0, 2], [21, 25]],
                    17: [[0, 2], 21, 23, 81],
                    18: [[0, 3], 21, 23, [25, 27], 81, 82],
                    19: [0],
                    20: [0],
                    51: [[0, 3], 21, 22],
                    52: [[0, 3], 21, 22, 24, 81],
                    53: [[0, 2], [21, 23], 81]
                },
                45: {
                    0: [0],
                    1: [[0, 9], [21, 27]],
                    2: [[0, 5], [21, 26]],
                    3: [[0, 5], 11, 12, [21, 32]],
                    4: [0, 1, [3, 6], 11, [21, 23], 81],
                    5: [[0, 3], 12, 21],
                    6: [[0, 3], 21, 81],
                    7: [[0, 3], 21, 22],
                    8: [[0, 4], 21, 81],
                    9: [[0, 3], [21, 24], 81],
                    10: [[0, 2], [21, 31]],
                    11: [[0, 2], [21, 23]],
                    12: [[0, 2], [21, 29], 81],
                    13: [[0, 2], [21, 24], 81],
                    14: [[0, 2], [21, 25], 81]
                },
                46: {
                    0: [0],
                    1: [0, 1, [5, 8]],
                    2: [0, 1],
                    3: [0, [21, 23]],
                    90: [[0, 3], [5, 7], [21, 39]]
                },
                50: {
                    0: [0],
                    1: [[0, 19]],
                    2: [0, [22, 38], [40, 43]],
                    3: [0, [81, 84]]
                },
                51: {
                    0: [0],
                    1: [0, 1, [4, 8], [12, 15], [21, 24], 29, 31, 32, [81, 84]],
                    3: [[0, 4], 11, 21, 22],
                    4: [[0, 3], 11, 21, 22],
                    5: [[0, 4], 21, 22, 24, 25],
                    6: [0, 1, 3, 23, 26, [81, 83]],
                    7: [0, 1, 3, 4, [22, 27], 81],
                    8: [[0, 2], 11, 12, [21, 24]],
                    9: [[0, 4], [21, 23]],
                    10: [[0, 2], 11, 24, 25, 28],
                    11: [[0, 2], [11, 13], 23, 24, 26, 29, 32, 33, 81],
                    13: [[0, 4], [21, 25], 81],
                    14: [[0, 2], [21, 25]],
                    15: [[0, 3], [21, 29]],
                    16: [[0, 3], [21, 23], 81],
                    17: [[0, 3], [21, 25], 81],
                    18: [[0, 3], [21, 27]],
                    19: [[0, 3], [21, 23]],
                    20: [[0, 2], 21, 22, 81],
                    32: [0, [21, 33]],
                    33: [0, [21, 38]],
                    34: [0, 1, [22, 37]]
                },
                52: {
                    0: [0],
                    1: [[0, 3], [11, 15], [21, 23], 81],
                    2: [0, 1, 3, 21, 22],
                    3: [[0, 3], [21, 30], 81, 82],
                    4: [[0, 2], [21, 25]],
                    5: [[0, 2], [21, 27]],
                    6: [[0, 3], [21, 28]],
                    22: [0, 1, [22, 30]],
                    23: [0, 1, [22, 28]],
                    24: [0, 1, [22, 28]],
                    26: [0, 1, [22, 36]],
                    27: [[0, 2], 22, 23, [25, 32]]
                },
                53: {
                    0: [0],
                    1: [[0, 3], [11, 14], 21, 22, [24, 29], 81],
                    3: [[0, 2], [21, 26], 28, 81],
                    4: [[0, 2], [21, 28]],
                    5: [[0, 2], [21, 24]],
                    6: [[0, 2], [21, 30]],
                    7: [[0, 2], [21, 24]],
                    8: [[0, 2], [21, 29]],
                    9: [[0, 2], [21, 27]],
                    23: [0, 1, [22, 29], 31],
                    25: [[0, 4], [22, 32]],
                    26: [0, 1, [21, 28]],
                    27: [0, 1, [22, 30]], 28: [0, 1, 22, 23],
                    29: [0, 1, [22, 32]],
                    31: [0, 2, 3, [22, 24]],
                    34: [0, [21, 23]],
                    33: [0, 21, [23, 25]],
                    35: [0, [21, 28]]
                },
                54: {
                    0: [0],
                    1: [[0, 2], [21, 27]],
                    21: [0, [21, 29], 32, 33],
                    22: [0, [21, 29], [31, 33]],
                    23: [0, 1, [22, 38]],
                    24: [0, [21, 31]],
                    25: [0, [21, 27]],
                    26: [0, [21, 27]]
                },
                61: {
                    0: [0],
                    1: [[0, 4], [11, 16], 22, [24, 26]],
                    2: [[0, 4], 22],
                    3: [[0, 4], [21, 24], [26, 31]],
                    4: [[0, 4], [22, 31], 81],
                    5: [[0, 2], [21, 28], 81, 82],
                    6: [[0, 2], [21, 32]],
                    7: [[0, 2], [21, 30]],
                    8: [[0, 2], [21, 31]],
                    9: [[0, 2], [21, 29]],
                    10: [[0, 2], [21, 26]]
                },
                62: {
                    0: [0],
                    1: [[0, 5], 11, [21, 23]],
                    2: [0, 1],
                    3: [[0, 2], 21],
                    4: [[0, 3], [21, 23]],
                    5: [[0, 3], [21, 25]],
                    6: [[0, 2], [21, 23]],
                    7: [[0, 2], [21, 25]],
                    8: [[0, 2], [21, 26]],
                    9: [[0, 2], [21, 24], 81, 82],
                    10: [[0, 2], [21, 27]],
                    11: [[0, 2], [21, 26]],
                    12: [[0, 2], [21, 28]],
                    24: [0, 21, [24, 29]],
                    26: [0, 21, [23, 30]],
                    29: [0, 1, [21, 27]],
                    30: [0, 1, [21, 27]]
                },
                63: {
                    0: [0],
                    1: [[0, 5], [21, 23]],
                    2: [0, 2, [21, 25]],
                    21: [0, [21, 23], [26, 28]],
                    22: [0, [21, 24]],
                    23: [0, [21, 24]],
                    25: [0, [21, 25]],
                    26: [0, [21, 26]],
                    27: [0, 1, [21, 26]],
                    28: [[0, 2], [21, 23]]
                },
                64: {
                    0: [0],
                    1: [0, 1, [4, 6], 21, 22, 81],
                    2: [[0, 3], 5, [21, 23]],
                    3: [[0, 3], [21, 24], 81],
                    4: [[0, 2], [21, 25]],
                    5: [[0, 2], 21, 22]
                },
                65: {
                    0: [0],
                    1: [[0, 9], 21],
                    2: [[0, 5]],
                    21: [0, 1, 22, 23],
                    22: [0, 1, 22, 23],
                    23: [[0, 3], [23, 25], 27, 28],
                    28: [0, 1, [22, 29]],
                    29: [0, 1, [22, 29]],
                    30: [0, 1, [22, 24]], 31: [0, 1, [21, 31]],
                    32: [0, 1, [21, 27]],
                    40: [0, 2, 3, [21, 28]],
                    42: [[0, 2], 21, [23, 26]],
                    43: [0, 1, [21, 26]],
                    90: [[0, 4]], 27: [[0, 2], 22, 23]
                },
                71: { 0: [0] },
                81: { 0: [0] },
                82: { 0: [0] }
            };
            
            var provincial  = parseInt(value.substr(0, 2), 10),
                prefectural = parseInt(value.substr(2, 2), 10),
                county      = parseInt(value.substr(4, 2), 10);
            
            if (!adminDivisionCodes[provincial] || !adminDivisionCodes[provincial][prefectural]) {
                return false;
            }
            var inRange  = false,
                rangeDef = adminDivisionCodes[provincial][prefectural];
            for (var i = 0; i < rangeDef.length; i++) {
                if (($.isArray(rangeDef[i]) && rangeDef[i][0] <= county && county <= rangeDef[i][1])
                    || (!$.isArray(rangeDef[i]) && county === rangeDef[i]))
                {
                    inRange = true;
                    break;
                }
            }

            if (!inRange) {
                return false;
            }
            
            // Check date of birth
            var dob;
            if (value.length === 18) {
                dob = value.substr(6, 8);
            } else /* length == 15 */ { 
                dob = '19' + value.substr(6, 6);
            }
            var year  = parseInt(dob.substr(0, 4), 10),
                month = parseInt(dob.substr(4, 2), 10),
                day   = parseInt(dob.substr(6, 2), 10);
            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }
            
            // Check checksum (18-digit system only)
            if (value.length === 18) {
                var sum    = 0,
                    weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
                for (i = 0; i < 17; i++) {
                    sum += parseInt(value.charAt(i), 10) * weight[i];
                }
                sum = (12 - (sum % 11)) % 11;
                var checksum = (value.charAt(17).toUpperCase() !== 'X') ? parseInt(value.charAt(17), 10) : 10;
                return checksum === sum;
            }
            
            return true;
        },
        
        /**
         * Validate Czech national identification number (RC)
         * Examples:
         * - Valid: 7103192745, 991231123
         * - Invalid: 1103492745, 590312123
         *
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _cz: function(value) {
            if (!/^\d{9,10}$/.test(value)) {
                return false;
            }
            var year  = 1900 + parseInt(value.substr(0, 2), 10),
                month = parseInt(value.substr(2, 2), 10) % 50 % 20,
                day   = parseInt(value.substr(4, 2), 10);
            if (value.length === 9) {
                if (year >= 1980) {
                    year -= 100;
                }
                if (year > 1953) {
                    return false;
                }
            } else if (year < 1954) {
                year += 100;
            }

            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }

            // Check that the birth date is not in the future
            if (value.length === 10) {
                var check = parseInt(value.substr(0, 9), 10) % 11;
                if (year < 1985) {
                    check = check % 10;
                }
                return (check + '' === value.substr(9, 1));
            }

            return true;
        },

        /**
         * Validate Danish Personal Identification number (CPR)
         * Examples:
         * - Valid: 2110625629, 211062-5629
         * - Invalid: 511062-5629
         *
         * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _dk: function(value) {
            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {
                return false;
            }
            value = value.replace(/-/g, '');
            var day   = parseInt(value.substr(0, 2), 10),
                month = parseInt(value.substr(2, 2), 10),
                year  = parseInt(value.substr(4, 2), 10);

            switch (true) {
                case ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):
                    year += 1800;
                    break;
                case ('0123'.indexOf(value.charAt(6)) !== -1):
                case ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):
                    year += 1900;
                    break;
                default:
                    year += 2000;
                    break;
            }

            return FormValidation.Helper.date(year, month, day);
        },

        /**
         * Validate Estonian Personal Identification Code (isikukood)
         * Examples:
         * - Valid: 37605030299
         *
         * @see http://et.wikipedia.org/wiki/Isikukood
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _ee: function(value) {
            // Use the same format as Lithuanian Personal Code
            return this._lt(value);
        },

        /**
         * Validate Spanish personal identity code (DNI)
         * Support i) DNI (for Spanish citizens), ii) NIE (for foreign people)
         * and iii) CIF (for legal entities)
         *
         * Examples:
         * - Valid:
         *      i) 54362315K, 54362315-K
         *      ii) X2482300W, X-2482300W, X-2482300-W
         *      iii) A58818501, A-58818501
         * - Invalid:
         *      i) 54362315Z
         *      ii) X-2482300A
         *      iii) K58818501, G58818507
         *
         * @see https://en.wikipedia.org/wiki/National_identification_number#Spain
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _es: function(value) {
            var isDNI = /^[0-9]{8}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value),
                isNIE = /^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(value),
                isCIF = /^[A-HNPQS][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-J]$/.test(value);
            if (!isDNI && !isNIE && !isCIF) {
                return false;
            }

            value = value.replace(/-/g, '');
            var check;
            if (isDNI || isNIE) {
                var index = 'XYZ'.indexOf(value.charAt(0));
                if (index !== -1) {
                    // It is NIE number
                    value = index + value.substr(1) + '';
                }

                check = parseInt(value.substr(0, 8), 10);
                check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];
                return (check === value.substr(8, 1));
            } else {
                check = value.substr(1, 7);
                var letter  = value[0],
                    control = value.substr(-1),
                    sum     = 0;

                // The digits in the even positions are added to the sum directly.
                // The ones in the odd positions are multiplied by 2 and then added to the sum.
                // If the result of multiplying by 2 is 10 or higher, add the two digits
                // together and add that to the sum instead
                for (var i = 0; i < check.length; i++) {
                    if (i % 2 !== 0) {
                        sum += parseInt(check[i], 10);
                    } else {
                        var tmp = '' + (parseInt(check[i], 10) * 2);
                        sum += parseInt(tmp[0], 10);
                        if (tmp.length === 2) {
                            sum += parseInt(tmp[1], 10);
                        }
                    }
                }

                // The control digit is calculated from the last digit of the sum.
                // If that last digit is not 0, subtract it from 10
                var lastDigit = sum - (Math.floor(sum / 10) * 10);
                if (lastDigit !== 0) {
                    lastDigit = 10 - lastDigit;
                }
                
                if ('KQS'.indexOf(letter) !== -1) {
                    // If the CIF starts with a K, Q or S, the control digit must be a letter
                    return (control === 'JABCDEFGHI'[lastDigit]);
                } else if ('ABEH'.indexOf(letter) !== -1) {
                    // If it starts with A, B, E or H, it has to be a number
                    return (control === ('' + lastDigit));
                } else {
                    // In any other case, it doesn't matter
                    return (control === ('' + lastDigit) || control === 'JABCDEFGHI'[lastDigit]);
                }
            }
        },

        /**
         * Validate Finnish Personal Identity Code (HETU)
         * Examples:
         * - Valid: 311280-888Y, 131052-308T
         * - Invalid: 131052-308U, 310252-308Y
         *
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _fi: function(value) {
            if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {
                return false;
            }
            var day       = parseInt(value.substr(0, 2), 10),
                month     = parseInt(value.substr(2, 2), 10),
                year      = parseInt(value.substr(4, 2), 10),
                centuries = {
                    '+': 1800,
                    '-': 1900,
                    'A': 2000
                };
            year = centuries[value.charAt(6)] + year;

            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }

            var individual = parseInt(value.substr(7, 3), 10);
            if (individual < 2) {
                return false;
            }
            var n = value.substr(0, 6) + value.substr(7, 3) + '';
            n = parseInt(n, 10);
            return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);
        },

        /**
         * Validate Croatian personal identification number (OIB)
         * Examples:
         * - Valid: 33392005961
         * - Invalid: 33392005962
         *
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _hr: function(value) {
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }
            return FormValidation.Helper.mod11And10(value);
        },

        /**
         * Validate Irish Personal Public Service Number (PPS)
         * Examples:
         * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA
         * - Invalid: 6433435E, 6433435VH
         *
         * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _ie: function(value) {
            if (!/^\d{7}[A-W][AHWTX]?$/.test(value)) {
                return false;
            }

            var getCheckDigit = function(value) {
                while (value.length < 7) {
                    value = '0' + value;
                }
                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',
                    sum      = 0;
                for (var i = 0; i < 7; i++) {
                    sum += parseInt(value.charAt(i), 10) * (8 - i);
                }
                sum += 9 * alphabet.indexOf(value.substr(7));
                return alphabet[sum % 23];
            };

            // 2013 format
            if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {
                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');
            }
            // The old format
            else {
                return value.charAt(7) === getCheckDigit(value.substr(0, 7));
            }
        },

        /**
         * Validate Iceland national identification number (Kennitala)
         * Examples:
         * - Valid: 120174-3399, 1201743399, 0902862349
         *
         * @see http://en.wikipedia.org/wiki/Kennitala
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _is: function(value) {
            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {
                return false;
            }
            value = value.replace(/-/g, '');
            var day     = parseInt(value.substr(0, 2), 10),
                month   = parseInt(value.substr(2, 2), 10),
                year    = parseInt(value.substr(4, 2), 10),
                century = parseInt(value.charAt(9), 10);

            year = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);
            if (!FormValidation.Helper.date(year, month, day, true)) {
                return false;
            }
            // Validate the check digit
            var sum    = 0,
                weight = [3, 2, 7, 6, 5, 4, 3, 2];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = 11 - sum % 11;
            return (sum + '' === value.charAt(8));
        },

        /**
         * Validate Lithuanian Personal Code (Asmens kodas)
         * Examples:
         * - Valid: 38703181745
         * - Invalid: 38703181746, 78703181745, 38703421745
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania
         * @see http://www.adomas.org/midi2007/pcode.html
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _lt: function(value) {
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }
            var gender  = parseInt(value.charAt(0), 10),
                year    = parseInt(value.substr(1, 2), 10),
                month   = parseInt(value.substr(3, 2), 10),
                day     = parseInt(value.substr(5, 2), 10),
                century = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);
            year = century * 100 + year;
            if (!FormValidation.Helper.date(year, month, day, true)) {
                return false;
            }

            // Validate the check digit
            var sum    = 0,
                weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];
            for (var i = 0; i < 10; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = sum % 11;
            if (sum !== 10) {
                return sum + '' === value.charAt(10);
            }

            // Re-calculate the check digit
            sum    = 0;
            weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];
            for (i = 0; i < 10; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = sum % 11;
            if (sum === 10) {
                sum = 0;
            }
            return (sum + '' === value.charAt(10));
        },

        /**
         * Validate Latvian Personal Code (Personas kods)
         * Examples:
         * - Valid: 161175-19997, 16117519997
         * - Invalid: 161375-19997
         *
         * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _lv: function(value) {
            if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {
                return false;
            }
            value = value.replace(/\D/g, '');
            // Check birth date
            var day   = parseInt(value.substr(0, 2), 10),
                month = parseInt(value.substr(2, 2), 10),
                year  = parseInt(value.substr(4, 2), 10);
            year = year + 1800 + parseInt(value.charAt(6), 10) * 100;

            if (!FormValidation.Helper.date(year, month, day, true)) {
                return false;
            }

            // Check personal code
            var sum    = 0,
                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];
            for (var i = 0; i < 10; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = (sum + 1) % 11 % 10;
            return (sum + '' === value.charAt(10));
        },

        /**
         * Validate Dutch national identification number (BSN)
         * Examples:
         * - Valid: 111222333, 941331490, 9413.31.490
         * - Invalid: 111252333
         *
         * @see https://nl.wikipedia.org/wiki/Burgerservicenummer
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _nl: function(value) {
            while (value.length < 9) {
                value = '0' + value;
            }
            if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {
                return false;
            }
            value = value.replace(/\./g, '');
            if (parseInt(value, 10) === 0) {
                return false;
            }
            var sum    = 0,
                length = value.length;
            for (var i = 0; i < length - 1; i++) {
                sum += (9 - i) * parseInt(value.charAt(i), 10);
            }
            sum = sum % 11;
            if (sum === 10) {
                sum = 0;
            }
            return (sum + '' === value.charAt(length - 1));
        },
        
        /**
         * Validate Poland citizen number (PESEL)
         * 
         * @see http://en.wikipedia.org/wiki/National_identification_number#Poland
         * @see http://en.wikipedia.org/wiki/PESEL
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _pl: function(value) {
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                length = value.length,
                weight = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 7];

            for (var i = 0; i < length - 1; i++) {
                sum += weight[i] * parseInt(value.charAt(i), 10);
            }
            sum = sum % 10;
            if (sum === 0) {
                sum = 10;
            }
            sum = 10 - sum;

            return (sum + '' === value.charAt(length - 1));
        },

        /**
         * Validate Romanian numerical personal code (CNP)
         * Examples:
         * - Valid: 1630615123457, 1800101221144
         * - Invalid: 8800101221144, 1632215123457, 1630615123458
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#Romania
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _ro: function(value) {
            if (!/^[0-9]{13}$/.test(value)) {
                return false;
            }
            var gender = parseInt(value.charAt(0), 10);
            if (gender === 0 || gender === 7 || gender === 8) {
                return false;
            }

            // Determine the date of birth
            var year      = parseInt(value.substr(1, 2), 10),
                month     = parseInt(value.substr(3, 2), 10),
                day       = parseInt(value.substr(5, 2), 10),
                // The year of date is determined base on the gender
                centuries = {
                    '1': 1900,  // Male born between 1900 and 1999
                    '2': 1900,  // Female born between 1900 and 1999
                    '3': 1800,  // Male born between 1800 and 1899
                    '4': 1800,  // Female born between 1800 and 1899
                    '5': 2000,  // Male born after 2000
                    '6': 2000   // Female born after 2000
                };
            if (day > 31 && month > 12) {
                return false;
            }
            if (gender !== 9) {
                year = centuries[gender + ''] + year;
                if (!FormValidation.Helper.date(year, month, day)) {
                    return false;
                }
            }

            // Validate the check digit
            var sum    = 0,
                weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],
                length = value.length;
            for (var i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = sum % 11;
            if (sum === 10) {
                sum = 1;
            }
            return (sum + '' === value.charAt(length - 1));
        },

        /**
         * Validate Swedish personal identity number (personnummer)
         * Examples:
         * - Valid: 8112289874, 811228-9874, 811228+9874
         * - Invalid: 811228-9873
         *
         * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _se: function(value) {
            if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {
                return false;
            }
            value = value.replace(/[^0-9]/g, '');

            var year  = parseInt(value.substr(0, 2), 10) + 1900,
                month = parseInt(value.substr(2, 2), 10),
                day   = parseInt(value.substr(4, 2), 10);
            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }

            // Validate the last check digit
            return FormValidation.Helper.luhn(value);
        },

        /**
         * Validate Slovak national identifier number (RC)
         * Examples:
         * - Valid: 7103192745, 991231123
         * - Invalid: 7103192746, 1103492745
         *
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _sk: function(value) {
            // Slovakia uses the same format as Czech Republic
            return this._cz(value);
        },

        /**
         * Validate San Marino citizen number
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _sm: function(value) {
            return /^\d{5}$/.test(value);
        },

        /**
         * Validate Thailand citizen number
         * Examples:
         * - Valid: 7145620509547, 3688699975685, 2368719339716
         * - Invalid: 1100800092310
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#Thailand
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _th: function(value) {
            if (value.length !== 13) {
                return false;
            }

            var sum = 0;
            for (var i = 0; i < 12; i++) {
                sum += parseInt(value.charAt(i), 10) * (13 - i);
            }

            return (11 - sum % 11) % 10 === parseInt(value.charAt(12), 10);
        },

        /**
         * Validate South African ID
         * Example:
         * - Valid: 8001015009087
         * - Invalid: 8001015009287, 8001015009086
         *
         * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa
         * @param {String} value The ID
         * @returns {Boolean}
         */
        _za: function(value) {
            if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {
                return false;
            }
            var year        = parseInt(value.substr(0, 2), 10),
                currentYear = new Date().getFullYear() % 100,
                month       = parseInt(value.substr(2, 2), 10),
                day         = parseInt(value.substr(4, 2), 10);
            year = (year >= currentYear) ? (year + 1900) : (year + 2000);

            if (!FormValidation.Helper.date(year, month, day)) {
                return false;
            }

            // Validate the last check digit
            return FormValidation.Helper.luhn(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            identical: {
                'default': 'Please enter the same value'
            }
        }
    });

    FormValidation.Validator.identical = {
        html5Attributes: {
            message: 'message',
            field: 'field'
        },

        /**
         * Bind the validator on the live change of the field to compare with current one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         */
        init: function(validator, $field, options) {
            var compareWith = validator.getFieldElements(options.field);
            validator.onLiveChange(compareWith, 'live_identical', function() {
                var status = validator.getStatus($field, 'identical');
                if (status !== validator.STATUS_NOT_VALIDATED) {
                    validator.revalidateField($field);
                }
            });
        },

        /**
         * Unbind the validator on the live change of the field to compare with current one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         */
        destroy: function(validator, $field, options) {
            var compareWith = validator.getFieldElements(options.field);
            validator.offLiveChange(compareWith, 'live_identical');
        },

        /**
         * Check if input value equals to value of particular one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value       = validator.getFieldValue($field, 'identical'),
                compareWith = validator.getFieldElements(options.field);
            if (compareWith === null || compareWith.length === 0) {
                return true;
            }

            var compareValue = validator.getFieldValue(compareWith, 'identical');
            if (value === compareValue) {
                validator.updateStatus(compareWith, validator.STATUS_VALID, 'identical');
                return true;
            }

            return false;
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            imei: {
                'default': 'Please enter a valid IMEI number'
            }
        }
    });

    FormValidation.Validator.imei = {
        /**
         * Validate IMEI (International Mobile Station Equipment Identity)
         * Examples:
         * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518
         * - Invalid: 490154203237517
         *
         * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'imei');
            if (value === '') {
                return true;
            }

            switch (true) {
                case /^\d{15}$/.test(value):
                case /^\d{2}-\d{6}-\d{6}-\d{1}$/.test(value):
                case /^\d{2}\s\d{6}\s\d{6}\s\d{1}$/.test(value):
                    value = value.replace(/[^0-9]/g, '');
                    return FormValidation.Helper.luhn(value);

                case /^\d{14}$/.test(value):
                case /^\d{16}$/.test(value):
                case /^\d{2}-\d{6}-\d{6}(|-\d{2})$/.test(value):
                case /^\d{2}\s\d{6}\s\d{6}(|\s\d{2})$/.test(value):
                    return true;

                default:
                    return false;
            }
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            imo: {
                'default': 'Please enter a valid IMO number'
            }
        }
    });

    FormValidation.Validator.imo = {
        /**
         * Validate IMO (International Maritime Organization)
         * Examples:
         * - Valid: IMO 8814275, IMO 9176187
         * - Invalid: IMO 8814274
         *
         * @see http://en.wikipedia.org/wiki/IMO_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'imo');
            if (value === '') {
                return true;
            }

            if (!/^IMO \d{7}$/i.test(value)) {
                return false;
            }
            
            // Grab just the digits
            var sum    = 0,
                digits = value.replace(/^.*(\d{7})$/, '$1');
            
            // Go over each char, multiplying by the inverse of it's position
            // IMO 9176187
            // (9 * 7) + (1 * 6) + (7 * 5) + (6 * 4) + (1 * 3) + (8 * 2) = 147
            // Take the last digit of that, that's the check digit (7)
            for (var i = 6; i >= 1; i--) {
                sum += (digits.slice((6 - i), -i) * (i + 1));
            }

            return sum % 10 === parseInt(digits.charAt(6), 10);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            integer: {
                'default': 'Please enter a valid number'
            }
        }
    });

    FormValidation.Validator.integer = {
        enableByHtml5: function($field) {
            return ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);
        },

        /**
         * Return true if the input value is an integer
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following key:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {
                return false;
            }

            var value = validator.getFieldValue($field, 'integer');
            if (value === '') {
                return true;
            }
            return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            ip: {
                'default': 'Please enter a valid IP address',
                ipv4: 'Please enter a valid IPv4 address',
                ipv6: 'Please enter a valid IPv6 address'
            }
        }
    });

    FormValidation.Validator.ip = {
        html5Attributes: {
            message: 'message',
            ipv4: 'ipv4',
            ipv6: 'ipv6'
        },

        /**
         * Return true if the input value is a IP address.
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - ipv4: Enable IPv4 validator, default to true
         * - ipv6: Enable IPv6 validator, default to true
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'ip');
            if (value === '') {
                return true;
            }
            options = $.extend({}, { ipv4: true, ipv6: true }, options);

            var locale    = validator.getLocale(),
                ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
                ipv6Regex = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
                valid     = false,
                message;

            switch (true) {
                case (options.ipv4 && !options.ipv6):
                    valid   = ipv4Regex.test(value);
                    message = options.message || FormValidation.I18n[locale].ip.ipv4;
                    break;

                case (!options.ipv4 && options.ipv6):
                    valid   = ipv6Regex.test(value);
                    message = options.message || FormValidation.I18n[locale].ip.ipv6;
                    break;

                case (options.ipv4 && options.ipv6):
                /* falls through */
                default:
                    valid   = ipv4Regex.test(value) || ipv6Regex.test(value);
                    message = options.message || FormValidation.I18n[locale].ip['default'];
                    break;
            }

            return {
                valid: valid,
                message: message
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            isbn: {
                'default': 'Please enter a valid ISBN number'
            }
        }
    });

    FormValidation.Validator.isbn = {
        /**
         * Return true if the input value is a valid ISBN 10 or ISBN 13 number
         * Examples:
         * - Valid:
         * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X
         * ISBN 13: 978-0-306-40615-7
         * - Invalid:
         * ISBN 10: 99921-58-10-6
         * ISBN 13: 978-0-306-40615-6
         *
         * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} [options] Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'isbn');
            if (value === '') {
                return true;
            }

            // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview
            // Groups are separated by a hyphen or a space
            var type;
            switch (true) {
                case /^\d{9}[\dX]$/.test(value):
                case (value.length === 13 && /^(\d+)-(\d+)-(\d+)-([\dX])$/.test(value)):
                case (value.length === 13 && /^(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(value)):
                    type = 'ISBN10';
                    break;
                case /^(978|979)\d{9}[\dX]$/.test(value):
                case (value.length === 17 && /^(978|979)-(\d+)-(\d+)-(\d+)-([\dX])$/.test(value)):
                case (value.length === 17 && /^(978|979)\s(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(value)):
                    type = 'ISBN13';
                    break;
                default:
                    return false;
            }

            // Replace all special characters except digits and X
            value = value.replace(/[^0-9X]/gi, '');
            var chars  = value.split(''),
                length = chars.length,
                sum    = 0,
                i,
                checksum;

            switch (type) {
                case 'ISBN10':
                    sum = 0;
                    for (i = 0; i < length - 1; i++) {
                        sum += parseInt(chars[i], 10) * (10 - i);
                    }
                    checksum = 11 - (sum % 11);
                    if (checksum === 11) {
                        checksum = 0;
                    } else if (checksum === 10) {
                        checksum = 'X';
                    }
                    return (checksum + '' === chars[length - 1]);

                case 'ISBN13':
                    sum = 0;
                    for (i = 0; i < length - 1; i++) {
                        sum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));
                    }
                    checksum = 10 - (sum % 10);
                    if (checksum === 10) {
                        checksum = '0';
                    }
                    return (checksum + '' === chars[length - 1]);

                default:
                    return false;
            }
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            isin: {
                'default': 'Please enter a valid ISIN number'
            }
        }
    });

    FormValidation.Validator.isin = {
        // Available country codes
        // See http://isin.net/country-codes/
        COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',

        /**
         * Validate an ISIN (International Securities Identification Number)
         * Examples:
         * - Valid: US0378331005, AU0000XVGZA3, GB0002634946
         * - Invalid: US0378331004, AA0000XVGZA3
         *
         * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'isin');
            if (value === '') {
                return true;
            }

            value = value.toUpperCase();
            var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');
            if (!regex.test(value)) {
                return false;
            }

            var converted = '',
                length    = value.length;
            // Convert letters to number
            for (var i = 0; i < length - 1; i++) {
                var c = value.charCodeAt(i);
                converted += ((c > 57) ? (c - 55).toString() : value.charAt(i));
            }

            var digits = '',
                n      = converted.length,
                group  = (n % 2 !== 0) ? 0 : 1;
            for (i = 0; i < n; i++) {
                digits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');
            }

            var sum = 0;
            for (i = 0; i < digits.length; i++) {
                sum += parseInt(digits.charAt(i), 10);
            }
            sum = (10 - (sum % 10)) % 10;
            return sum + '' === value.charAt(length - 1);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            ismn: {
                'default': 'Please enter a valid ISMN number'
            }
        }
    });

    FormValidation.Validator.ismn = {
        /**
         * Validate ISMN (International Standard Music Number)
         * Examples:
         * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615
         * - Invalid: 9790060115614
         *
         * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'ismn');
            if (value === '') {
                return true;
            }

            // Groups are separated by a hyphen or a space
            var type;
            switch (true) {
                case /^M\d{9}$/.test(value):
                case /^M-\d{4}-\d{4}-\d{1}$/.test(value):
                case /^M\s\d{4}\s\d{4}\s\d{1}$/.test(value):
                    type = 'ISMN10';
                    break;
                case /^9790\d{9}$/.test(value):
                case /^979-0-\d{4}-\d{4}-\d{1}$/.test(value):
                case /^979\s0\s\d{4}\s\d{4}\s\d{1}$/.test(value):
                    type = 'ISMN13';
                    break;
                default:
                    return false;
            }

            if ('ISMN10' === type) {
                value = '9790' + value.substr(1);
            }

            // Replace all special characters except digits
            value = value.replace(/[^0-9]/gi, '');
            var length = value.length,
                sum    = 0,
                weight = [1, 3];
            for (var i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i % 2];
            }
            sum = 10 - sum % 10;
            return (sum + '' === value.charAt(length - 1));
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            issn: {
                'default': 'Please enter a valid ISSN number'
            }
        }
    });

    FormValidation.Validator.issn = {
        /**
         * Validate ISSN (International Standard Serial Number)
         * Examples:
         * - Valid: 0378-5955, 0024-9319, 0032-1478
         * - Invalid: 0032-147X
         *
         * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'issn');
            if (value === '') {
                return true;
            }

            // Groups are separated by a hyphen or a space
            if (!/^\d{4}\-\d{3}[\dX]$/.test(value)) {
                return false;
            }

            // Replace all special characters except digits and X
            value = value.replace(/[^0-9X]/gi, '');
            var chars  = value.split(''),
                length = chars.length,
                sum    = 0;

            if (chars[7] === 'X') {
                chars[7] = 10;
            }
            for (var i = 0; i < length; i++) {
                sum += parseInt(chars[i], 10) * (8 - i);
            }
            return (sum % 11 === 0);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            lessThan: {
                'default': 'Please enter a value less than or equal to %s',
                notInclusive: 'Please enter a value less than %s'
            }
        }
    });

    FormValidation.Validator.lessThan = {
        html5Attributes: {
            message: 'message',
            value: 'value',
            inclusive: 'inclusive'
        },

        enableByHtml5: function($field) {
            var type = $field.attr('type'),
                max  = $field.attr('max');
            if (max && type !== 'date') {
                return {
                    value: max
                };
            }

            return false;
        },

        /**
         * Return true if the input value is less than or equal to given number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - value: The number used to compare to. It can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - inclusive [optional]: Can be true or false. Default is true
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'lessThan');
            if (value === '') {
                return true;
            }
            
			value = this._format(value);
            if (!$.isNumeric(value)) {
                return false;
            }

            var locale         = validator.getLocale(),
                compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),
                compareToValue = this._format(compareTo);

            value = parseFloat(value);
            return (options.inclusive === true || options.inclusive === undefined)
                    ? {
                        valid: value <= compareToValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].lessThan['default'], compareTo)
                    }
                    : {
                        valid: value < compareToValue,
                        message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].lessThan.notInclusive, compareTo)
                    };
        },

        _format: function(value) {
            return (value + '').replace(',', '.');
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            mac: {
                'default': 'Please enter a valid MAC address'
            }
        }
    });

    FormValidation.Validator.mac = {
        /**
         * Return true if the input value is a MAC address.
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'mac');
            if (value === '') {
                return true;
            }

            return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            meid: {
                'default': 'Please enter a valid MEID number'
            }
        }
    });

    FormValidation.Validator.meid = {
        /**
         * Validate MEID (Mobile Equipment Identifier)
         * Examples:
         * - Valid: 293608736500703710, 29360-87365-0070-3710, AF0123450ABCDE, AF-012345-0ABCDE
         * - Invalid: 2936087365007037101
         *
         * @see http://en.wikipedia.org/wiki/Mobile_equipment_identifier
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'meid');
            if (value === '') {
                return true;
            }

            switch (true) {
                // 14 digit hex representation (no check digit)
                case /^[0-9A-F]{15}$/i.test(value):
                // 14 digit hex representation + dashes or spaces (no check digit)
                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(value):
                // 18 digit decimal representation (no check digit)
                case /^\d{19}$/.test(value):
                // 18 digit decimal representation + dashes or spaces (no check digit)
                case /^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}[- ]\d$/.test(value):
                    // Grab the check digit
                    var cd = value.charAt(value.length - 1);

                    // Strip any non-hex chars
                    value = value.replace(/[- ]/g, '');

                    // If it's all digits, luhn base 10 is used
                    if (value.match(/^\d*$/i)) {
                        return FormValidation.Helper.luhn(value);
                    }

                    // Strip the check digit
                    value = value.slice(0, -1);

                    // Get every other char, and double it
                    var cdCalc = '';
                    for (var i = 1; i <= 13; i += 2) {
                        cdCalc += (parseInt(value.charAt(i), 16) * 2).toString(16);
                    }

                    // Get the sum of each char in the string
                    var sum = 0;
                    for (i = 0; i < cdCalc.length; i++) {
                        sum += parseInt(cdCalc.charAt(i), 16);
                    }

                    // If the last digit of the calc is 0, the check digit is 0
                    return (sum % 10 === 0)
                            ? (cd === '0')
                            // Subtract it from the next highest 10s number (64 goes to 70) and subtract the sum
                            // Double it and turn it into a hex char
                            : (cd === ((Math.floor((sum + 10) / 10) * 10 - sum) * 2).toString(16));

                // 14 digit hex representation (no check digit)
                case /^[0-9A-F]{14}$/i.test(value):
                // 14 digit hex representation + dashes or spaces (no check digit)
                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(value):
                // 18 digit decimal representation (no check digit)
                case /^\d{18}$/.test(value):
                // 18 digit decimal representation + dashes or spaces (no check digit)
                case /^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}$/.test(value):
                    return true;

                default:
                    return false;
            }
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            notEmpty: {
                'default': 'Please enter a value'
            }
        }
    });

    FormValidation.Validator.notEmpty = {
        enableByHtml5: function($field) {
            var required = $field.attr('required') + '';
            return ('required' === required || 'true' === required);
        },

        /**
         * Check if input value is empty or not
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var type = $field.attr('type');
            if ('radio' === type || 'checkbox' === type) {
                var ns = validator.getNamespace();
                return validator
                            .getFieldElements($field.attr('data-' + ns + '-field'))
                            .filter(':checked')
                            .length > 0;
            }

            if ('number' === type && $field.get(0).validity && $field.get(0).validity.badInput === true) {
                return true;
            }

            var value = validator.getFieldValue($field, 'notEmpty');
            return $.trim(value) !== '';
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            numeric: {
                'default': 'Please enter a valid float number'
            }
        }
    });

    FormValidation.Validator.numeric = {
        html5Attributes: {
            message: 'message',
            separator: 'separator'
        },

        enableByHtml5: function($field) {
            return ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);
        },

        /**
         * Validate decimal number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - separator: The decimal separator. Can be "." (default), ","
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {
                return false;
            }

            var value = validator.getFieldValue($field, 'numeric');
            if (value === '') {
                return true;
            }
            var separator = options.separator || '.';
            if (separator !== '.') {
                value = value.replace(separator, '.');
            }

            return !isNaN(parseFloat(value)) && isFinite(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            phone: {
                'default': 'Please enter a valid phone number',
                country: 'Please enter a valid phone number in %s',
                countries: {
                    AE: 'United Arab Emirates',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IN: 'India',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            }
        }
    });

    FormValidation.Validator.phone = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        // The supported countries
        COUNTRY_CODES: ['AE', 'BG', 'BR', 'CN', 'CZ', 'DE', 'DK', 'ES', 'FR', 'GB', 'IN', 'MA', 'NL', 'PK', 'RO', 'RU', 'SK', 'TH', 'US', 'VE'],

        /**
         * Return true if the input value contains a valid phone number for the country
         * selected in the options
         *
         * @param {FormValidation.Base} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The ISO-3166 country code. It can be
         *      - A country code
         *      - Name of field which its value defines the country code
         *      - Name of callback function that returns the country code
         *      - A callback function that returns the country code
         *
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'phone');
            if (value === '') {
                return true;
            }

            var locale  = validator.getLocale(),
                country = options.country;
            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {
                // Try to determine the country
                country = validator.getDynamicOption($field, country);
            }

            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {
                return true;
            }

            var isValid = true;
            switch (country.toUpperCase()) {
                case 'AE':
                    // http://regexr.com/39tak
                    value   = $.trim(value);
                    isValid = (/^(((\+|00)?971[\s\.-]?(\(0\)[\s\.-]?)?|0)(\(5(0|2|5|6)\)|5(0|2|5|6)|2|3|4|6|7|9)|60)([\s\.-]?[0-9]){7}$/).test(value);
                    break;
                    
                case 'BG':
                    // https://regex101.com/r/yE6vN4/1
                    // See http://en.wikipedia.org/wiki/Telephone_numbers_in_Bulgaria
                    value   = value.replace(/\+|\s|-|\/|\(|\)/gi,'');
                    isValid = (/^(0|359|00)(((700|900)[0-9]{5}|((800)[0-9]{5}|(800)[0-9]{4}))|(87|88|89)([0-9]{7})|((2[0-9]{7})|(([3-9][0-9])(([0-9]{6})|([0-9]{5})))))$/).test(value);
                    break;

                case 'BR':
                    // http://regexr.com/399m1
                    value   = $.trim(value);
                    isValid = (/^(([\d]{4}[-.\s]{1}[\d]{2,3}[-.\s]{1}[\d]{2}[-.\s]{1}[\d]{2})|([\d]{4}[-.\s]{1}[\d]{3}[-.\s]{1}[\d]{4})|((\(?\+?[0-9]{2}\)?\s?)?(\(?\d{2}\)?\s?)?\d{4,5}[-.\s]?\d{4}))$/).test(value);
                    break;

                case 'CN':
                    // http://regexr.com/39dq4
                    value   = $.trim(value);
                    isValid = (/^((00|\+)?(86(?:-| )))?((\d{11})|(\d{3}[- ]{1}\d{4}[- ]{1}\d{4})|((\d{2,4}[- ]){1}(\d{7,8}|(\d{3,4}[- ]{1}\d{4}))([- ]{1}\d{1,4})?))$/).test(value);
                    break;

                case 'CZ':
                    // http://regexr.com/39hhl
                    isValid = /^(((00)([- ]?)|\+)(420)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(value);
                    break;

                case 'DE':
                    // http://regexr.com/39pkg
                    value   = $.trim(value);
                    isValid = (/^(((((((00|\+)49[ \-/]?)|0)[1-9][0-9]{1,4})[ \-/]?)|((((00|\+)49\()|\(0)[1-9][0-9]{1,4}\)[ \-/]?))[0-9]{1,7}([ \-/]?[0-9]{1,5})?)$/).test(value);
                    break;

                case 'DK':
                    // Mathing DK phone numbers with country code in 1 of 3 formats and an
                    // 8 digit phone number not starting with a 0 or 1. Can have 1 space
                    // between each character except inside the country code.
                    // http://regex101.com/r/sS8fO4/1
                    value   = $.trim(value);
                    isValid = (/^(\+45|0045|\(45\))?\s?[2-9](\s?\d){7}$/).test(value);
                    break;

                case 'ES':
                    // http://regex101.com/r/rB9mA9/1
                    // Telephone numbers in Spain go like this:
                    //     9: Landline phones and special prefixes.
                    //     6, 7: Mobile phones.
                    //     5: VoIP lines.
                    //     8: Premium-rate services.
                    // There are also special 5-digit and 3-digit numbers, but
                    // maybe it would be overkill to include them all.
                    value   = $.trim(value);
                    isValid = (/^(?:(?:(?:\+|00)34\D?))?(?:5|6|7|8|9)(?:\d\D?){8}$/).test(value);
                    break;

                case 'FR':
                    // http://regexr.com/39a2p
                    value   = $.trim(value);
                    isValid = (/^(?:(?:(?:\+|00)33[ ]?(?:\(0\)[ ]?)?)|0){1}[1-9]{1}([ .-]?)(?:\d{2}\1?){3}\d{2}$/).test(value);
                    break;

            	case 'GB':
                    // http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format
                    // http://regexr.com/38uhv
                    value   = $.trim(value);
                    isValid = (/^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)$/).test(value);
                    break;
            
                case 'IN':
                    // http://stackoverflow.com/questions/18351553/regular-expression-validation-for-indian-phone-number-and-mobile-number
                    // http://regex101.com/r/qL6eZ5/1
                    // May begin with +91. Supports mobile and land line numbers
                    value   = $.trim(value);
                    isValid = (/((\+?)((0[ -]+)*|(91 )*)(\d{12}|\d{10}))|\d{5}([- ]*)\d{6}/).test(value);
                    break;
                    
                case 'MA':
                    // http://en.wikipedia.org/wiki/Telephone_numbers_in_Morocco
                    // http://regexr.com/399n8
                    value   = $.trim(value);
                    isValid = (/^(?:(?:(?:\+|00)212[\s]?(?:[\s]?\(0\)[\s]?)?)|0){1}(?:5[\s.-]?[2-3]|6[\s.-]?[13-9]){1}[0-9]{1}(?:[\s.-]?\d{2}){3}$/).test(value);
                    break;
                
                case 'NL':
                    // http://en.wikipedia.org/wiki/Telephone_numbers_in_the_Netherlands
                    // http://regexr.com/3aevr
                    value   = $.trim(value);
                    isValid = (/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9])((\s|\s?-\s?)?[0-9])((\s|\s?-\s?)?[0-9])\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]$/gm).test(value);
                    break;
                
                case 'PK':
                    // http://regex101.com/r/yH8aV9/2
                    value   = $.trim(value);
                    isValid = (/^0?3[0-9]{2}[0-9]{7}$/).test(value);
                    break;

                case 'RO':
                    // All mobile network and land line
                    // http://regexr.com/39fv1
                    isValid = (/^(\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\s|\.|\-)?([0-9]{3}(\s|\.|\-|)){2}$/g).test(value);
                    break;

                case 'RU':
                    // http://regex101.com/r/gW7yT5/5
                    isValid = (/^((8|\+7|007)[\-\.\/ ]?)?([\(\/\.]?\d{3}[\)\/\.]?[\-\.\/ ]?)?[\d\-\.\/ ]{7,10}$/g).test(value);
                    break;

                case 'SK':
                    // http://regexr.com/3a95f
                    isValid = /^(((00)([- ]?)|\+)(421)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(value);
                    break;

                case 'TH':
                    // http://regex101.com/r/vM5mZ4/2
                    isValid = (/^0\(?([6|8-9]{2})*-([0-9]{3})*-([0-9]{4})$/).test(value);
                    break;

                case 'VE':
                    // http://regex101.com/r/eM2yY0/6
                    value   = $.trim(value);
                    isValid = (/^0(?:2(?:12|4[0-9]|5[1-9]|6[0-9]|7[0-8]|8[1-35-8]|9[1-5]|3[45789])|4(?:1[246]|2[46]))\d{7}$/).test(value);
                    break;
  
                case 'US':
                /* falls through */
                default:
                    // Make sure US phone numbers have 10 digits
                    // May start with 1, +1, or 1-; should discard
                    // Area code may be delimited with (), & sections may be delimited with . or -
                    // http://regexr.com/38mqi
                    isValid = (/^(?:(1\-?)|(\+1 ?))?\(?(\d{3})[\)\-\.]?(\d{3})[\-\.]?(\d{4})$/).test(value);
                    break;
            }

            return {
                valid: isValid,
                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].phone.country, FormValidation.I18n[locale].phone.countries[country])
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            regexp: {
                'default': 'Please enter a value matching the pattern'
            }
        }
    });

    FormValidation.Validator.regexp = {
        html5Attributes: {
            message: 'message',
            regexp: 'regexp'
        },

        enableByHtml5: function($field) {
            var pattern = $field.attr('pattern');
            if (pattern) {
                return {
                    regexp: pattern
                };
            }

            return false;
        },

        /**
         * Check if the element value matches given regular expression
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - regexp: The regular expression you need to check
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'regexp');
            if (value === '') {
                return true;
            }

            var regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;
            return regexp.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            remote: {
                'default': 'Please enter a valid value'
            }
        }
    });

    FormValidation.Validator.remote = {
        html5Attributes: {
            crossdomain: 'crossDomain',
            data: 'data',
            datatype: 'dataType',
            delay: 'delay',
            message: 'message',
            name: 'name',
            type: 'type',
            url: 'url',
            validkey: 'validKey'
        },

        /**
         * Destroy the timer when destroying the FormValidation (using validator.destroy() method)
         */
        destroy: function(validator, $field, options) {
            var ns    = validator.getNamespace(),
                timer = $field.data(ns + '.remote.timer');
            if (timer) {
                clearTimeout(timer);
                $field.removeData(ns + '.remote.timer');
            }
        },

        /**
         * Request a remote server to check the input value
         *
         * @param {FormValidation.Base} validator Plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - crossDomain {Boolean} [optional]
         * - data {Object|Function} [optional]: By default, it will take the value
         *  {
         *      <fieldName>: <fieldValue>
         *  }
         * - dataType {String} [optional]: The type of data which is returned by remote server.
         * It can be json (default), text, script
         * - delay {Number} [optional]
         * - headers {String[]} [optional]: Additional headers
         * - message {String} [optional]: The invalid message
         * - name {String} [optional]: Override the field name for the request.
         * - type {String} [optional] Can be GET or POST (default)
         * - url {String|Function}
         * - validKey {String} [optional]: The valid key. It's "valid" by default
         * This is useful when connecting to external remote server or APIs provided by 3rd parties
         * @returns {Deferred}
         */
        validate: function(validator, $field, options) {
            var ns    = validator.getNamespace(),
                value = validator.getFieldValue($field, 'remote'),
                dfd   = new $.Deferred();
            if (value === '') {
                dfd.resolve($field, 'remote', { valid: true });
                return dfd;
            }
            var name     = $field.attr('data-' + ns + '-field'),
                data     = options.data || {},
                url      = options.url,
                validKey = options.validKey || 'valid';

            // Support dynamic data
            if ('function' === typeof data) {
                data = data.call(this, validator);
            }

            // Parse string data from HTML5 attribute
            if ('string' === typeof data) {
                data = JSON.parse(data);
            }

            // Support dynamic url
            if ('function' === typeof url) {
                url = url.call(this, validator);
            }

            data[options.name || name] = value;

            var ajaxOptions = {
                data: data,
                dataType: options.dataType || 'json',
                headers: options.headers || {},
                type: options.type || 'GET',
                url: url
            };
            if (options.crossDomain !== null) {
                ajaxOptions.crossDomain = (options.crossDomain === true || options.crossDomain === 'true');
            }

            function runCallback() {
                var xhr = $.ajax(ajaxOptions);

                xhr
                    .success(function(response) {
                        response.valid = response[validKey] === true || response[validKey] === 'true';
                        dfd.resolve($field, 'remote', response);
                    })
                    .error(function(response) {
                        dfd.resolve($field, 'remote', {
                            valid: false
                        });
                    });

                dfd.fail(function() {
                    xhr.abort();
                });

                return dfd;
            }
            
            if (options.delay) {
                // Since the form might have multiple fields with the same name
                // I have to attach the timer to the field element
                if ($field.data(ns + '.remote.timer')) {
                    clearTimeout($field.data(ns + '.remote.timer'));
                }

                $field.data(ns + '.remote.timer', setTimeout(runCallback, options.delay));
                return dfd;
            } else {
                return runCallback();
            }
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            rtn: {
                'default': 'Please enter a valid RTN number'
            }
        }
    });

    FormValidation.Validator.rtn = {
        /**
         * Validate a RTN (Routing transit number)
         * Examples:
         * - Valid: 021200025, 789456124
         *
         * @see http://en.wikipedia.org/wiki/Routing_transit_number
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'rtn');
            if (value === '') {
                return true;
            }

            if (!/^\d{9}$/.test(value)) {
                return false;
            }

            var sum = 0;
            for (var i = 0; i < value.length; i += 3) {
                sum += parseInt(value.charAt(i),     10) * 3
                    +  parseInt(value.charAt(i + 1), 10) * 7
                    +  parseInt(value.charAt(i + 2), 10);
            }
            return (sum !== 0 && sum % 10 === 0);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            sedol: {
                'default': 'Please enter a valid SEDOL number'
            }
        }
    });

    FormValidation.Validator.sedol = {
        /**
         * Validate a SEDOL (Stock Exchange Daily Official List)
         * Examples:
         * - Valid: 0263494, B0WNLY7
         *
         * @see http://en.wikipedia.org/wiki/SEDOL
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'sedol');
            if (value === '') {
                return true;
            }

            value = value.toUpperCase();
            if (!/^[0-9A-Z]{7}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [1, 3, 1, 7, 3, 9, 1],
                length = value.length;
            for (var i = 0; i < length - 1; i++) {
	            sum += weight[i] * parseInt(value.charAt(i), 36);
	        }
	        sum = (10 - sum % 10) % 10;
            return sum + '' === value.charAt(length - 1);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
		'en_US': {
			siren: {
				'default': 'Please enter a valid SIREN number'
			}
		}
    });

	FormValidation.Validator.siren = {
		/**
		 * Check if a string is a siren number
		 *
		 * @param {FormValidation.Base} validator The validator plugin instance
		 * @param {jQuery} $field Field element
		 * @param {Object} options Consist of key:
         * - message: The invalid message
		 * @returns {Boolean}
		 */
		validate: function(validator, $field, options) {
			var value = validator.getFieldValue($field, 'siren');
			if (value === '') {
				return true;
			}

            if (!/^\d{9}$/.test(value)) {
                return false;
            }
            return FormValidation.Helper.luhn(value);
		}
	};
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
		'en_US': {
			siret: {
				'default': 'Please enter a valid SIRET number'
			}
		}
    });

	FormValidation.Validator.siret = {
        /**
         * Check if a string is a siret number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * @returns {Boolean}
         */
		validate: function(validator, $field, options) {
			var value = validator.getFieldValue($field, 'siret');
			if (value === '') {
				return true;
			}

			var sum    = 0,
                length = value.length,
                tmp;
			for (var i = 0; i < length; i++) {
                tmp = parseInt(value.charAt(i), 10);
				if ((i % 2) === 0) {
					tmp = tmp * 2;
					if (tmp > 9) {
						tmp -= 9;
					}
				}
				sum += tmp;
			}
			return (sum % 10 === 0);
		}
	};
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            step: {
                'default': 'Please enter a valid step of %s'
            }
        }
    });

    FormValidation.Validator.step = {
        html5Attributes: {
            message: 'message',
            base: 'baseValue',
            step: 'step'
        },

        /**
         * Return true if the input value is valid step one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - baseValue: The base value
         * - step: The step
         * - message: The invalid message
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'step');
            if (value === '') {
                return true;
            }

            options = $.extend({}, { baseValue: 0, step: 1 }, options);
            value   = parseFloat(value);
            if (!$.isNumeric(value)) {
                return false;
            }

            var round = function(x, precision) {
                    var m = Math.pow(10, precision);
                    x = x * m;
                    var sign   = (x > 0) | -(x < 0),
                        isHalf = (x % 1 === 0.5 * sign);
                    if (isHalf) {
                        return (Math.floor(x) + (sign > 0)) / m;
                    } else {
                        return Math.round(x) / m;
                    }
                },
                floatMod = function(x, y) {
                    if (y === 0.0) {
                        return 1.0;
                    }
                    var dotX      = (x + '').split('.'),
                        dotY      = (y + '').split('.'),
                        precision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);
                    return round(x - y * Math.floor(x / y), precision);
                };

            var locale = validator.getLocale(),
                mod    = floatMod(value - options.baseValue, options.step);
            return {
                valid: mod === 0.0 || mod === options.step,
                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].step['default'], [options.step])
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            stringCase: {
                'default': 'Please enter only lowercase characters',
                upper: 'Please enter only uppercase characters'
            }
        }
    });

    FormValidation.Validator.stringCase = {
        html5Attributes: {
            message: 'message',
            'case': 'case'
        },

        /**
         * Check if a string is a lower or upper case one
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - case: Can be 'lower' (default) or 'upper'
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'stringCase');
            if (value === '') {
                return true;
            }

            var locale     = validator.getLocale(),
                stringCase = (options['case'] || 'lower').toLowerCase();
            return {
                valid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),
                message: options.message || (('upper' === stringCase) ? FormValidation.I18n[locale].stringCase.upper : FormValidation.I18n[locale].stringCase['default'])
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            stringLength: {
                'default': 'Please enter a value with valid length',
                less: 'Please enter less than %s characters',
                more: 'Please enter more than %s characters',
                between: 'Please enter value between %s and %s characters long'
            }
        }
    });

    FormValidation.Validator.stringLength = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max',
            trim: 'trim',
            utf8bytes: 'utf8Bytes'
        },

        enableByHtml5: function($field) {
            var options   = {},
                maxLength = $field.attr('maxlength'),
                minLength = $field.attr('minlength');
            if (maxLength) {
                options.max = parseInt(maxLength, 10);
            }
            if (minLength) {
                options.min = parseInt(minLength, 10);
            }

            return $.isEmptyObject(options) ? false : options;
        },

        /**
         * Check if the length of element value is less or more than given number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of following keys:
         * - min
         * - max
         * At least one of two keys is required
         * The min, max keys define the number which the field value compares to. min, max can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - message: The invalid message
         * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default
         * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'stringLength');
            if (options.trim === true || options.trim === 'true') {
                value = $.trim(value);
            }

            if (value === '') {
                return true;
            }

            var locale     = validator.getLocale(),
                min        = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),
                max        = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),
                // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code
                utf8Length = function(str) {
                                 var s = str.length;
                                 for (var i = str.length - 1; i >= 0; i--) {
                                     var code = str.charCodeAt(i);
                                     if (code > 0x7f && code <= 0x7ff) {
                                         s++;
                                     } else if (code > 0x7ff && code <= 0xffff) {
                                         s += 2;
                                     }
                                     if (code >= 0xDC00 && code <= 0xDFFF) {
                                         i--;
                                     }
                                 }
                                 return s;
                             },
                length     = options.utf8Bytes ? utf8Length(value) : value.length,
                isValid    = true,
                message    = options.message || FormValidation.I18n[locale].stringLength['default'];

            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {
                isValid = false;
            }

            switch (true) {
                case (!!min && !!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);
                    break;

                case (!!min):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.more, parseInt(min, 10));
                    break;

                case (!!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.less, parseInt(max, 10));
                    break;

                default:
                    break;
            }

            return {
                valid: isValid,
                message: message
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            uri: {
                'default': 'Please enter a valid URI'
            }
        }
    });

    FormValidation.Validator.uri = {
        html5Attributes: {
            message: 'message',
            allowlocal: 'allowLocal',
            allowemptyprotocol: 'allowEmptyProtocol',
            protocol: 'protocol'
        },

        enableByHtml5: function($field) {
            return ('url' === $field.attr('type'));
        },

        /**
         * Return true if the input value is a valid URL
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options
         * - message: The error message
         * - allowLocal: Allow the private and local network IP. Default to false
         * - allowEmptyProtocol: Allow the URI without protocol. Default to false
         * - protocol: The protocols, separated by a comma. Default to "http, https, ftp"
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'uri');
            if (value === '') {
                return true;
            }

            // Credit to https://gist.github.com/dperini/729294
            //
            // Regular Expression for URL validation
            //
            // Author: Diego Perini
            // Updated: 2010/12/05
            //
            // the regular expression composed & commented
            // could be easily tweaked for RFC compliance,
            // it was expressly modified to fit & satisfy
            // these test for an URL shortener:
            //
            //   http://mathiasbynens.be/demo/url-regex
            //
            // Notes on possible differences from a standard/generic validation:
            //
            // - utf-8 char class take in consideration the full Unicode range
            // - TLDs are mandatory unless `allowLocal` is true
            // - protocols have been restricted to ftp, http and https only as requested
            //
            // Changes:
            //
            // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255
            //   first and last IP address of each class is considered invalid
            //   (since they are broadcast/network addresses)
            //
            // - Added exclusion of private, reserved and/or local networks ranges
            //   unless `allowLocal` is true
            //
            // - Added possibility of choosing a custom protocol
            //
            // - Add option to validate without protocol
            //
            var allowLocal         = options.allowLocal === true || options.allowLocal === 'true',
                allowEmptyProtocol = options.allowEmptyProtocol === true || options.allowEmptyProtocol === 'true',
                protocol           = (options.protocol || 'http, https, ftp').split(',').join('|').replace(/\s/g, ''),
                urlExp             = new RegExp(
                    "^" +
                    // protocol identifier
                    "(?:(?:" + protocol + ")://)" +
                    // allow empty protocol
                    (allowEmptyProtocol ? '?' : '') +
                    // user:pass authentication
                    "(?:\\S+(?::\\S*)?@)?" +
                    "(?:" +
                    // IP address exclusion
                    // private & local networks
                    (allowLocal
                        ? ''
                        : ("(?!(?:10|127)(?:\\.\\d{1,3}){3})" +
                           "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" +
                           "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})")) +
                    // IP address dotted notation octets
                    // excludes loopback network 0.0.0.0
                    // excludes reserved space >= 224.0.0.0
                    // excludes network & broadcast addresses
                    // (first & last IP address of each class)
                    "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" +
                    "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" +
                    "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" +
                    "|" +
                    // host name
                    "(?:(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9]+)" +
                    // domain name
                    "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9])*" +
                    // TLD identifier
                    "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" +
                    // Allow intranet sites (no TLD) if `allowLocal` is true
                    (allowLocal ? '?' : '') +
                    ")" +
                    // port number
                    "(?::\\d{2,5})?" +
                    // resource path
                    "(?:/[^\\s]*)?" +
                    "$", "i"
                );

            return urlExp.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            uuid: {
                'default': 'Please enter a valid UUID number',
                version: 'Please enter a valid UUID version %s number'
            }
        }
    });

    FormValidation.Validator.uuid = {
        html5Attributes: {
            message: 'message',
            version: 'version'
        },

        /**
         * Return true if and only if the input value is a valid UUID string
         *
         * @see http://en.wikipedia.org/wiki/Universally_unique_identifier
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - version: Can be 3, 4, 5, null
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'uuid');
            if (value === '') {
                return true;
            }

            // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions
            var locale   = validator.getLocale(),
                patterns = {
                    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
                    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
                    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
                    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
                },
                version = options.version ? (options.version + '') : 'all';
            return {
                valid: (null === patterns[version]) ? true : patterns[version].test(value),
                message: options.version
                            ? FormValidation.Helper.format(options.message || FormValidation.I18n[locale].uuid.version, options.version)
                            : (options.message || FormValidation.I18n[locale].uuid['default'])
            };
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            vat: {
                'default': 'Please enter a valid VAT number',
                country: 'Please enter a valid VAT number in %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgium',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GR: 'Greek',
                    EL: 'Greek',
                    HU: 'Hungary',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    IT: 'Italy',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'South Africa'
                }
            }
        }
    });

    FormValidation.Validator.vat = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        // Supported country codes
        COUNTRY_CODES: [
            'AT', 'BE', 'BG', 'BR', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'EL', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU',
            'IE', 'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SE', 'SK', 'SI', 'VE',
            'ZA'
        ],

        /**
         * Validate an European VAT number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The ISO 3166-1 country code. It can be
         *      - One of country code defined in COUNTRY_CODES
         *      - Name of field which its value defines the country code
         *      - Name of callback function that returns the country code
         *      - A callback function that returns the country code
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'vat');
            if (value === '') {
                return true;
            }

            var locale  = validator.getLocale(),
                country = options.country;
            if (!country) {
                country = value.substr(0, 2);
            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {
                // Determine the country code
                country = validator.getDynamicOption($field, country);
            }

            if ($.inArray(country, this.COUNTRY_CODES) === -1) {
                return true;
            }

            var method  = ['_', country.toLowerCase()].join('');
            return this[method](value)
                ? true
                : {
                    valid: false,
                    message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].vat.country, FormValidation.I18n[locale].vat.countries[country.toUpperCase()])
                };
        },

        // VAT validators

        /**
         * Validate Austrian VAT number
         * Example:
         * - Valid: ATU13585627
         * - Invalid: ATU13585626
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _at: function(value) {
            if (/^ATU[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^U[0-9]{8}$/.test(value)) {
                return false;
            }

            value = value.substr(1);
            var sum    = 0,
                weight = [1, 2, 1, 2, 1, 2, 1],
                temp   = 0;
            for (var i = 0; i < 7; i++) {
                temp = parseInt(value.charAt(i), 10) * weight[i];
                if (temp > 9) {
                    temp = Math.floor(temp / 10) + temp % 10;
                }
                sum += temp;
            }

            sum = 10 - (sum + 4) % 10;
            if (sum === 10) {
                sum = 0;
            }

            return (sum + '' === value.substr(7, 1));
        },

        /**
         * Validate Belgian VAT number
         * Example:
         * - Valid: BE0428759497
         * - Invalid: BE431150351
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _be: function(value) {
            if (/^BE[0]{0,1}[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0]{0,1}[0-9]{9}$/.test(value)) {
                return false;
            }

            if (value.length === 9) {
                value = '0' + value;
            }
            if (value.substr(1, 1) === '0') {
                return false;
            }

            var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);
            return (sum % 97 === 0);
        },

        /**
         * Validate Bulgarian VAT number
         * Example:
         * - Valid: BG175074752,
         * BG7523169263, BG8032056031,
         * BG7542011030,
         * BG7111042925
         * - Invalid: BG175074753, BG7552A10004, BG7111042922
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _bg: function(value) {
            if (/^BG[0-9]{9,10}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9,10}$/.test(value)) {
                return false;
            }

            var sum = 0, i = 0;

            // Legal entities
            if (value.length === 9) {
                for (i = 0; i < 8; i++) {
                    sum += parseInt(value.charAt(i), 10) * (i + 1);
                }
                sum = sum % 11;
                if (sum === 10) {
                    sum = 0;
                    for (i = 0; i < 8; i++) {
                        sum += parseInt(value.charAt(i), 10) * (i + 3);
                    }
                }
                sum = sum % 10;
                return (sum + '' === value.substr(8));
            }
            // Physical persons, foreigners and others
            else if (value.length === 10) {
                // Validate Bulgarian national identification numbers
                var egn = function(value) {
                        // Check the birth date
                        var year  = parseInt(value.substr(0, 2), 10) + 1900,
                            month = parseInt(value.substr(2, 2), 10),
                            day   = parseInt(value.substr(4, 2), 10);
                        if (month > 40) {
                            year += 100;
                            month -= 40;
                        } else if (month > 20) {
                            year -= 100;
                            month -= 20;
                        }

                        if (!FormValidation.Helper.date(year, month, day)) {
                            return false;
                        }

                        var sum    = 0,
                            weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];
                        for (var i = 0; i < 9; i++) {
                            sum += parseInt(value.charAt(i), 10) * weight[i];
                        }
                        sum = (sum % 11) % 10;
                        return (sum + '' === value.substr(9, 1));
                    },
                    // Validate Bulgarian personal number of a foreigner
                    pnf = function(value) {
                        var sum    = 0,
                            weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];
                        for (var i = 0; i < 9; i++) {
                            sum += parseInt(value.charAt(i), 10) * weight[i];
                        }
                        sum = sum % 10;
                        return (sum + '' === value.substr(9, 1));
                    },
                    // Finally, consider it as a VAT number
                    vat = function(value) {
                        var sum    = 0,
                            weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];
                        for (var i = 0; i < 9; i++) {
                            sum += parseInt(value.charAt(i), 10) * weight[i];
                        }
                        sum = 11 - sum % 11;
                        if (sum === 10) {
                            return false;
                        }
                        if (sum === 11) {
                            sum = 0;
                        }
                        return (sum + '' === value.substr(9, 1));
                    };
                return (egn(value) || pnf(value) || vat(value));
            }

            return false;
        },
        
        /**
         * Validate Brazilian VAT number (CNPJ)
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _br: function(value) {
            if (value === '') {
                return true;
            }
            var cnpj = value.replace(/[^\d]+/g, '');
            if (cnpj === '' || cnpj.length !== 14) {
                return false;
            }

            // Remove invalids CNPJs
            if (cnpj === '00000000000000' || cnpj === '11111111111111' || cnpj === '22222222222222' ||
                cnpj === '33333333333333' || cnpj === '44444444444444' || cnpj === '55555555555555' ||
                cnpj === '66666666666666' || cnpj === '77777777777777' || cnpj === '88888888888888' ||
                cnpj === '99999999999999')
            {
                return false;
            }

            // Validate verification digits
            var length  = cnpj.length - 2,
                numbers = cnpj.substring(0, length),
                digits  = cnpj.substring(length),
                sum     = 0,
                pos     = length - 7;

            for (var i = length; i >= 1; i--) {
                sum += parseInt(numbers.charAt(length - i), 10) * pos--;
                if (pos < 2) {
                    pos = 9;
                }
            }

            var result = sum % 11 < 2 ? 0 : 11 - sum % 11;
            if (result !== parseInt(digits.charAt(0), 10)) {
                return false;
            }

            length  = length + 1;
            numbers = cnpj.substring(0, length);
            sum     = 0;
            pos     = length - 7;
            for (i = length; i >= 1; i--) {
                sum += parseInt(numbers.charAt(length - i), 10) * pos--;
                if (pos < 2) {
                    pos = 9;
                }
            }

            result = sum % 11 < 2 ? 0 : 11 - sum % 11;
            return (result === parseInt(digits.charAt(1), 10));
        },

        /**
         * Validate Swiss VAT number
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ch: function(value) {
            if (/^CHE[0-9]{9}(MWST)?$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^E[0-9]{9}(MWST)?$/.test(value)) {
                return false;
            }

            value = value.substr(1);
            var sum    = 0,
                weight = [5, 4, 3, 2, 7, 6, 5, 4];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            sum = 11 - sum % 11;
            if (sum === 10) {
                return false;
            }
            if (sum === 11) {
                sum = 0;
            }

            return (sum + '' === value.substr(8, 1));
        },

        /**
         * Validate Cypriot VAT number
         * Examples:
         * - Valid: CY10259033P
         * - Invalid: CY10259033Z
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _cy: function(value) {
            if (/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {
                return false;
            }

            // Do not allow to start with "12"
            if (value.substr(0, 2) === '12') {
                return false;
            }

            // Extract the next digit and multiply by the counter.
            var sum         = 0,
                translation = {
                    '0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,
                    '5': 13, '6': 15, '7': 17, '8': 19, '9': 21
                };
            for (var i = 0; i < 8; i++) {
                var temp = parseInt(value.charAt(i), 10);
                if (i % 2 === 0) {
                    temp = translation[temp + ''];
                }
                sum += temp;
            }

            sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];
            return (sum + '' === value.substr(8, 1));
        },

        /**
         * Validate Czech Republic VAT number
         * Can be:
         * i) Legal entities (8 digit numbers)
         * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)
         * iii) Individuals without a RC (9 digit numbers beginning with 6)
         *
         * Examples:
         * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926
         * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _cz: function(value) {
            if (/^CZ[0-9]{8,10}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8,10}$/.test(value)) {
                return false;
            }

            var sum = 0,
                i   = 0;
            if (value.length === 8) {
                // Do not allow to start with '9'
                if (value.charAt(0) + '' === '9') {
                    return false;
                }

                sum = 0;
                for (i = 0; i < 7; i++) {
                    sum += parseInt(value.charAt(i), 10) * (8 - i);
                }
                sum = 11 - sum % 11;
                if (sum === 10) {
                    sum = 0;
                }
                if (sum === 11) {
                    sum = 1;
                }

                return (sum + '' === value.substr(7, 1));
            } else if (value.length === 9 && (value.charAt(0) + '' === '6')) {
                sum = 0;
                // Skip the first (which is 6)
                for (i = 0; i < 7; i++) {
                    sum += parseInt(value.charAt(i + 1), 10) * (8 - i);
                }
                sum = 11 - sum % 11;
                if (sum === 10) {
                    sum = 0;
                }
                if (sum === 11) {
                    sum = 1;
                }
                sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];
                return (sum + '' === value.substr(8, 1));
            } else if (value.length === 9 || value.length === 10) {
                // Validate Czech birth number (Rodné číslo), which is also national identifier
                var year  = 1900 + parseInt(value.substr(0, 2), 10),
                    month = parseInt(value.substr(2, 2), 10) % 50 % 20,
                    day   = parseInt(value.substr(4, 2), 10);
                if (value.length === 9) {
                    if (year >= 1980) {
                        year -= 100;
                    }
                    if (year > 1953) {
                        return false;
                    }
                } else if (year < 1954) {
                    year += 100;
                }

                if (!FormValidation.Helper.date(year, month, day)) {
                    return false;
                }

                // Check that the birth date is not in the future
                if (value.length === 10) {
                    var check = parseInt(value.substr(0, 9), 10) % 11;
                    if (year < 1985) {
                        check = check % 10;
                    }
                    return (check + '' === value.substr(9, 1));
                }

                return true;
            }

            return false;
        },

        /**
         * Validate German VAT number
         * Examples:
         * - Valid: DE136695976
         * - Invalid: DE136695978
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _de: function(value) {
            if (/^DE[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
                return false;
            }

            return FormValidation.Helper.mod11And10(value);
        },

        /**
         * Validate Danish VAT number
         * Example:
         * - Valid: DK13585628
         * - Invalid: DK13585627
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _dk: function(value) {
            if (/^DK[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [2, 7, 6, 5, 4, 3, 2, 1];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 11 === 0);
        },

        /**
         * Validate Estonian VAT number
         * Examples:
         * - Valid: EE100931558, EE100594102
         * - Invalid: EE100594103
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ee: function(value) {
            if (/^EE[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];
            for (var i = 0; i < 9; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 10 === 0);
        },

        /**
         * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)
         * Can be:
         * i) DNI (Documento nacional de identidad), for Spaniards
         * ii) NIE (Número de Identificación de Extranjeros), for foreigners
         * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others
         *
         * Examples:
         * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838
         * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _es: function(value) {
            if (/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {
                return false;
            }

            var dni = function(value) {
                    var check = parseInt(value.substr(0, 8), 10);
                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];
                    return (check + '' === value.substr(8, 1));
                },
                nie = function(value) {
                    var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');
                    check = parseInt(check, 10);
                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];
                    return (check + '' === value.substr(8, 1));
                },
                cif = function(value) {
                    var first = value.charAt(0), check;
                    if ('KLM'.indexOf(first) !== -1) {
                        // K: Spanish younger than 14 year old
                        // L: Spanish living outside Spain without DNI
                        // M: Granted the tax to foreigners who have no NIE
                        check = parseInt(value.substr(1, 8), 10);
                        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];
                        return (check + '' === value.substr(8, 1));
                    } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {
                        var sum    = 0,
                            weight = [2, 1, 2, 1, 2, 1, 2],
                            temp   = 0;

                        for (var i = 0; i < 7; i++) {
                            temp = parseInt(value.charAt(i + 1), 10) * weight[i];
                            if (temp > 9) {
                                temp = Math.floor(temp / 10) + temp % 10;
                            }
                            sum += temp;
                        }
                        sum = 10 - sum % 10;
                        return (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));
                    }

                    return false;
                };

            var first = value.charAt(0);
            if (/^[0-9]$/.test(first)) {
                return dni(value);
            } else if (/^[XYZ]$/.test(first)) {
                return nie(value);
            } else {
                return cif(value);
            }
        },

        /**
         * Validate Finnish VAT number
         * Examples:
         * - Valid: FI20774740
         * - Invalid: FI20774741
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _fi: function(value) {
            if (/^FI[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [7, 9, 10, 5, 8, 4, 2, 1];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 11 === 0);
        },

        /**
         * Validate French VAT number (TVA - taxe sur la valeur ajoutée)
         * It's constructed by a SIREN number, prefixed by two characters.
         *
         * Examples:
         * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782
         * - Invalid: FR84323140391
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _fr: function(value) {
            if (/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9A-Z]{2}[0-9]{9}$/.test(value)) {
                return false;
            }

            if (!FormValidation.Helper.luhn(value.substr(2))) {
                return false;
            }

            if (/^[0-9]{2}$/.test(value.substr(0, 2))) {
                // First two characters are digits
                return value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');
            } else {
                // The first characters cann't be O and I
                var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',
                    check;
                // First one is digit
                if (/^[0-9]{1}$/.test(value.charAt(0))) {
                    check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;
                } else {
                    check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;
                }
                return ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);
            }
        },

        /**
         * Validate United Kingdom VAT number
         * Example:
         * - Valid: GB980780684
         * - Invalid: GB802311781
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _gb: function(value) {
            if (/^GB[0-9]{9}$/.test(value)             /* Standard */
                || /^GB[0-9]{12}$/.test(value)         /* Branches */
                || /^GBGD[0-9]{3}$/.test(value)        /* Government department */
                || /^GBHA[0-9]{3}$/.test(value)        /* Health authority */
                || /^GB(GD|HA)8888[0-9]{5}$/.test(value))
            {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)
                && !/^[0-9]{12}$/.test(value)
                && !/^GD[0-9]{3}$/.test(value)
                && !/^HA[0-9]{3}$/.test(value)
                && !/^(GD|HA)8888[0-9]{5}$/.test(value))
            {
                return false;
            }

            var length = value.length;
            if (length === 5) {
                var firstTwo  = value.substr(0, 2),
                    lastThree = parseInt(value.substr(2), 10);
                return ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);
            } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {
                if (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)
                    || ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))
                {
                    return false;
                }
                return (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));
            } else if (length === 9 || length === 12) {
                var sum    = 0,
                    weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];
                for (var i = 0; i < 9; i++) {
                    sum += parseInt(value.charAt(i), 10) * weight[i];
                }
                sum = sum % 97;

                if (parseInt(value.substr(0, 3), 10) >= 100) {
                    return (sum === 0 || sum === 42 || sum === 55);
                } else {
                    return (sum === 0);
                }
            }

            return true;
        },

        /**
         * Validate Greek VAT number
         * Examples:
         * - Valid: GR023456780, EL094259216
         * - Invalid: EL123456781
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _gr: function(value) {
            if (/^(GR|EL)[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
                return false;
            }

            if (value.length === 8) {
                value = '0' + value;
            }

            var sum    = 0,
                weight = [256, 128, 64, 32, 16, 8, 4, 2];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = (sum % 11) % 10;

            return (sum + '' === value.substr(8, 1));
        },

        // EL is traditionally prefix of Greek VAT numbers
        _el: function(value) {
            return this._gr(value);
        },

        /**
         * Validate Hungarian VAT number
         * Examples:
         * - Valid: HU12892312
         * - Invalid: HU12892313
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _hu: function(value) {
            if (/^HU[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [9, 7, 3, 1, 9, 7, 3, 1];

            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 10 === 0);
        },

        /**
         * Validate Croatian VAT number
         * Examples:
         * - Valid: HR33392005961
         * - Invalid: HR33392005962
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _hr: function(value) {
            if (/^HR[0-9]{11}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }

            return FormValidation.Helper.mod11And10(value);
        },

        /**
         * Validate Irish VAT number
         * Examples:
         * - Valid: IE6433435F, IE6433435OA, IE8D79739I
         * - Invalid: IE8D79738J
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ie: function(value) {
            if (/^IE[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {
                return false;
            }

            var getCheckDigit = function(value) {
                while (value.length < 7) {
                    value = '0' + value;
                }
                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',
                    sum      = 0;
                for (var i = 0; i < 7; i++) {
                    sum += parseInt(value.charAt(i), 10) * (8 - i);
                }
                sum += 9 * alphabet.indexOf(value.substr(7));
                return alphabet[sum % 23];
            };

            // The first 7 characters are digits
            if (/^[0-9]+$/.test(value.substr(0, 7))) {
                // New system
                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');
            } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {
                // Old system
                return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');
            }

            return true;
        },

        /**
         * Validate Icelandic VAT (VSK) number
         * Examples:
         * - Valid: 12345, 123456
         * - Invalid: 1234567
         *
         * @params {String} value VAT number
         * @returns {Boolean}
         */
        _is: function(value) {
            if (/^IS[0-9]{5,6}$/.test(value)) {
                value = value.substr(2);
            }
            return /^[0-9]{5,6}$/.test(value);
        },

        /**
         * Validate Italian VAT number, which consists of 11 digits.
         * - First 7 digits are a company identifier
         * - Next 3 are the province of residence
         * - The last one is a check digit
         *
         * Examples:
         * - Valid: IT00743110157
         * - Invalid: IT00743110158
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _it: function(value) {
            if (/^IT[0-9]{11}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }

            if (parseInt(value.substr(0, 7), 10) === 0) {
                return false;
            }

            var lastThree = parseInt(value.substr(7, 3), 10);
            if ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {
                return false;
            }

            return FormValidation.Helper.luhn(value);
        },

        /**
         * Validate Lithuanian VAT number
         * It can be:
         * - 9 digits, for legal entities
         * - 12 digits, for temporarily registered taxpayers
         *
         * Examples:
         * - Valid: LT119511515, LT100001919017, LT100004801610
         * - Invalid: LT100001919018
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _lt: function(value) {
            if (/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {
                return false;
            }

            var length = value.length,
                sum    = 0,
                i;
            for (i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * (1 + i % 9);
            }
            var check = sum % 11;
            if (check === 10) {
                sum = 0;
                for (i = 0; i < length - 1; i++) {
                    sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);
                }
            }
            check = check % 11 % 10;
            return (check + '' === value.charAt(length - 1));
        },

        /**
         * Validate Luxembourg VAT number
         * Examples:
         * - Valid: LU15027442
         * - Invalid: LU15027443
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _lu: function(value) {
            if (/^LU[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8}$/.test(value)) {
                return false;
            }

            return ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));
        },

        /**
         * Validate Latvian VAT number
         * Examples:
         * - Valid: LV40003521600, LV16117519997
         * - Invalid: LV40003521601, LV16137519997
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _lv: function(value) {
            if (/^LV[0-9]{11}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{11}$/.test(value)) {
                return false;
            }

            var first  = parseInt(value.charAt(0), 10),
                sum    = 0,
                weight = [],
                i,
                length = value.length;
            if (first > 3) {
                // Legal entity
                sum    = 0;
                weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];
                for (i = 0; i < length; i++) {
                    sum += parseInt(value.charAt(i), 10) * weight[i];
                }
                sum = sum % 11;
                return (sum === 3);
            } else {
                // Check birth date
                var day   = parseInt(value.substr(0, 2), 10),
                    month = parseInt(value.substr(2, 2), 10),
                    year  = parseInt(value.substr(4, 2), 10);
                year = year + 1800 + parseInt(value.charAt(6), 10) * 100;

                if (!FormValidation.Helper.date(year, month, day)) {
                    return false;
                }

                // Check personal code
                sum    = 0;
                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];
                for (i = 0; i < length - 1; i++) {
                    sum += parseInt(value.charAt(i), 10) * weight[i];
                }
                sum = (sum + 1) % 11 % 10;
                return (sum + '' === value.charAt(length - 1));
            }
        },

        /**
         * Validate Maltese VAT number
         * Examples:
         * - Valid: MT11679112
         * - Invalid: MT11679113
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _mt: function(value) {
            if (/^MT[0-9]{8}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{8}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [3, 4, 6, 7, 8, 9, 10, 1];

            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 37 === 0);
        },

        /**
         * Validate Dutch VAT number
         * Examples:
         * - Valid: NL004495445B01
         * - Invalid: NL123456789B90
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _nl: function(value) {
            if (/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {
               value = value.substr(2);
            }
            if (!/^[0-9]{9}B[0-9]{2}$/.test(value)) {
               return false;
            }

            var sum    = 0,
                weight = [9, 8, 7, 6, 5, 4, 3, 2];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            sum = sum % 11;
            if (sum > 9) {
                sum = 0;
            }
            return (sum + '' === value.substr(8, 1));
        },

        /**
         * Validate Norwegian VAT number
         *
         * @see http://www.brreg.no/english/coordination/number.html
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _no: function(value) {
            if (/^NO[0-9]{9}$/.test(value)) {
               value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
               return false;
            }

            var sum    = 0,
                weight = [3, 2, 7, 6, 5, 4, 3, 2];
            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            sum = 11 - sum % 11;
            if (sum === 11) {
                sum = 0;
            }
            return (sum + '' === value.substr(8, 1));
        },

        /**
         * Validate Polish VAT number
         * Examples:
         * - Valid: PL8567346215
         * - Invalid: PL8567346216
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _pl: function(value) {
            if (/^PL[0-9]{10}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{10}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];

            for (var i = 0; i < 10; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            return (sum % 11 === 0);
        },

        /**
         * Validate Portuguese VAT number
         * Examples:
         * - Valid: PT501964843
         * - Invalid: PT501964842
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _pt: function(value) {
            if (/^PT[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
                return false;
            }

            var sum    = 0,
                weight = [9, 8, 7, 6, 5, 4, 3, 2];

            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = 11 - sum % 11;
            if (sum > 9) {
                sum = 0;
            }
            return (sum + '' === value.substr(8, 1));
        },

        /**
         * Validate Romanian VAT number
         * Examples:
         * - Valid: RO18547290
         * - Invalid: RO18547291
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ro: function(value) {
            if (/^RO[1-9][0-9]{1,9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[1-9][0-9]{1,9}$/.test(value)) {
                return false;
            }

            var length = value.length,
                weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),
                sum    = 0;
            for (var i = 0; i < length - 1; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }

            sum = (10 * sum) % 11 % 10;
            return (sum + '' === value.substr(length - 1, 1));
        },

        /**
         * Validate Russian VAT number (Taxpayer Identification Number - INN)
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ru: function(value) {
            if (/^RU([0-9]{10}|[0-9]{12})$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^([0-9]{10}|[0-9]{12})$/.test(value)) {
                return false;
            }

            var i = 0;
            if (value.length === 10) {
                var sum    = 0,
                    weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];
                for (i = 0; i < 10; i++) {
                    sum += parseInt(value.charAt(i), 10) * weight[i];
                }
                sum = sum % 11;
                if (sum > 9) {
                    sum = sum % 10;
                }

                return (sum + '' === value.substr(9, 1));
            } else if (value.length === 12) {
                var sum1    = 0,
                    weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],
                    sum2    = 0,
                    weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];

                for (i = 0; i < 11; i++) {
                    sum1 += parseInt(value.charAt(i), 10) * weight1[i];
                    sum2 += parseInt(value.charAt(i), 10) * weight2[i];
                }
                sum1 = sum1 % 11;
                if (sum1 > 9) {
                    sum1 = sum1 % 10;
                }
                sum2 = sum2 % 11;
                if (sum2 > 9) {
                    sum2 = sum2 % 10;
                }

                return (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));
            }

            return false;
        },

        /**
         * Validate Serbian VAT number
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _rs: function(value) {
            if (/^RS[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{9}$/.test(value)) {
                return false;
            }

            var sum  = 10,
                temp = 0;
            for (var i = 0; i < 8; i++) {
                temp = (parseInt(value.charAt(i), 10) + sum) % 10;
                if (temp === 0) {
                    temp = 10;
                }
                sum = (2 * temp) % 11;
            }

            return ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);
        },

        /**
         * Validate Swedish VAT number
         * Examples:
         * - Valid: SE123456789701
         * - Invalid: SE123456789101
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _se: function(value) {
            if (/^SE[0-9]{10}01$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[0-9]{10}01$/.test(value)) {
                return false;
            }

            value = value.substr(0, 10);
            return FormValidation.Helper.luhn(value);
        },

        /**
         * Validate Slovenian VAT number
         * Examples:
         * - Valid: SI50223054
         * - Invalid: SI50223055
         * - Invalid: SI09999990
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _si: function(value) {
            // The Slovenian VAT numbers don't start with zero
            var res = value.match(/^(SI)?([1-9][0-9]{7})$/);
            if (!res) {
                return false;
            }
            if (res[1]) {
                value = value.substr(2);
            }

            var sum    = 0,
                weight = [8, 7, 6, 5, 4, 3, 2];

            for (var i = 0; i < 7; i++) {
                sum += parseInt(value.charAt(i), 10) * weight[i];
            }
            sum = 11 - sum % 11;
            if (sum === 10) {
                sum = 0;
            }
            return (sum + '' === value.substr(7, 1));
        },

        /**
         * Validate Slovak VAT number
         * Examples:
         * - Valid: SK2022749619
         * - Invalid: SK2022749618
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _sk: function(value) {
            if (/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {
                return false;
            }

            return (parseInt(value, 10) % 11 === 0);
        },

        /**
         * Validate Venezuelan VAT number (RIF)
         * Examples:
         * - Valid: VEJ309272292, VEV242818101, VEJ000126518, VEJ000458324, J309272292, V242818101, J000126518, J000458324
         * - Invalid: VEJ309272293, VEV242818100, J000126519, J000458323
         *
         * @param {String} value VAT number
         * @returns {Boolean}
         */
        _ve: function(value) {
            if (/^VE[VEJPG][0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }
            if (!/^[VEJPG][0-9]{9}$/.test(value)) {
                return false;
            }

            var types  = {
                    'V': 4,
                    'E': 8,
                    'J': 12,
                    'P': 16,
                    'G': 20
                },
                sum    = types[value.charAt(0)],
                weight = [3, 2, 7, 6, 5, 4, 3, 2];

            for (var i = 0; i < 8; i++) {
                sum += parseInt(value.charAt(i + 1), 10) * weight[i];
            }

            sum = 11 - sum % 11;
            if (sum === 11 || sum === 10) {
                sum = 0;
            }
            return (sum + '' === value.substr(9, 1));
        },

        /**
         * Validate South African VAT number
         * Examples:
         * - Valid: 4012345678
         * - Invalid: 40123456789, 3012345678
         *
         * @params {String} value VAT number
         * @returns {Boolean}
         */
         _za: function(value) {
            if (/^ZA4[0-9]{9}$/.test(value)) {
                value = value.substr(2);
            }

            return /^4[0-9]{9}$/.test(value);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            vin: {
                'default': 'Please enter a valid VIN number'
            }
        }
    });

    FormValidation.Validator.vin = {
        /**
         * Validate an US VIN (Vehicle Identification Number)
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'vin');
            if (value === '') {
                return true;
            }

            // Don't accept I, O, Q characters
            if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {
                return false;
            }

            value = value.toUpperCase();
            var chars   = {
                    A: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,
                    J: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,
                            S: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,
                    '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0
                },
                weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],
                sum     = 0,
                length  = value.length;
            for (var i = 0; i < length; i++) {
                sum += chars[value.charAt(i) + ''] * weights[i];
            }

            var reminder = sum % 11;
            if (reminder === 10) {
                reminder = 'X';
            }

            return (reminder + '') === value.charAt(8);
        }
    };
}(jQuery));
;(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            zipCode: {
                'default': 'Please enter a valid postal code',
                country: 'Please enter a valid postal code in %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Canada',
                    CH: 'Switzerland',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IE: 'Ireland',
                    IN: 'India',
                    IT: 'Italy',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Sweden',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });

    FormValidation.Validator.zipCode = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        COUNTRY_CODES: ['AT', 'BG', 'BR', 'CA', 'CH', 'CZ', 'DE', 'DK', 'ES', 'FR', 'GB', 'IE', 'IN', 'IT', 'MA', 'NL', 'PL', 'PT', 'RO', 'RU', 'SE', 'SG', 'SK', 'US'],

        /**
         * Return true if and only if the input value is a valid country zip code
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The country
         *
         * The country can be defined by:
         * - An ISO 3166 country code
         * - Name of field which its value defines the country code
         * - Name of callback function that returns the country code
         * - A callback function that returns the country code
         *
         *  callback: function(value, validator, $field) {
         *      // value is the value of field
         *      // validator is the BootstrapValidator instance
         *      // $field is jQuery element representing the field
         *  }
         *
         * @returns {Boolean|Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'zipCode');
            if (value === '' || !options.country) {
                return true;
            }

            var locale  = validator.getLocale(),
                country = options.country;
            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {
                // Try to determine the country
                country = validator.getDynamicOption($field, country);
            }

            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {
                return true;
            }

            var isValid = false;
            country = country.toUpperCase();
            switch (country) {
                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Austria
                case 'AT':
                    isValid = /^([1-9]{1})(\d{3})$/.test(value);
                    break;

                case 'BG':
                    isValid = /^([1-9]{1}[0-9]{3})$/.test($.trim(value));
                    break;

                case 'BR':
                    isValid = /^(\d{2})([\.]?)(\d{3})([\-]?)(\d{3})$/.test(value);
                    break;

                case 'CA':
                    isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);
                    break;

                case 'CH':
                    isValid = /^([1-9]{1})(\d{3})$/.test(value);
                    break;

                case 'CZ':
                    // Test: http://regexr.com/39hhr
                    isValid = /^(\d{3})([ ]?)(\d{2})$/.test(value);
                    break;

                // http://stackoverflow.com/questions/7926687/regular-expression-german-zip-codes
                case 'DE':
                    isValid = /^(?!01000|99999)(0[1-9]\d{3}|[1-9]\d{4})$/.test(value);
                    break;

                case 'DK':
                    isValid = /^(DK(-|\s)?)?\d{4}$/i.test(value);
                    break;

                // Zip codes in Spain go from 01XXX to 52XXX.
                // Test: http://refiddle.com/1ufo
                case 'ES':
                    isValid = /^(?:0[1-9]|[1-4][0-9]|5[0-2])\d{3}$/.test(value);
                    break;

                // http://en.wikipedia.org/wiki/Postal_codes_in_France
                case 'FR':
                    isValid = /^[0-9]{5}$/i.test(value);
                    break;

                case 'GB':
                    isValid = this._gb(value);
                    break;

                // Indian PIN (Postal Index Number) validation
                // http://en.wikipedia.org/wiki/Postal_Index_Number
                // Test: http://regex101.com/r/kV0vH3/1
                case 'IN':
                    isValid = /^\d{3}\s?\d{3}$/.test(value);
                    break;

                // http://www.eircode.ie/docs/default-source/Common/prepare-your-business-for-eircode---published-v2.pdf?sfvrsn=2
                // Test: http://refiddle.com/1kpl
                case 'IE':
                    isValid = /^(D6W|[ACDEFHKNPRTVWXY]\d{2})\s[0-9ACDEFHKNPRTVWXY]{4}$/.test(value);
                    break;

                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy
                case 'IT':
                    isValid = /^(I-|IT-)?\d{5}$/i.test(value);
                    break;

                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Morocco
                case 'MA':
                    isValid = /^[1-9][0-9]{4}$/i.test(value);
                    break;

                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands
                case 'NL':
                    isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);
                    break;

                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Poland
                case 'PL':
                    isValid = /^[0-9]{2}\-[0-9]{3}$/.test(value);
                    break;

                // Test: http://refiddle.com/1l2t
                case 'PT':
                    isValid = /^[1-9]\d{3}-\d{3}$/.test(value);
                    break;

                case 'RO':
                    isValid = /^(0[1-8]{1}|[1-9]{1}[0-5]{1})?[0-9]{4}$/i.test(value);
                    break;

                case 'RU':
                    isValid = /^[0-9]{6}$/i.test(value);
                    break;

                case 'SE':
                    isValid = /^(S-)?\d{3}\s?\d{2}$/i.test(value);
                    break;

                case 'SG':
                    isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\d{4})$/i.test(value);
                    break;

                case 'SK':
                    // Test: http://regexr.com/39hhr
                    isValid = /^(\d{3})([ ]?)(\d{2})$/.test(value);
                    break;

                case 'US':
                /* falls through */
                default:
                    isValid = /^\d{4,5}([\-]?\d{4})?$/.test(value);
                    break;
            }

            return {
                valid: isValid,
                message: FormValidation.Helper.format(options.message || FormValidation.I18n[locale].zipCode.country, FormValidation.I18n[locale].zipCode.countries[country])
            };
        },

        /**
         * Validate United Kingdom postcode
         * Examples:
         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT
         * - Special cases:
         * AI-2640, ASCN 1ZZ, GIR 0AA
         *
         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom
         * @param {String} value The postcode
         * @returns {Boolean}
         */
        _gb: function(value) {
            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX
                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ
                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',
                fourthChar = '[ABEHMNPRVWXY]',
                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',
                regexps    = [
                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format
                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),
                    // ANA NAA
                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),
                    // AANA NAA
                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),

                    new RegExp('^(BF1)(\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes
                    /^(GIR)(\s*)(0AA)$/i,                       // Special postcode GIR 0AA
                    /^(BFPO)(\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers
                    /^(BFPO)(\s*)(c\/o\s*[0-9]{1,3})$/i,        // c/o BFPO numbers
                    /^([A-Z]{4})(\s*)(1ZZ)$/i,                  // Overseas Territories
                    /^(AI-2640)$/i                              // Anguilla
                ];
            for (var i = 0; i < regexps.length; i++) {
                if (regexps[i].test(value)) {
                    return true;
                }
            }

            return false;
        }
    };
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
if(window.FormValidation={AddOn:{},Framework:{},I18n:{},Validator:{}},"undefined"==typeof jQuery)throw new Error("FormValidation requires jQuery");!function(a){var b=a.fn.jquery.split(" ")[0].split(".");if(+b[0]<2&&+b[1]<9||1===+b[0]&&9===+b[1]&&+b[2]<1)throw new Error("FormValidation requires jQuery version 1.9.1 or higher")}(jQuery),function(a){FormValidation.Base=function(b,c,d){this.$form=a(b),this.options=a.extend({},a.fn.formValidation.DEFAULT_OPTIONS,c),this._namespace=d||"fv",this.$invalidFields=a([]),this.$submitButton=null,this.$hiddenButton=null,this.STATUS_NOT_VALIDATED="NOT_VALIDATED",this.STATUS_VALIDATING="VALIDATING",this.STATUS_INVALID="INVALID",this.STATUS_VALID="VALID";var e=function(){for(var a=3,b=document.createElement("div"),c=b.all||[];b.innerHTML="<!--[if gt IE "+ ++a+"]><br><![endif]-->",c[0];);return a>4?a:!a}(),f=document.createElement("div");this._changeEvent=9!==e&&"oninput"in f?"input":"keyup",this._submitIfValid=null,this._cacheFields={},this._init()},FormValidation.Base.prototype={constructor:FormValidation.Base,_exceedThreshold:function(b){var c=this._namespace,d=b.attr("data-"+c+"-field"),e=this.options.fields[d].threshold||this.options.threshold;if(!e)return!0;var f=-1!==a.inArray(b.attr("type"),["button","checkbox","file","hidden","image","radio","reset","submit"]);return f||b.val().length>=e},_init:function(){var b=this,c=this._namespace,d={addOns:{},autoFocus:this.$form.attr("data-"+c+"-autofocus"),button:{selector:this.$form.attr("data-"+c+"-button-selector")||this.$form.attr("data-"+c+"-submitbuttons"),disabled:this.$form.attr("data-"+c+"-button-disabled")},control:{valid:this.$form.attr("data-"+c+"-control-valid"),invalid:this.$form.attr("data-"+c+"-control-invalid")},err:{clazz:this.$form.attr("data-"+c+"-err-clazz"),container:this.$form.attr("data-"+c+"-err-container")||this.$form.attr("data-"+c+"-container"),parent:this.$form.attr("data-"+c+"-err-parent")},events:{formInit:this.$form.attr("data-"+c+"-events-form-init"),formError:this.$form.attr("data-"+c+"-events-form-error"),formSuccess:this.$form.attr("data-"+c+"-events-form-success"),fieldAdded:this.$form.attr("data-"+c+"-events-field-added"),fieldRemoved:this.$form.attr("data-"+c+"-events-field-removed"),fieldInit:this.$form.attr("data-"+c+"-events-field-init"),fieldError:this.$form.attr("data-"+c+"-events-field-error"),fieldSuccess:this.$form.attr("data-"+c+"-events-field-success"),fieldStatus:this.$form.attr("data-"+c+"-events-field-status"),localeChanged:this.$form.attr("data-"+c+"-events-locale-changed"),validatorError:this.$form.attr("data-"+c+"-events-validator-error"),validatorSuccess:this.$form.attr("data-"+c+"-events-validator-success")},excluded:this.$form.attr("data-"+c+"-excluded"),icon:{valid:this.$form.attr("data-"+c+"-icon-valid")||this.$form.attr("data-"+c+"-feedbackicons-valid"),invalid:this.$form.attr("data-"+c+"-icon-invalid")||this.$form.attr("data-"+c+"-feedbackicons-invalid"),validating:this.$form.attr("data-"+c+"-icon-validating")||this.$form.attr("data-"+c+"-feedbackicons-validating"),feedback:this.$form.attr("data-"+c+"-icon-feedback")},live:this.$form.attr("data-"+c+"-live"),locale:this.$form.attr("data-"+c+"-locale"),message:this.$form.attr("data-"+c+"-message"),onError:this.$form.attr("data-"+c+"-onerror"),onSuccess:this.$form.attr("data-"+c+"-onsuccess"),row:{selector:this.$form.attr("data-"+c+"-row-selector")||this.$form.attr("data-"+c+"-group"),valid:this.$form.attr("data-"+c+"-row-valid"),invalid:this.$form.attr("data-"+c+"-row-invalid"),feedback:this.$form.attr("data-"+c+"-row-feedback")},threshold:this.$form.attr("data-"+c+"-threshold"),trigger:this.$form.attr("data-"+c+"-trigger"),verbose:this.$form.attr("data-"+c+"-verbose"),fields:{}};this.$form.attr("novalidate","novalidate").addClass(this.options.elementClass).on("submit."+c,function(a){a.preventDefault(),b.validate()}).on("click."+c,this.options.button.selector,function(){b.$submitButton=a(this),b._submitIfValid=!0}),(this.options.declarative===!0||"true"===this.options.declarative)&&this.$form.find("[name], [data-"+c+"-field]").each(function(){var e=a(this),f=e.attr("name")||e.attr("data-"+c+"-field"),g=b._parseOptions(e);g&&(e.attr("data-"+c+"-field",f),d.fields[f]=a.extend({},g,d.fields[f]))}),this.options=a.extend(!0,this.options,d),"string"==typeof this.options.err.parent&&(this.options.err.parent=new RegExp(this.options.err.parent)),this.options.container&&(this.options.err.container=this.options.container,delete this.options.container),this.options.feedbackIcons&&(this.options.icon=a.extend(!0,this.options.icon,this.options.feedbackIcons),delete this.options.feedbackIcons),this.options.group&&(this.options.row.selector=this.options.group,delete this.options.group),this.options.submitButtons&&(this.options.button.selector=this.options.submitButtons,delete this.options.submitButtons),FormValidation.I18n[this.options.locale]||(this.options.locale=a.fn.formValidation.DEFAULT_OPTIONS.locale),(this.options.declarative===!0||"true"===this.options.declarative)&&(this.options=a.extend(!0,this.options,{addOns:this._parseAddOnOptions()})),this.$hiddenButton=a("<button/>").attr("type","submit").prependTo(this.$form).addClass("fv-hidden-submit").css({display:"none",width:0,height:0}),this.$form.on("click."+this._namespace,'[type="submit"]',function(c){if(!c.isDefaultPrevented()){var d=a(c.target),e=d.is('[type="submit"]')?d.eq(0):d.parent('[type="submit"]').eq(0);!b.options.button.selector||e.is(b.options.button.selector)||e.is(b.$hiddenButton)||b.$form.off("submit."+b._namespace).submit()}});for(var e in this.options.fields)this._initField(e);for(var f in this.options.addOns)"function"==typeof FormValidation.AddOn[f].init&&FormValidation.AddOn[f].init(this,this.options.addOns[f]);this.$form.trigger(a.Event(this.options.events.formInit),{bv:this,fv:this,options:this.options}),this.options.onSuccess&&this.$form.on(this.options.events.formSuccess,function(a){FormValidation.Helper.call(b.options.onSuccess,[a])}),this.options.onError&&this.$form.on(this.options.events.formError,function(a){FormValidation.Helper.call(b.options.onError,[a])})},_initField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b),d.attr("data-"+c+"-field",b)}if(0!==d.length&&null!==this.options.fields[b]&&null!==this.options.fields[b].validators){var e;for(e in this.options.fields[b].validators)FormValidation.Validator[e]||delete this.options.fields[b].validators[e];null===this.options.fields[b].enabled&&(this.options.fields[b].enabled=!0);for(var f=this,g=d.length,h=d.attr("type"),i=1===g||"radio"===h||"checkbox"===h,j=this._getFieldTrigger(d.eq(0)),k=a.map(j,function(a){return a+".update."+c}).join(" "),l=0;g>l;l++){var m=d.eq(l),n=this.options.fields[b].row||this.options.row.selector,o=m.closest(n),p="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,m,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,q=p&&"tooltip"!==p&&"popover"!==p?a(p):this._getMessageContainer(m,n);p&&"tooltip"!==p&&"popover"!==p&&q.addClass(this.options.err.clazz),q.find("."+this.options.err.clazz.split(" ").join(".")+"[data-"+c+"-validator][data-"+c+'-for="'+b+'"]').remove(),o.find("i[data-"+c+'-icon-for="'+b+'"]').remove(),m.off(k).on(k,function(){f.updateStatus(a(this),f.STATUS_NOT_VALIDATED)}),m.data(c+".messages",q);for(e in this.options.fields[b].validators)m.data(c+".result."+e,this.STATUS_NOT_VALIDATED),i&&l!==g-1||a("<small/>").css("display","none").addClass(this.options.err.clazz).attr("data-"+c+"-validator",e).attr("data-"+c+"-for",b).attr("data-"+c+"-result",this.STATUS_NOT_VALIDATED).html(this._getMessage(b,e)).appendTo(q),"function"==typeof FormValidation.Validator[e].init&&FormValidation.Validator[e].init(this,m,this.options.fields[b].validators[e]);if(this.options.fields[b].icon!==!1&&"false"!==this.options.fields[b].icon&&this.options.icon&&this.options.icon.valid&&this.options.icon.invalid&&this.options.icon.validating&&(!i||l===g-1)){o.addClass(this.options.row.feedback);var r=a("<i/>").css("display","none").addClass(this.options.icon.feedback).attr("data-"+c+"-icon-for",b).insertAfter(m);(i?d:m).data(c+".icon",r),("tooltip"===p||"popover"===p)&&((i?d:m).on(this.options.events.fieldError,function(){o.addClass("fv-has-tooltip")}).on(this.options.events.fieldSuccess,function(){o.removeClass("fv-has-tooltip")}),m.off("focus.container."+c).on("focus.container."+c,function(){f._showTooltip(m,p)}).off("blur.container."+c).on("blur.container."+c,function(){f._hideTooltip(m,p)})),"string"==typeof this.options.fields[b].icon&&"true"!==this.options.fields[b].icon?r.appendTo(a(this.options.fields[b].icon)):this._fixIcon(m,r)}}d.on(this.options.events.fieldSuccess,function(a,b){var c=f.getOptions(b.field,null,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldError,function(a,b){var c=f.getOptions(b.field,null,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.fieldStatus,function(a,b){var c=f.getOptions(b.field,null,"onStatus");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorError,function(a,b){var c=f.getOptions(b.field,b.validator,"onError");c&&FormValidation.Helper.call(c,[a,b])}).on(this.options.events.validatorSuccess,function(a,b){var c=f.getOptions(b.field,b.validator,"onSuccess");c&&FormValidation.Helper.call(c,[a,b])}),this.onLiveChange(d,"live",function(){f._exceedThreshold(a(this))&&f.validateField(a(this))}),d.trigger(a.Event(this.options.events.fieldInit),{bv:this,fv:this,field:b,element:d})}},_isExcluded:function(b){var c=this._namespace,d=b.attr("data-"+c+"-excluded"),e=b.attr("data-"+c+"-field")||b.attr("name");switch(!0){case!!e&&this.options.fields&&this.options.fields[e]&&("true"===this.options.fields[e].excluded||this.options.fields[e].excluded===!0):case"true"===d:case""===d:return!0;case!!e&&this.options.fields&&this.options.fields[e]&&("false"===this.options.fields[e].excluded||this.options.fields[e].excluded===!1):case"false"===d:return!1;default:if(this.options.excluded){"string"==typeof this.options.excluded&&(this.options.excluded=a.map(this.options.excluded.split(","),function(b){return a.trim(b)}));for(var f=this.options.excluded.length,g=0;f>g;g++)if("string"==typeof this.options.excluded[g]&&b.is(this.options.excluded[g])||"function"==typeof this.options.excluded[g]&&this.options.excluded[g].call(this,b,this)===!0)return!0}return!1}},_getFieldTrigger:function(a){var b=this._namespace,c=a.data(b+".trigger");if(c)return c;var d=a.attr("type"),e=a.attr("data-"+b+"-field"),f="radio"===d||"checkbox"===d||"file"===d||"SELECT"===a.get(0).tagName?"change":this._changeEvent;return c=((this.options.fields[e]?this.options.fields[e].trigger:null)||this.options.trigger||f).split(" "),a.data(b+".trigger",c),c},_getMessage:function(a,b){if(!(this.options.fields[a]&&FormValidation.Validator[b]&&this.options.fields[a].validators&&this.options.fields[a].validators[b]))return"";switch(!0){case!!this.options.fields[a].validators[b].message:return this.options.fields[a].validators[b].message;case!!this.options.fields[a].message:return this.options.fields[a].message;case!!FormValidation.I18n[this.options.locale]&&!!FormValidation.I18n[this.options.locale][b]&&!!FormValidation.I18n[this.options.locale][b]["default"]:return FormValidation.I18n[this.options.locale][b]["default"];default:return this.options.message}},_getMessageContainer:function(a,b){if(!this.options.err.parent)throw new Error("The err.parent option is not defined");var c=a.parent();if(c.is(b))return c;var d=c.attr("class");return d&&this.options.err.parent.test(d)?c:this._getMessageContainer(c,b)},_parseAddOnOptions:function(){var a=this._namespace,b=this.$form.attr("data-"+a+"-addons"),c=this.options.addOns||{};if(b){b=b.replace(/\s/g,"").split(",");for(var d=0;d<b.length;d++)c[b[d]]||(c[b[d]]={})}var e,f,g,h;for(e in c)if(FormValidation.AddOn[e]){if(f=FormValidation.AddOn[e].html5Attributes)for(g in f)h=this.$form.attr("data-"+a+"-addons-"+e.toLowerCase()+"-"+g.toLowerCase()),h&&(c[e][f[g]]=h)}else delete c[e];return c},_parseOptions:function(b){var c,d,e,f,g,h,i,j,k,l=this._namespace,m=b.attr("name")||b.attr("data-"+l+"-field"),n={};for(d in FormValidation.Validator)if(c=FormValidation.Validator[d],e="data-"+l+"-"+d.toLowerCase(),f=b.attr(e)+"",k="function"==typeof c.enableByHtml5?c.enableByHtml5(b):null,k&&"false"!==f||k!==!0&&(""===f||"true"===f||e===f.toLowerCase())){c.html5Attributes=a.extend({},{message:"message",onerror:"onError",onsuccess:"onSuccess",transformer:"transformer"},c.html5Attributes),n[d]=a.extend({},k===!0?{}:k,n[d]);for(j in c.html5Attributes)g=c.html5Attributes[j],h="data-"+l+"-"+d.toLowerCase()+"-"+j,i=b.attr(h),i&&("true"===i||h===i.toLowerCase()?i=!0:"false"===i&&(i=!1),n[d][g]=i)}var o={autoFocus:b.attr("data-"+l+"-autofocus"),err:b.attr("data-"+l+"-err-container")||b.attr("data-"+l+"-container"),excluded:b.attr("data-"+l+"-excluded"),icon:b.attr("data-"+l+"-icon")||b.attr("data-"+l+"-feedbackicons")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].feedbackIcons:null),message:b.attr("data-"+l+"-message"),onError:b.attr("data-"+l+"-onerror"),onStatus:b.attr("data-"+l+"-onstatus"),onSuccess:b.attr("data-"+l+"-onsuccess"),row:b.attr("data-"+l+"-row")||b.attr("data-"+l+"-group")||(this.options.fields&&this.options.fields[m]?this.options.fields[m].group:null),selector:b.attr("data-"+l+"-selector"),threshold:b.attr("data-"+l+"-threshold"),transformer:b.attr("data-"+l+"-transformer"),trigger:b.attr("data-"+l+"-trigger"),verbose:b.attr("data-"+l+"-verbose"),validators:n},p=a.isEmptyObject(o),q=a.isEmptyObject(n);return!q||!p&&this.options.fields&&this.options.fields[m]?(o.validators=n,o):null},_submit:function(){var b=this.isValid();if(null!==b){var c=b?this.options.events.formSuccess:this.options.events.formError,d=a.Event(c);this.$form.trigger(d),this.$submitButton&&(b?this._onSuccess(d):this._onError(d))}},_onError:function(b){if(!b.isDefaultPrevented()){if("submitted"===this.options.live){this.options.live="enabled";var c=this;for(var d in this.options.fields)!function(b){var d=c.getFieldElements(b);d.length&&c.onLiveChange(d,"live",function(){c._exceedThreshold(a(this))&&c.validateField(a(this))})}(d)}for(var e=this._namespace,f=0;f<this.$invalidFields.length;f++){var g=this.$invalidFields.eq(f),h=this.isOptionEnabled(g.attr("data-"+e+"-field"),"autoFocus");if(h){g.focus();break}}}},_onFieldValidated:function(b,c){var d=this._namespace,e=b.attr("data-"+d+"-field"),f=this.options.fields[e].validators,g={},h=0,i={bv:this,fv:this,field:e,element:b,validator:c,result:b.data(d+".response."+c)};if(c)switch(b.data(d+".result."+c)){case this.STATUS_INVALID:b.trigger(a.Event(this.options.events.validatorError),i);break;case this.STATUS_VALID:b.trigger(a.Event(this.options.events.validatorSuccess),i)}g[this.STATUS_NOT_VALIDATED]=0,g[this.STATUS_VALIDATING]=0,g[this.STATUS_INVALID]=0,g[this.STATUS_VALID]=0;for(var j in f)if(f[j].enabled!==!1){h++;var k=b.data(d+".result."+j);k&&g[k]++}g[this.STATUS_VALID]===h?(this.$invalidFields=this.$invalidFields.not(b),b.trigger(a.Event(this.options.events.fieldSuccess),i)):(0===g[this.STATUS_NOT_VALIDATED]||!this.isOptionEnabled(e,"verbose"))&&0===g[this.STATUS_VALIDATING]&&g[this.STATUS_INVALID]>0&&(this.$invalidFields=this.$invalidFields.add(b),b.trigger(a.Event(this.options.events.fieldError),i))},_onSuccess:function(a){a.isDefaultPrevented()||this.disableSubmitButtons(!0).defaultSubmit()},_fixIcon:function(){},_createTooltip:function(){},_destroyTooltip:function(){},_hideTooltip:function(){},_showTooltip:function(){},defaultSubmit:function(){var b=this._namespace;this.$submitButton&&a("<input/>").attr({type:"hidden",name:this.$submitButton.attr("name")}).attr("data-"+b+"-submit-hidden","").val(this.$submitButton.val()).appendTo(this.$form),this.$form.off("submit."+b).submit()},disableSubmitButtons:function(a){return a?"disabled"!==this.options.live&&this.$form.find(this.options.button.selector).attr("disabled","disabled").addClass(this.options.button.disabled):this.$form.find(this.options.button.selector).removeAttr("disabled").removeClass(this.options.button.disabled),this},getFieldElements:function(b){if(!this._cacheFields[b])if(this.options.fields[b]&&this.options.fields[b].selector){var c=this.$form.find(this.options.fields[b].selector);this._cacheFields[b]=c.length?c:a(this.options.fields[b].selector)}else this._cacheFields[b]=this.$form.find('[name="'+b+'"]');return this._cacheFields[b]},getFieldValue:function(a,b){var c,d=this._namespace;if("string"==typeof a){if(c=this.getFieldElements(a),0===c.length)return null}else c=a,a=c.attr("data-"+d+"-field");if(!a||!this.options.fields[a])return c.val();var e=(this.options.fields[a].validators&&this.options.fields[a].validators[b]?this.options.fields[a].validators[b].transformer:null)||this.options.fields[a].transformer;return e?FormValidation.Helper.call(e,[c,b,this]):c.val()},getNamespace:function(){return this._namespace},getOptions:function(a,b,c){var d=this._namespace;if(!a)return c?this.options[c]:this.options;if("object"==typeof a&&(a=a.attr("data-"+d+"-field")),!this.options.fields[a])return null;var e=this.options.fields[a];return b?e.validators&&e.validators[b]?c?e.validators[b][c]:e.validators[b]:null:c?e[c]:e},getStatus:function(a,b){var c=this._namespace;switch(typeof a){case"object":return a.data(c+".result."+b);case"string":default:return this.getFieldElements(a).eq(0).data(c+".result."+b)}},isOptionEnabled:function(a,b){return!this.options.fields[a]||"true"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!0?!this.options.fields[a]||"false"!==this.options.fields[a][b]&&this.options.fields[a][b]!==!1?"true"===this.options[b]||this.options[b]===!0:!1:!0},isValid:function(){for(var a in this.options.fields){var b=this.isValidField(a);if(null===b)return null;if(b===!1)return!1}return!0},isValidContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return!0;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=0;g>h;h++){var i=e[h],j=i.attr("data-"+d+"-field"),k=i.data(d+".messages").find("."+this.options.err.clazz.split(" ").join(".")+"[data-"+d+"-validator][data-"+d+'-for="'+j+'"]');if(k.filter("[data-"+d+'-result="'+this.STATUS_INVALID+'"]').length>0)return!1;if(k.filter("[data-"+d+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0||k.filter("[data-"+d+'-result="'+this.STATUS_VALIDATING+'"]').length>0)return null}return!0},isValidField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||this.options.fields[b].enabled===!1)return!0;for(var e,f,g,h=d.attr("type"),i="radio"===h||"checkbox"===h?1:d.length,j=0;i>j;j++)if(e=d.eq(j),!this._isExcluded(e))for(f in this.options.fields[b].validators)if(this.options.fields[b].validators[f].enabled!==!1){if(g=e.data(c+".result."+f),g===this.STATUS_VALIDATING||g===this.STATUS_NOT_VALIDATED)return null;if(g===this.STATUS_INVALID)return!1}return!0},offLiveChange:function(b,c){if(null===b||0===b.length)return this;var d=this._namespace,e=this._getFieldTrigger(b.eq(0)),f=a.map(e,function(a){return a+"."+c+"."+d}).join(" ");return b.off(f),this},onLiveChange:function(b,c,d){if(null===b||0===b.length)return this;var e=this._namespace,f=this._getFieldTrigger(b.eq(0)),g=a.map(f,function(a){return a+"."+c+"."+e}).join(" ");switch(this.options.live){case"submitted":break;case"disabled":b.off(g);break;case"enabled":default:b.off(g).on(g,function(){d.apply(this,arguments)})}return this},updateMessage:function(b,c,d){var e=this,f=this._namespace,g=a([]);switch(typeof b){case"object":g=b,b=b.attr("data-"+f+"-field");break;case"string":g=this.getFieldElements(b)}g.each(function(){a(this).data(f+".messages").find("."+e.options.err.clazz+"[data-"+f+'-validator="'+c+'"][data-'+f+'-for="'+b+'"]').html(d)})},updateStatus:function(b,c,d){var e=this._namespace,f=a([]);switch(typeof b){case"object":f=b,b=b.attr("data-"+e+"-field");break;case"string":f=this.getFieldElements(b)}if(!b||!this.options.fields[b])return this;c===this.STATUS_NOT_VALIDATED&&(this._submitIfValid=!1);for(var g=this,h=f.attr("type"),i=this.options.fields[b].row||this.options.row.selector,j="radio"===h||"checkbox"===h?1:f.length,k=0;j>k;k++){var l=f.eq(k);if(!this._isExcluded(l)){var m=l.closest(i),n=l.data(e+".messages"),o=n.find("."+this.options.err.clazz.split(" ").join(".")+"[data-"+e+"-validator][data-"+e+'-for="'+b+'"]'),p=d?o.filter("[data-"+e+'-validator="'+d+'"]'):o,q=l.data(e+".icon"),r="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,l,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container,s=null;if(d)l.data(e+".result."+d,c);else for(var t in this.options.fields[b].validators)l.data(e+".result."+t,c);switch(p.attr("data-"+e+"-result",c),c){case this.STATUS_VALIDATING:s=null,this.disableSubmitButtons(!0),l.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),m.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),q&&q.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).addClass(this.options.icon.validating).show();break;case this.STATUS_INVALID:s=!1,this.disableSubmitButtons(!0),l.removeClass(this.options.control.valid).addClass(this.options.control.invalid),m.removeClass(this.options.row.valid).addClass(this.options.row.invalid),q&&q.removeClass(this.options.icon.valid).removeClass(this.options.icon.validating).addClass(this.options.icon.invalid).show();break;case this.STATUS_VALID:var u=o.filter("[data-"+e+'-result="'+this.STATUS_VALIDATING+'"]').length>0,v=o.filter("[data-"+e+'-result="'+this.STATUS_NOT_VALIDATED+'"]').length>0;s=u||v?null:o.filter("[data-"+e+'-result="'+this.STATUS_VALID+'"]').length===o.length,l.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),s===!0?(this.disableSubmitButtons(this.isValid()===!1),l.addClass(this.options.control.valid)):s===!1&&(this.disableSubmitButtons(!0),l.addClass(this.options.control.invalid)),q&&q.removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).removeClass(this.options.icon.valid).addClass(null===s?"":s?this.options.icon.valid:u?this.options.icon.validating:this.options.icon.invalid).show();var w=this.isValidContainer(m);null!==w&&m.removeClass(this.options.row.valid).removeClass(this.options.row.invalid).addClass(w?this.options.row.valid:this.options.row.invalid);break;case this.STATUS_NOT_VALIDATED:default:s=null,this.disableSubmitButtons(!1),l.removeClass(this.options.control.valid).removeClass(this.options.control.invalid),m.removeClass(this.options.row.valid).removeClass(this.options.row.invalid),q&&q.removeClass(this.options.icon.valid).removeClass(this.options.icon.invalid).removeClass(this.options.icon.validating).hide()}!q||"tooltip"!==r&&"popover"!==r?c===this.STATUS_INVALID?p.show():p.hide():s===!1?this._createTooltip(l,o.filter("[data-"+e+'-result="'+g.STATUS_INVALID+'"]').eq(0).html(),r):this._destroyTooltip(l,r),l.trigger(a.Event(this.options.events.fieldStatus),{bv:this,fv:this,field:b,element:l,status:c}),this._onFieldValidated(l,d)}}return this},validate:function(){if(a.isEmptyObject(this.options.fields))return this._submit(),this;this.disableSubmitButtons(!0),this._submitIfValid=!1;for(var b in this.options.fields)this.validateField(b);return this._submit(),this._submitIfValid=!0,this},validateField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field");break;case"string":d=this.getFieldElements(b)}if(0===d.length||!this.options.fields[b]||this.options.fields[b].enabled===!1)return this;for(var e,f,g=this,h=d.attr("type"),i="radio"===h||"checkbox"===h?1:d.length,j="radio"===h||"checkbox"===h,k=this.options.fields[b].validators,l=this.isOptionEnabled(b,"verbose"),m=0;i>m;m++){var n=d.eq(m);if(!this._isExcluded(n)){var o=!1;for(e in k){if(n.data(c+".dfs."+e)&&n.data(c+".dfs."+e).reject(),o)break;var p=n.data(c+".result."+e);if(p!==this.STATUS_VALID&&p!==this.STATUS_INVALID)if(k[e].enabled!==!1){if(n.data(c+".result."+e,this.STATUS_VALIDATING),f=FormValidation.Validator[e].validate(this,n,k[e]),"object"==typeof f&&f.resolve)this.updateStatus(j?b:n,this.STATUS_VALIDATING,e),n.data(c+".dfs."+e,f),f.done(function(a,b,d){a.removeData(c+".dfs."+b).data(c+".response."+b,d),d.message&&g.updateMessage(a,b,d.message),g.updateStatus(j?a.attr("data-"+c+"-field"):a,d.valid?g.STATUS_VALID:g.STATUS_INVALID,b),d.valid&&g._submitIfValid===!0?g._submit():d.valid||l||(o=!0)});else if("object"==typeof f&&void 0!==f.valid){if(n.data(c+".response."+e,f),f.message&&this.updateMessage(j?b:n,e,f.message),this.updateStatus(j?b:n,f.valid?this.STATUS_VALID:this.STATUS_INVALID,e),!f.valid&&!l)break}else if("boolean"==typeof f&&(n.data(c+".response."+e,f),this.updateStatus(j?b:n,f?this.STATUS_VALID:this.STATUS_INVALID,e),!f&&!l))break}else this.updateStatus(j?b:n,this.STATUS_VALID,e);else this._onFieldValidated(n,e)}}}return this},addField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field")||b.attr("name");break;case"string":delete this._cacheFields[b],e=this.getFieldElements(b)}e.attr("data-"+d+"-field",b);for(var f=e.attr("type"),g="radio"===f||"checkbox"===f?1:e.length,h=0;g>h;h++){var i=e.eq(h),j=this._parseOptions(i);j=null===j?c:a.extend(!0,c,j),this.options.fields[b]=a.extend(!0,this.options.fields[b],j),this._cacheFields[b]=this._cacheFields[b]?this._cacheFields[b].add(i):i,this._initField("checkbox"===f||"radio"===f?b:i)}return this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldAdded),{field:b,element:e,options:this.options.fields[b]}),this},destroy:function(){var a,b,c,d,e,f,g,h=this._namespace;for(b in this.options.fields)for(c=this.getFieldElements(b),a=0;a<c.length;a++){d=c.eq(a);for(e in this.options.fields[b].validators)d.data(h+".dfs."+e)&&d.data(h+".dfs."+e).reject(),d.removeData(h+".result."+e).removeData(h+".response."+e).removeData(h+".dfs."+e),"function"==typeof FormValidation.Validator[e].destroy&&FormValidation.Validator[e].destroy(this,d,this.options.fields[b].validators[e])}for(b in this.options.fields)for(c=this.getFieldElements(b),g=this.options.fields[b].row||this.options.row.selector,a=0;a<c.length;a++){d=c.eq(a),d.data(h+".messages").find("."+this.options.err.clazz.split(" ").join(".")+"[data-"+h+"-validator][data-"+h+'-for="'+b+'"]').remove().end().end().removeData(h+".messages").closest(g).removeClass(this.options.row.valid).removeClass(this.options.row.invalid).removeClass(this.options.row.feedback).end().off("."+h).removeAttr("data-"+h+"-field");var i="function"==typeof(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container)?(this.options.fields[b].container||this.options.fields[b].err||this.options.err.container).call(this,d,this):this.options.fields[b].container||this.options.fields[b].err||this.options.err.container;("tooltip"===i||"popover"===i)&&this._destroyTooltip(d,i),f=d.data(h+".icon"),f&&f.remove(),d.removeData(h+".icon").removeData(h+".trigger")}for(var j in this.options.addOns)"function"==typeof FormValidation.AddOn[j].destroy&&FormValidation.AddOn[j].destroy(this,this.options.addOns[j]);this.disableSubmitButtons(!1),this.$hiddenButton.remove(),this.$form.removeClass(this.options.elementClass).off("."+h).removeData("bootstrapValidator").removeData("formValidation").find("[data-"+h+"-submit-hidden]").remove().end().find('[type="submit"]').off("click."+h)},enableFieldValidators:function(a,b,c){var d=this.options.fields[a].validators;if(c&&d&&d[c]&&d[c].enabled!==b)this.options.fields[a].validators[c].enabled=b,this.updateStatus(a,this.STATUS_NOT_VALIDATED,c);else if(!c&&this.options.fields[a].enabled!==b){this.options.fields[a].enabled=b;for(var e in d)this.enableFieldValidators(a,b,e)}return this},getDynamicOption:function(a,b){var c="string"==typeof a?this.getFieldElements(a):a,d=c.val();if("function"==typeof b)return FormValidation.Helper.call(b,[d,this,c]);if("string"==typeof b){var e=this.getFieldElements(b);return e.length?e.val():FormValidation.Helper.call(b,[d,this,c])||b}return null},getForm:function(){return this.$form},getInvalidFields:function(){return this.$invalidFields},getLocale:function(){return this.options.locale},getMessages:function(b,c){var d=this,e=this._namespace,f=[],g=a([]);switch(!0){case b&&"object"==typeof b:g=b;break;case b&&"string"==typeof b:var h=this.getFieldElements(b);if(h.length>0){var i=h.attr("type");g="radio"===i||"checkbox"===i?h.eq(0):h}break;default:g=this.$invalidFields}var j=c?"[data-"+e+'-validator="'+c+'"]':"";return g.each(function(){f=f.concat(a(this).data(e+".messages").find("."+d.options.err.clazz+"[data-"+e+'-for="'+a(this).attr("data-"+e+"-field")+'"][data-'+e+'-result="'+d.STATUS_INVALID+'"]'+j).map(function(){var b=a(this).attr("data-"+e+"-validator"),c=a(this).attr("data-"+e+"-for");return d.options.fields[c].validators[b].enabled===!1?"":a(this).html()}).get())}),f},getSubmitButton:function(){return this.$submitButton},removeField:function(b){var c=this._namespace,d=a([]);switch(typeof b){case"object":d=b,b=b.attr("data-"+c+"-field")||b.attr("name"),d.attr("data-"+c+"-field",b);break;case"string":d=this.getFieldElements(b)}if(0===d.length)return this;for(var e=d.attr("type"),f="radio"===e||"checkbox"===e?1:d.length,g=0;f>g;g++){var h=d.eq(g);this.$invalidFields=this.$invalidFields.not(h),this._cacheFields[b]=this._cacheFields[b].not(h)}return this._cacheFields[b]&&0!==this._cacheFields[b].length||delete this.options.fields[b],("checkbox"===e||"radio"===e)&&this._initField(b),this.disableSubmitButtons(!1),this.$form.trigger(a.Event(this.options.events.fieldRemoved),{field:b,element:d}),this},resetField:function(b,c){var d=this._namespace,e=a([]);switch(typeof b){case"object":e=b,b=b.attr("data-"+d+"-field");break;case"string":e=this.getFieldElements(b)}var f=e.length;if(this.options.fields[b])for(var g=0;f>g;g++)for(var h in this.options.fields[b].validators)e.eq(g).removeData(d+".dfs."+h);if(this.updateStatus(b,this.STATUS_NOT_VALIDATED),c){var i=e.attr("type");"radio"===i||"checkbox"===i?e.prop("checked",!1).removeAttr("selected"):e.val("")}return this},resetForm:function(b){for(var c in this.options.fields)this.resetField(c,b);return this.$invalidFields=a([]),this.$submitButton=null,this.disableSubmitButtons(!1),this},revalidateField:function(a){return this.updateStatus(a,this.STATUS_NOT_VALIDATED).validateField(a),this},setLocale:function(b){return this.options.locale=b,this.$form.trigger(a.Event(this.options.events.localeChanged),{locale:b,bv:this,fv:this}),this},updateOption:function(a,b,c,d){var e=this._namespace;return"object"==typeof a&&(a=a.attr("data-"+e+"-field")),this.options.fields[a]&&this.options.fields[a].validators[b]&&(this.options.fields[a].validators[b][c]=d,this.updateStatus(a,this.STATUS_NOT_VALIDATED,b)),this},validateContainer:function(b){var c=this,d=this._namespace,e=[],f="string"==typeof b?a(b):b;if(0===f.length)return this;f.find("[data-"+d+"-field]").each(function(){var b=a(this);c._isExcluded(b)||e.push(b)});for(var g=e.length,h=0;g>h;h++)this.validateField(e[h]);return this}},a.fn.formValidation=function(b){var c=arguments;return this.each(function(){var d=a(this),e=d.data("formValidation"),f="object"==typeof b&&b;if(!e){var g=(f.framework||d.attr("data-fv-framework")||"bootstrap").toLowerCase(),h=g.substr(0,1).toUpperCase()+g.substr(1);
if("undefined"==typeof FormValidation.Framework[h])throw new Error("The class FormValidation.Framework."+h+" is not implemented");e=new FormValidation.Framework[h](this,f),d.addClass("fv-form-"+g).data("formValidation",e)}"string"==typeof b&&e[b].apply(e,Array.prototype.slice.call(c,1))})},a.fn.formValidation.Constructor=FormValidation.Base,a.fn.formValidation.DEFAULT_OPTIONS={autoFocus:!0,declarative:!0,elementClass:"fv-form",events:{formInit:"init.form.fv",formError:"err.form.fv",formSuccess:"success.form.fv",fieldAdded:"added.field.fv",fieldRemoved:"removed.field.fv",fieldInit:"init.field.fv",fieldError:"err.field.fv",fieldSuccess:"success.field.fv",fieldStatus:"status.field.fv",localeChanged:"changed.locale.fv",validatorError:"err.validator.fv",validatorSuccess:"success.validator.fv"},excluded:[":disabled",":hidden",":not(:visible)"],fields:null,live:"enabled",locale:"en_US",message:"This value is not valid",threshold:null,verbose:!0,button:{selector:'[type="submit"]',disabled:""},control:{valid:"",invalid:""},err:{clazz:"",container:null,parent:null},icon:{valid:null,invalid:null,validating:null,feedback:""},row:{selector:null,valid:"",invalid:"",feedback:""}}}(jQuery),function(a){FormValidation.Helper={call:function(a,b){if("function"==typeof a)return a.apply(this,b);if("string"==typeof a){"()"===a.substring(a.length-2)&&(a=a.substring(0,a.length-2));for(var c=a.split("."),d=c.pop(),e=window,f=0;f<c.length;f++)e=e[c[f]];return"undefined"==typeof e[d]?null:e[d].apply(this,b)}},date:function(a,b,c,d){if(isNaN(a)||isNaN(b)||isNaN(c))return!1;if(c.length>2||b.length>2||a.length>4)return!1;if(c=parseInt(c,10),b=parseInt(b,10),a=parseInt(a,10),1e3>a||a>9999||0>=b||b>12)return!1;var e=[31,28,31,30,31,30,31,31,30,31,30,31];if((a%400===0||a%100!==0&&a%4===0)&&(e[1]=29),0>=c||c>e[b-1])return!1;if(d===!0){var f=new Date,g=f.getFullYear(),h=f.getMonth(),i=f.getDate();return g>a||a===g&&h>b-1||a===g&&b-1===h&&i>c}return!0},format:function(b,c){a.isArray(c)||(c=[c]);for(var d in c)b=b.replace("%s",c[d]);return b},luhn:function(a){for(var b=a.length,c=0,d=[[0,1,2,3,4,5,6,7,8,9],[0,2,4,6,8,1,3,5,7,9]],e=0;b--;)e+=d[c][parseInt(a.charAt(b),10)],c^=1;return e%10===0&&e>0},mod11And10:function(a){for(var b=5,c=a.length,d=0;c>d;d++)b=(2*(b||10)%11+parseInt(a.charAt(d),10))%10;return 1===b},mod37And36:function(a,b){b=b||"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var c=b.length,d=a.length,e=Math.floor(c/2),f=0;d>f;f++)e=(2*(e||c)%(c+1)+b.indexOf(a.charAt(f)))%c;return 1===e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{base64:{"default":"Please enter a valid base 64 encoded"}}}),FormValidation.Validator.base64={validate:function(a,b){var c=a.getFieldValue(b,"base64");return""===c?!0:/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(c)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{between:{"default":"Please enter a value between %s and %s",notInclusive:"Please enter a value between %s and %s strictly"}}}),FormValidation.Validator.between={html5Attributes:{message:"message",min:"min",max:"max",inclusive:"inclusive"},enableByHtml5:function(a){return"range"===a.attr("type")?{min:a.attr("min"),max:a.attr("max")}:!1},validate:function(b,c,d){var e=b.getFieldValue(c,"between");if(""===e)return!0;if(e=this._format(e),!a.isNumeric(e))return!1;var f=b.getLocale(),g=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),h=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),i=this._format(g),j=this._format(h);return e=parseFloat(e),d.inclusive===!0||void 0===d.inclusive?{valid:e>=i&&j>=e,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].between["default"],[g,h])}:{valid:e>i&&j>e,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].between.notInclusive,[g,h])}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{bic:{"default":"Please enter a valid BIC number"}}}),FormValidation.Validator.bic={validate:function(a,b){var c=a.getFieldValue(b,"bic");return""===c?!0:/^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$/.test(c)}}}(jQuery),function(){FormValidation.Validator.blank={validate:function(){return!0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{callback:{"default":"Please enter a valid value"}}}),FormValidation.Validator.callback={html5Attributes:{message:"message",callback:"callback"},validate:function(b,c,d){var e=b.getFieldValue(c,"callback"),f=new a.Deferred,g={valid:!0};if(d.callback){var h=FormValidation.Helper.call(d.callback,[e,b,c]);g="boolean"==typeof h?{valid:h}:h}return f.resolve(c,"callback",g),f}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{choice:{"default":"Please enter a valid value",less:"Please choose %s options at minimum",more:"Please choose %s options at maximum",between:"Please choose %s - %s options"}}}),FormValidation.Validator.choice={html5Attributes:{message:"message",min:"min",max:"max"},validate:function(b,c,d){var e=b.getLocale(),f=b.getNamespace(),g=c.is("select")?b.getFieldElements(c.attr("data-"+f+"-field")).find("option").filter(":selected").length:b.getFieldElements(c.attr("data-"+f+"-field")).filter(":checked").length,h=d.min?a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min):null,i=d.max?a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max):null,j=!0,k=d.message||FormValidation.I18n[e].choice["default"];switch((h&&g<parseInt(h,10)||i&&g>parseInt(i,10))&&(j=!1),!0){case!!h&&!!i:k=FormValidation.Helper.format(d.message||FormValidation.I18n[e].choice.between,[parseInt(h,10),parseInt(i,10)]);break;case!!h:k=FormValidation.Helper.format(d.message||FormValidation.I18n[e].choice.less,parseInt(h,10));break;case!!i:k=FormValidation.Helper.format(d.message||FormValidation.I18n[e].choice.more,parseInt(i,10))}return{valid:j,message:k}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{color:{"default":"Please enter a valid color"}}}),FormValidation.Validator.color={html5Attributes:{message:"message",type:"type"},enableByHtml5:function(a){return"color"===a.attr("type")},SUPPORTED_TYPES:["hex","rgb","rgba","hsl","hsla","keyword"],KEYWORD_COLORS:["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],validate:function(b,c,d){var e=b.getFieldValue(c,"color");if(""===e)return!0;if(this.enableByHtml5(c))return/^#[0-9A-F]{6}$/i.test(e);var f=d.type||this.SUPPORTED_TYPES;a.isArray(f)||(f=f.replace(/s/g,"").split(","));for(var g,h,i=!1,j=0;j<f.length;j++)if(h=f[j],g="_"+h.toLowerCase(),i=i||this[g](e))return!0;return!1},_hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},_hsl:function(a){return/^hsl\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/.test(a)},_hsla:function(a){return/^hsla\((\s*(-?\d+)\s*,)(\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/.test(a)},_keyword:function(b){return a.inArray(b,this.KEYWORD_COLORS)>=0},_rgb:function(a){var b=/^rgb\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){2}(\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*)\)$/,c=/^rgb\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){2}(\s*(\b(0?\d{1,2}|100)\b%)\s*)\)$/;return b.test(a)||c.test(a)},_rgba:function(a){var b=/^rgba\((\s*(\b([01]?\d{1,2}|2[0-4]\d|25[0-5])\b)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/,c=/^rgba\((\s*(\b(0?\d{1,2}|100)\b%)\s*,){3}(\s*(0?(\.\d+)?|1(\.0+)?)\s*)\)$/;return b.test(a)||c.test(a)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{creditCard:{"default":"Please enter a valid credit card number"}}}),FormValidation.Validator.creditCard={validate:function(b,c){var d=b.getFieldValue(c,"creditCard");if(""===d)return!0;if(/[^0-9-\s]+/.test(d))return!1;if(d=d.replace(/\D/g,""),!FormValidation.Helper.luhn(d))return!1;var e,f,g={AMERICAN_EXPRESS:{length:[15],prefix:["34","37"]},DINERS_CLUB:{length:[14],prefix:["300","301","302","303","304","305","36"]},DINERS_CLUB_US:{length:[16],prefix:["54","55"]},DISCOVER:{length:[16],prefix:["6011","622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925","644","645","646","647","648","649","65"]},JCB:{length:[16],prefix:["3528","3529","353","354","355","356","357","358"]},LASER:{length:[16,17,18,19],prefix:["6304","6706","6771","6709"]},MAESTRO:{length:[12,13,14,15,16,17,18,19],prefix:["5018","5020","5038","6304","6759","6761","6762","6763","6764","6765","6766"]},MASTERCARD:{length:[16],prefix:["51","52","53","54","55"]},SOLO:{length:[16,18,19],prefix:["6334","6767"]},UNIONPAY:{length:[16,17,18,19],prefix:["622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925"]},VISA:{length:[16],prefix:["4"]}};for(e in g)for(f in g[e].prefix)if(d.substr(0,g[e].prefix[f].length)===g[e].prefix[f]&&-1!==a.inArray(d.length,g[e].length))return{valid:!0,type:e};return!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{cusip:{"default":"Please enter a valid CUSIP number"}}}),FormValidation.Validator.cusip={validate:function(b,c){var d=b.getFieldValue(c,"cusip");if(""===d)return!0;if(d=d.toUpperCase(),!/^[0-9A-Z]{9}$/.test(d))return!1;for(var e=a.map(d.split(""),function(a){var b=a.charCodeAt(0);return b>="A".charCodeAt(0)&&b<="Z".charCodeAt(0)?b-"A".charCodeAt(0)+10:a}),f=e.length,g=0,h=0;f-1>h;h++){var i=parseInt(e[h],10);h%2!==0&&(i*=2),i>9&&(i-=9),g+=i}return g=(10-g%10)%10,g===parseInt(e[f-1],10)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{cvv:{"default":"Please enter a valid CVV number"}}}),FormValidation.Validator.cvv={html5Attributes:{message:"message",ccfield:"creditCardField"},init:function(a,b,c){if(c.creditCardField){var d=a.getFieldElements(c.creditCardField);a.onLiveChange(d,"live_cvv",function(){var c=a.getStatus(b,"cvv");c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})}},destroy:function(a,b,c){if(c.creditCardField){var d=a.getFieldElements(c.creditCardField);a.offLiveChange(d,"live_cvv")}},validate:function(b,c,d){var e=b.getFieldValue(c,"cvv");if(""===e)return!0;if(!/^[0-9]{3,4}$/.test(e))return!1;if(!d.creditCardField)return!0;var f=b.getFieldElements(d.creditCardField).val();if(""===f)return!0;f=f.replace(/\D/g,"");var g,h,i={AMERICAN_EXPRESS:{length:[15],prefix:["34","37"]},DINERS_CLUB:{length:[14],prefix:["300","301","302","303","304","305","36"]},DINERS_CLUB_US:{length:[16],prefix:["54","55"]},DISCOVER:{length:[16],prefix:["6011","622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925","644","645","646","647","648","649","65"]},JCB:{length:[16],prefix:["3528","3529","353","354","355","356","357","358"]},LASER:{length:[16,17,18,19],prefix:["6304","6706","6771","6709"]},MAESTRO:{length:[12,13,14,15,16,17,18,19],prefix:["5018","5020","5038","6304","6759","6761","6762","6763","6764","6765","6766"]},MASTERCARD:{length:[16],prefix:["51","52","53","54","55"]},SOLO:{length:[16,18,19],prefix:["6334","6767"]},UNIONPAY:{length:[16,17,18,19],prefix:["622126","622127","622128","622129","62213","62214","62215","62216","62217","62218","62219","6222","6223","6224","6225","6226","6227","6228","62290","62291","622920","622921","622922","622923","622924","622925"]},VISA:{length:[16],prefix:["4"]}},j=null;for(g in i)for(h in i[g].prefix)if(f.substr(0,i[g].prefix[h].length)===i[g].prefix[h]&&-1!==a.inArray(f.length,i[g].length)){j=g;break}return null===j?!1:"AMERICAN_EXPRESS"===j?4===e.length:3===e.length}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{date:{"default":"Please enter a valid date",min:"Please enter a date after %s",max:"Please enter a date before %s",range:"Please enter a date in the range %s - %s"}}}),FormValidation.Validator.date={html5Attributes:{message:"message",format:"format",min:"min",max:"max",separator:"separator"},validate:function(b,c,d){var e=b.getFieldValue(c,"date");if(""===e)return!0;d.format=d.format||"MM/DD/YYYY","date"===c.attr("type")&&(d.format="YYYY-MM-DD");var f=b.getLocale(),g=d.message||FormValidation.I18n[f].date["default"],h=d.format.split(" "),i=h[0],j=h.length>1?h[1]:null,k=h.length>2?h[2]:null,l=e.split(" "),m=l[0],n=l.length>1?l[1]:null;if(h.length!==l.length)return{valid:!1,message:g};var o=d.separator;if(o||(o=-1!==m.indexOf("index.html")?"/":-1!==m.indexOf("-")?"-":null),null===o||-1===m.indexOf(o))return{valid:!1,message:g};if(m=m.split(o),i=i.split(o),m.length!==i.length)return{valid:!1,message:g};var p=m[a.inArray("YYYY",i)],q=m[a.inArray("MM",i)],r=m[a.inArray("DD",i)];if(!p||!q||!r||4!==p.length)return{valid:!1,message:g};var s=null,t=null,u=null;if(j){if(j=j.split(":"),n=n.split(":"),j.length!==n.length)return{valid:!1,message:g};if(t=n.length>0?n[0]:null,s=n.length>1?n[1]:null,u=n.length>2?n[2]:null,""===t||""===s||""===u)return{valid:!1,message:g};if(u){if(isNaN(u)||u.length>2)return{valid:!1,message:g};if(u=parseInt(u,10),0>u||u>60)return{valid:!1,message:g}}if(t){if(isNaN(t)||t.length>2)return{valid:!1,message:g};if(t=parseInt(t,10),0>t||t>=24||k&&t>12)return{valid:!1,message:g}}if(s){if(isNaN(s)||s.length>2)return{valid:!1,message:g};if(s=parseInt(s,10),0>s||s>59)return{valid:!1,message:g}}}var v=FormValidation.Helper.date(p,q,r),w=null,x=null,y=d.min,z=d.max;switch(y&&(isNaN(Date.parse(y))&&(y=b.getDynamicOption(c,y)),w=y instanceof Date?y:this._parseDate(y,i,o),y=y instanceof Date?this._formatDate(y,d.format):y),z&&(isNaN(Date.parse(z))&&(z=b.getDynamicOption(c,z)),x=z instanceof Date?z:this._parseDate(z,i,o),z=z instanceof Date?this._formatDate(z,d.format):z),m=new Date(p,q-1,r,t,s,u),!0){case y&&!z&&v:v=m.getTime()>=w.getTime(),g=d.message||FormValidation.Helper.format(FormValidation.I18n[f].date.min,y);break;case z&&!y&&v:v=m.getTime()<=x.getTime(),g=d.message||FormValidation.Helper.format(FormValidation.I18n[f].date.max,z);break;case z&&y&&v:v=m.getTime()<=x.getTime()&&m.getTime()>=w.getTime(),g=d.message||FormValidation.Helper.format(FormValidation.I18n[f].date.range,[y,z])}return{valid:v,message:g}},_parseDate:function(b,c,d){var e=0,f=0,g=0,h=b.split(" "),i=h[0],j=h.length>1?h[1]:null;i=i.split(d);var k=i[a.inArray("YYYY",c)],l=i[a.inArray("MM",c)],m=i[a.inArray("DD",c)];return j&&(j=j.split(":"),f=j.length>0?j[0]:null,e=j.length>1?j[1]:null,g=j.length>2?j[2]:null),new Date(k,l-1,m,f,e,g)},_formatDate:function(a,b){b=b.replace(/Y/g,"y").replace(/M/g,"m").replace(/D/g,"d").replace(/:m/g,":M").replace(/:mm/g,":MM").replace(/:S/,":s").replace(/:SS/,":ss");var c={d:function(a){return a.getDate()},dd:function(a){var b=a.getDate();return 10>b?"0"+b:b},m:function(a){return a.getMonth()+1},mm:function(a){var b=a.getMonth()+1;return 10>b?"0"+b:b},yy:function(a){return(""+a.getFullYear()).substr(2)},yyyy:function(a){return a.getFullYear()},h:function(a){return a.getHours()%12||12},hh:function(a){var b=a.getHours()%12||12;return 10>b?"0"+b:b},H:function(a){return a.getHours()},HH:function(a){var b=a.getHours();return 10>b?"0"+b:b},M:function(a){return a.getMinutes()},MM:function(a){var b=a.getMinutes();return 10>b?"0"+b:b},s:function(a){return a.getSeconds()},ss:function(a){var b=a.getSeconds();return 10>b?"0"+b:b}};return b.replace(/d{1,4}|m{1,4}|yy(?:yy)?|([HhMs])\1?|"[^"]*"|'[^']*'/g,function(b){return c[b]?c[b](a):b.slice(1,b.length-1)})}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{different:{"default":"Please enter a different value"}}}),FormValidation.Validator.different={html5Attributes:{message:"message",field:"field"},init:function(a,b,c){for(var d=c.field.split(","),e=0;e<d.length;e++){var f=a.getFieldElements(d[e]);a.onLiveChange(f,"live_different",function(){var c=a.getStatus(b,"different");c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})}},destroy:function(a,b,c){for(var d=c.field.split(","),e=0;e<d.length;e++){var f=a.getFieldElements(d[e]);a.offLiveChange(f,"live_different")}},validate:function(a,b,c){var d=a.getFieldValue(b,"different");if(""===d)return!0;for(var e=c.field.split(","),f=!0,g=0;g<e.length;g++){var h=a.getFieldElements(e[g]);if(null!=h&&0!==h.length){var i=a.getFieldValue(h,"different");d===i?f=!1:""!==i&&a.updateStatus(h,a.STATUS_VALID,"different")}}return f}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{digits:{"default":"Please enter only digits"}}}),FormValidation.Validator.digits={validate:function(a,b){var c=a.getFieldValue(b,"digits");return""===c?!0:/^\d+$/.test(c)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ean:{"default":"Please enter a valid EAN number"}}}),FormValidation.Validator.ean={validate:function(a,b){var c=a.getFieldValue(b,"ean");if(""===c)return!0;if(!/^(\d{8}|\d{12}|\d{13})$/.test(c))return!1;for(var d=c.length,e=0,f=8===d?[3,1]:[1,3],g=0;d-1>g;g++)e+=parseInt(c.charAt(g),10)*f[g%2];return e=(10-e%10)%10,e+""===c.charAt(d-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ein:{"default":"Please enter a valid EIN number"}}}),FormValidation.Validator.ein={CAMPUS:{ANDOVER:["10","12"],ATLANTA:["60","67"],AUSTIN:["50","53"],BROOKHAVEN:["01","02","03","04","05","06","11","13","14","16","21","22","23","25","34","51","52","54","55","56","57","58","59","65"],CINCINNATI:["30","32","35","36","37","38","61"],FRESNO:["15","24"],KANSAS_CITY:["40","44"],MEMPHIS:["94","95"],OGDEN:["80","90"],PHILADELPHIA:["33","39","41","42","43","46","48","62","63","64","66","68","71","72","73","74","75","76","77","81","82","83","84","85","86","87","88","91","92","93","98","99"],INTERNET:["20","26","27","45","46"],SMALL_BUSINESS_ADMINISTRATION:["31"]},validate:function(b,c){var d=b.getFieldValue(c,"ein");if(""===d)return!0;if(!/^[0-9]{2}-?[0-9]{7}$/.test(d))return!1;var e=d.substr(0,2)+"";for(var f in this.CAMPUS)if(-1!==a.inArray(e,this.CAMPUS[f]))return{valid:!0,campus:f};return!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{emailAddress:{"default":"Please enter a valid email address"}}}),FormValidation.Validator.emailAddress={html5Attributes:{message:"message",multiple:"multiple",separator:"separator"},enableByHtml5:function(a){return"email"===a.attr("type")},validate:function(a,b,c){var d=a.getFieldValue(b,"emailAddress");if(""===d)return!0;var e=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,f=c.multiple===!0||"true"===c.multiple;if(f){for(var g=c.separator||/[,;]/,h=this._splitEmailAddresses(d,g),i=0;i<h.length;i++)if(!e.test(h[i]))return!1;return!0}return e.test(d)},_splitEmailAddresses:function(a,b){for(var c=a.split(/"/),d=c.length,e=[],f="",g=0;d>g;g++)if(g%2===0){var h=c[g].split(b),i=h.length;if(1===i)f+=h[0];else{e.push(f+h[0]);for(var j=1;i-1>j;j++)e.push(h[j]);f=h[i-1]}}else f+='"'+c[g],d-1>g&&(f+='"');return e.push(f),e}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{file:{"default":"Please choose a valid file"}}}),FormValidation.Validator.file={html5Attributes:{extension:"extension",maxfiles:"maxFiles",minfiles:"minFiles",maxsize:"maxSize",minsize:"minSize",maxtotalsize:"maxTotalSize",mintotalsize:"minTotalSize",message:"message",type:"type"},validate:function(b,c,d){var e=b.getFieldValue(c,"file");if(""===e)return!0;var f,g=d.extension?d.extension.toLowerCase().split(","):null,h=d.type?d.type.toLowerCase().split(","):null,i=window.File&&window.FileList&&window.FileReader;if(i){var j=c.get(0).files,k=j.length,l=0;if(d.maxFiles&&k>parseInt(d.maxFiles,10)||d.minFiles&&k<parseInt(d.minFiles,10))return!1;for(var m=0;k>m;m++)if(l+=j[m].size,f=j[m].name.substr(j[m].name.lastIndexOf(".")+1),d.minSize&&j[m].size<parseInt(d.minSize,10)||d.maxSize&&j[m].size>parseInt(d.maxSize,10)||g&&-1===a.inArray(f.toLowerCase(),g)||j[m].type&&h&&-1===a.inArray(j[m].type.toLowerCase(),h))return!1;if(d.maxTotalSize&&l>parseInt(d.maxTotalSize,10)||d.minTotalSize&&l<parseInt(d.minTotalSize,10))return!1}else if(f=e.substr(e.lastIndexOf(".")+1),g&&-1===a.inArray(f.toLowerCase(),g))return!1;return!0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{greaterThan:{"default":"Please enter a value greater than or equal to %s",notInclusive:"Please enter a value greater than %s"}}}),FormValidation.Validator.greaterThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("min");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d){var e=b.getFieldValue(c,"greaterThan");if(""===e)return!0;if(e=this._format(e),!a.isNumeric(e))return!1;var f=b.getLocale(),g=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),h=this._format(g);return e=parseFloat(e),d.inclusive===!0||void 0===d.inclusive?{valid:e>=h,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].greaterThan["default"],g)}:{valid:e>h,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].greaterThan.notInclusive,g)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{grid:{"default":"Please enter a valid GRId number"}}}),FormValidation.Validator.grid={validate:function(a,b){var c=a.getFieldValue(b,"grid");return""===c?!0:(c=c.toUpperCase(),/^[GRID:]*([0-9A-Z]{2})[-\s]*([0-9A-Z]{5})[-\s]*([0-9A-Z]{10})[-\s]*([0-9A-Z]{1})$/g.test(c)?(c=c.replace(/\s/g,"").replace(/-/g,""),"GRID:"===c.substr(0,5)&&(c=c.substr(5)),FormValidation.Helper.mod37And36(c)):!1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{hex:{"default":"Please enter a valid hexadecimal number"}}}),FormValidation.Validator.hex={validate:function(a,b){var c=a.getFieldValue(b,"hex");return""===c?!0:/^[0-9a-fA-F]+$/.test(c)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{iban:{"default":"Please enter a valid IBAN number",country:"Please enter a valid IBAN number in %s",countries:{AD:"Andorra",AE:"United Arab Emirates",AL:"Albania",AO:"Angola",AT:"Austria",AZ:"Azerbaijan",BA:"Bosnia and Herzegovina",BE:"Belgium",BF:"Burkina Faso",BG:"Bulgaria",BH:"Bahrain",BI:"Burundi",BJ:"Benin",BR:"Brazil",CH:"Switzerland",CI:"Ivory Coast",CM:"Cameroon",CR:"Costa Rica",CV:"Cape Verde",CY:"Cyprus",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",DO:"Dominican Republic",DZ:"Algeria",EE:"Estonia",ES:"Spain",FI:"Finland",FO:"Faroe Islands",FR:"France",GB:"United Kingdom",GE:"Georgia",GI:"Gibraltar",GL:"Greenland",GR:"Greece",GT:"Guatemala",HR:"Croatia",HU:"Hungary",IE:"Ireland",IL:"Israel",IR:"Iran",IS:"Iceland",IT:"Italy",JO:"Jordan",KW:"Kuwait",KZ:"Kazakhstan",LB:"Lebanon",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",LV:"Latvia",MC:"Monaco",MD:"Moldova",ME:"Montenegro",MG:"Madagascar",MK:"Macedonia",ML:"Mali",MR:"Mauritania",MT:"Malta",MU:"Mauritius",MZ:"Mozambique",NL:"Netherlands",NO:"Norway",PK:"Pakistan",PL:"Poland",PS:"Palestine",PT:"Portugal",QA:"Qatar",RO:"Romania",RS:"Serbia",SA:"Saudi Arabia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",SM:"San Marino",SN:"Senegal",TN:"Tunisia",TR:"Turkey",VG:"Virgin Islands, British"}}}}),FormValidation.Validator.iban={html5Attributes:{message:"message",country:"country"},REGEX:{AD:"AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}",AE:"AE[0-9]{2}[0-9]{3}[0-9]{16}",AL:"AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}",AO:"AO[0-9]{2}[0-9]{21}",AT:"AT[0-9]{2}[0-9]{5}[0-9]{11}",AZ:"AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}",BA:"BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}",BE:"BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}",BF:"BF[0-9]{2}[0-9]{23}",BG:"BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}",BH:"BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}",BI:"BI[0-9]{2}[0-9]{12}",BJ:"BJ[0-9]{2}[A-Z]{1}[0-9]{23}",BR:"BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]",CH:"CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}",CI:"CI[0-9]{2}[A-Z]{1}[0-9]{23}",CM:"CM[0-9]{2}[0-9]{23}",CR:"CR[0-9]{2}[0-9]{3}[0-9]{14}",CV:"CV[0-9]{2}[0-9]{21}",CY:"CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}",CZ:"CZ[0-9]{2}[0-9]{20}",DE:"DE[0-9]{2}[0-9]{8}[0-9]{10}",DK:"DK[0-9]{2}[0-9]{14}",DO:"DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}",DZ:"DZ[0-9]{2}[0-9]{20}",EE:"EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}",ES:"ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}",FI:"FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}",FO:"FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}",FR:"FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}",GB:"GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}",GE:"GE[0-9]{2}[A-Z]{2}[0-9]{16}",GI:"GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}",GL:"GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}",GR:"GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}",GT:"GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}",HR:"HR[0-9]{2}[0-9]{7}[0-9]{10}",HU:"HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}",IE:"IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}",IL:"IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}",IR:"IR[0-9]{2}[0-9]{22}",IS:"IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}",IT:"IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}",JO:"JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}",KW:"KW[0-9]{2}[A-Z]{4}[0-9]{22}",KZ:"KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}",LB:"LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}",LI:"LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}",LT:"LT[0-9]{2}[0-9]{5}[0-9]{11}",LU:"LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}",LV:"LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}",MC:"MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}",MD:"MD[0-9]{2}[A-Z0-9]{20}",ME:"ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",MG:"MG[0-9]{2}[0-9]{23}",MK:"MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}",ML:"ML[0-9]{2}[A-Z]{1}[0-9]{23}",MR:"MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}",MT:"MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}",MU:"MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}",MZ:"MZ[0-9]{2}[0-9]{21}",NL:"NL[0-9]{2}[A-Z]{4}[0-9]{10}",NO:"NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}",PK:"PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}",PL:"PL[0-9]{2}[0-9]{8}[0-9]{16}",PS:"PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}",PT:"PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}",QA:"QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}",RO:"RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}",RS:"RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",SA:"SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}",SE:"SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}",SI:"SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}",SK:"SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}",SM:"SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}",SN:"SN[0-9]{2}[A-Z]{1}[0-9]{23}",TN:"TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}",TR:"TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}",VG:"VG[0-9]{2}[A-Z]{4}[0-9]{16}"},validate:function(b,c,d){var e=b.getFieldValue(c,"iban");if(""===e)return!0;e=e.replace(/[^a-zA-Z0-9]/g,"").toUpperCase();var f=d.country;f?"string"==typeof f&&this.REGEX[f]||(f=b.getDynamicOption(c,f)):f=e.substr(0,2);var g=b.getLocale();if(!this.REGEX[f])return!0;if(!new RegExp("^"+this.REGEX[f]+"$").test(e))return{valid:!1,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].iban.country,FormValidation.I18n[g].iban.countries[f])};e=e.substr(4)+e.substr(0,4),e=a.map(e.split(""),function(a){var b=a.charCodeAt(0);return b>="A".charCodeAt(0)&&b<="Z".charCodeAt(0)?b-"A".charCodeAt(0)+10:a}),e=e.join("");for(var h=parseInt(e.substr(0,1),10),i=e.length,j=1;i>j;++j)h=(10*h+parseInt(e.substr(j,1),10))%97;return{valid:1===h,message:FormValidation.Helper.format(d.message||FormValidation.I18n[g].iban.country,FormValidation.I18n[g].iban.countries[f])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{id:{"default":"Please enter a valid identification number",country:"Please enter a valid identification number in %s",countries:{BA:"Bosnia and Herzegovina",BG:"Bulgaria",BR:"Brazil",CH:"Switzerland",CL:"Chile",CN:"China",CZ:"Czech Republic",DK:"Denmark",EE:"Estonia",ES:"Spain",FI:"Finland",HR:"Croatia",IE:"Ireland",IS:"Iceland",LT:"Lithuania",LV:"Latvia",ME:"Montenegro",MK:"Macedonia",NL:"Netherlands",PL:"Poland",RO:"Romania",RS:"Serbia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",SM:"San Marino",TH:"Thailand",ZA:"South Africa"}}}}),FormValidation.Validator.id={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["BA","BG","BR","CH","CL","CN","CZ","DK","EE","ES","FI","HR","IE","IS","LT","LV","ME","MK","NL","PL","RO","RS","SE","SI","SK","SM","TH","ZA"],validate:function(b,c,d){var e=b.getFieldValue(c,"id");if(""===e)return!0;var f=b.getLocale(),g=d.country;if(g?("string"!=typeof g||-1===a.inArray(g.toUpperCase(),this.COUNTRY_CODES))&&(g=b.getDynamicOption(c,g)):g=e.substr(0,2),-1===a.inArray(g,this.COUNTRY_CODES))return!0;var h=["_",g.toLowerCase()].join("");return this[h](e)?!0:{valid:!1,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].id.country,FormValidation.I18n[f].id.countries[g.toUpperCase()])}},_validateJMBG:function(a,b){if(!/^\d{13}$/.test(a))return!1;var c=parseInt(a.substr(0,2),10),d=parseInt(a.substr(2,2),10),e=(parseInt(a.substr(4,3),10),parseInt(a.substr(7,2),10)),f=parseInt(a.substr(12,1),10);if(c>31||d>12)return!1;for(var g=0,h=0;6>h;h++)g+=(7-h)*(parseInt(a.charAt(h),10)+parseInt(a.charAt(h+6),10));if(g=11-g%11,(10===g||11===g)&&(g=0),g!==f)return!1;switch(b.toUpperCase()){case"BA":return e>=10&&19>=e;case"MK":return e>=41&&49>=e;case"ME":return e>=20&&29>=e;case"RS":return e>=70&&99>=e;case"SI":return e>=50&&59>=e;default:return!0}},_ba:function(a){return this._validateJMBG(a,"BA")},_mk:function(a){return this._validateJMBG(a,"MK")},_me:function(a){return this._validateJMBG(a,"ME")},_rs:function(a){return this._validateJMBG(a,"RS")},_si:function(a){return this._validateJMBG(a,"SI")},_bg:function(a){if(!/^\d{10}$/.test(a)&&!/^\d{6}\s\d{3}\s\d{1}$/.test(a))return!1;a=a.replace(/\s/g,"");var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(c>40?(b+=100,c-=40):c>20&&(b-=100,c-=20),!FormValidation.Helper.date(b,c,d))return!1;for(var e=0,f=[2,4,8,5,10,9,7,3,6],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=e%11%10,e+""===a.substr(9,1)},_br:function(a){if(a=a.replace(/\D/g,""),/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(a))return!1;
for(var b=0,c=0;9>c;c++)b+=(10-c)*parseInt(a.charAt(c),10);if(b=11-b%11,(10===b||11===b)&&(b=0),b+""!==a.charAt(9))return!1;var d=0;for(c=0;10>c;c++)d+=(11-c)*parseInt(a.charAt(c),10);return d=11-d%11,(10===d||11===d)&&(d=0),d+""===a.charAt(10)},_ch:function(a){if(!/^756[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{4}[\.]{0,1}[0-9]{2}$/.test(a))return!1;a=a.replace(/\D/g,"").substr(3);for(var b=a.length,c=0,d=8===b?[3,1]:[1,3],e=0;b-1>e;e++)c+=parseInt(a.charAt(e),10)*d[e%2];return c=10-c%10,c+""===a.charAt(b-1)},_cl:function(a){if(!/^\d{7,8}[-]{0,1}[0-9K]$/i.test(a))return!1;for(a=a.replace(/\-/g,"");a.length<9;)a="0"+a;for(var b=0,c=[3,2,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,11===b?b=0:10===b&&(b="K"),b+""===a.charAt(8).toUpperCase()},_cn:function(b){if(b=b.trim(),!/^\d{15}$/.test(b)&&!/^\d{17}[\dXx]{1}$/.test(b))return!1;var c={11:{0:[0],1:[[0,9],[11,17]],2:[0,28,29]},12:{0:[0],1:[[0,16]],2:[0,21,23,25]},13:{0:[0],1:[[0,5],7,8,21,[23,33],[81,85]],2:[[0,5],[7,9],[23,25],27,29,30,81,83],3:[[0,4],[21,24]],4:[[0,4],6,21,[23,35],81],5:[[0,3],[21,35],81,82],6:[[0,4],[21,38],[81,84]],7:[[0,3],5,6,[21,33]],8:[[0,4],[21,28]],9:[[0,3],[21,30],[81,84]],10:[[0,3],[22,26],28,81,82],11:[[0,2],[21,28],81,82]},14:{0:[0],1:[0,1,[5,10],[21,23],81],2:[[0,3],11,12,[21,27]],3:[[0,3],11,21,22],4:[[0,2],11,21,[23,31],81],5:[[0,2],21,22,24,25,81],6:[[0,3],[21,24]],7:[[0,2],[21,29],81],8:[[0,2],[21,30],81,82],9:[[0,2],[21,32],81],10:[[0,2],[21,34],81,82],11:[[0,2],[21,30],81,82],23:[[0,3],22,23,[25,30],32,33]},15:{0:[0],1:[[0,5],[21,25]],2:[[0,7],[21,23]],3:[[0,4]],4:[[0,4],[21,26],[28,30]],5:[[0,2],[21,26],81],6:[[0,2],[21,27]],7:[[0,3],[21,27],[81,85]],8:[[0,2],[21,26]],9:[[0,2],[21,29],81],22:[[0,2],[21,24]],25:[[0,2],[22,31]],26:[[0,2],[24,27],[29,32],34],28:[0,1,[22,27]],29:[0,[21,23]]},21:{0:[0],1:[[0,6],[11,14],[22,24],81],2:[[0,4],[11,13],24,[81,83]],3:[[0,4],11,21,23,81],4:[[0,4],11,[21,23]],5:[[0,5],21,22],6:[[0,4],24,81,82],7:[[0,3],11,26,27,81,82],8:[[0,4],11,81,82],9:[[0,5],11,21,22],10:[[0,5],11,21,81],11:[[0,3],21,22],12:[[0,2],4,21,23,24,81,82],13:[[0,3],21,22,24,81,82],14:[[0,4],21,22,81]},22:{0:[0],1:[[0,6],12,22,[81,83]],2:[[0,4],11,21,[81,84]],3:[[0,3],22,23,81,82],4:[[0,3],21,22],5:[[0,3],21,23,24,81,82],6:[[0,2],4,5,[21,23],25,81],7:[[0,2],[21,24],81],8:[[0,2],21,22,81,82],24:[[0,6],24,26]},23:{0:[0],1:[[0,12],21,[23,29],[81,84]],2:[[0,8],21,[23,25],27,[29,31],81],3:[[0,7],21,81,82],4:[[0,7],21,22],5:[[0,3],5,6,[21,24]],6:[[0,6],[21,24]],7:[[0,16],22,81],8:[[0,5],11,22,26,28,33,81,82],9:[[0,4],21],10:[[0,5],24,25,81,[83,85]],11:[[0,2],21,23,24,81,82],12:[[0,2],[21,26],[81,83]],27:[[0,4],[21,23]]},31:{0:[0],1:[0,1,[3,10],[12,20]],2:[0,30]},32:{0:[0],1:[[0,7],11,[13,18],24,25],2:[[0,6],11,81,82],3:[[0,5],11,12,[21,24],81,82],4:[[0,2],4,5,11,12,81,82],5:[[0,9],[81,85]],6:[[0,2],11,12,21,23,[81,84]],7:[0,1,3,5,6,[21,24]],8:[[0,4],11,26,[29,31]],9:[[0,3],[21,25],28,81,82],10:[[0,3],11,12,23,81,84,88],11:[[0,2],11,12,[81,83]],12:[[0,4],[81,84]],13:[[0,2],11,[21,24]]},33:{0:[0],1:[[0,6],[8,10],22,27,82,83,85],2:[0,1,[3,6],11,12,25,26,[81,83]],3:[[0,4],22,24,[26,29],81,82],4:[[0,2],11,21,24,[81,83]],5:[[0,3],[21,23]],6:[[0,2],21,24,[81,83]],7:[[0,3],23,26,27,[81,84]],8:[[0,3],22,24,25,81],9:[[0,3],21,22],10:[[0,4],[21,24],81,82],11:[[0,2],[21,27],81]},34:{0:[0],1:[[0,4],11,[21,24],81],2:[[0,4],7,8,[21,23],25],3:[[0,4],11,[21,23]],4:[[0,6],21],5:[[0,4],6,[21,23]],6:[[0,4],21],7:[[0,3],11,21],8:[[0,3],11,[22,28],81],10:[[0,4],[21,24]],11:[[0,3],22,[24,26],81,82],12:[[0,4],21,22,25,26,82],13:[[0,2],[21,24]],14:[[0,2],[21,24]],15:[[0,3],[21,25]],16:[[0,2],[21,23]],17:[[0,2],[21,23]],18:[[0,2],[21,25],81]},35:{0:[0],1:[[0,5],11,[21,25],28,81,82],2:[[0,6],[11,13]],3:[[0,5],22],4:[[0,3],21,[23,30],81],5:[[0,5],21,[24,27],[81,83]],6:[[0,3],[22,29],81],7:[[0,2],[21,25],[81,84]],8:[[0,2],[21,25],81],9:[[0,2],[21,26],81,82]},36:{0:[0],1:[[0,5],11,[21,24]],2:[[0,3],22,81],3:[[0,2],13,[21,23]],4:[[0,3],21,[23,30],81,82],5:[[0,2],21],6:[[0,2],22,81],7:[[0,2],[21,35],81,82],8:[[0,3],[21,30],81],9:[[0,2],[21,26],[81,83]],10:[[0,2],[21,30]],11:[[0,2],[21,30],81]},37:{0:[0],1:[[0,5],12,13,[24,26],81],2:[[0,3],5,[11,14],[81,85]],3:[[0,6],[21,23]],4:[[0,6],81],5:[[0,3],[21,23]],6:[[0,2],[11,13],34,[81,87]],7:[[0,5],24,25,[81,86]],8:[[0,2],11,[26,32],[81,83]],9:[[0,3],11,21,23,82,83],10:[[0,2],[81,83]],11:[[0,3],21,22],12:[[0,3]],13:[[0,2],11,12,[21,29]],14:[[0,2],[21,28],81,82],15:[[0,2],[21,26],81],16:[[0,2],[21,26]],17:[[0,2],[21,28]]},41:{0:[0],1:[[0,6],8,22,[81,85]],2:[[0,5],11,[21,25]],3:[[0,7],11,[22,29],81],4:[[0,4],11,[21,23],25,81,82],5:[[0,3],5,6,22,23,26,27,81],6:[[0,3],11,21,22],7:[[0,4],11,21,[24,28],81,82],8:[[0,4],11,[21,23],25,[81,83]],9:[[0,2],22,23,[26,28]],10:[[0,2],[23,25],81,82],11:[[0,4],[21,23]],12:[[0,2],21,22,24,81,82],13:[[0,3],[21,30],81],14:[[0,3],[21,26],81],15:[[0,3],[21,28]],16:[[0,2],[21,28],81],17:[[0,2],[21,29]],90:[0,1]},42:{0:[0],1:[[0,7],[11,17]],2:[[0,5],22,81],3:[[0,3],[21,25],81],5:[[0,6],[25,29],[81,83]],6:[[0,2],6,7,[24,26],[82,84]],7:[[0,4]],8:[[0,2],4,21,22,81],9:[[0,2],[21,23],81,82,84],10:[[0,3],[22,24],81,83,87],11:[[0,2],[21,27],81,82],12:[[0,2],[21,24],81],13:[[0,3],21,81],28:[[0,2],22,23,[25,28]],90:[0,[4,6],21]},43:{0:[0],1:[[0,5],11,12,21,22,24,81],2:[[0,4],11,21,[23,25],81],3:[[0,2],4,21,81,82],4:[0,1,[5,8],12,[21,24],26,81,82],5:[[0,3],11,[21,25],[27,29],81],6:[[0,3],11,21,23,24,26,81,82],7:[[0,3],[21,26],81],8:[[0,2],11,21,22],9:[[0,3],[21,23],81],10:[[0,3],[21,28],81],11:[[0,3],[21,29]],12:[[0,2],[21,30],81],13:[[0,2],21,22,81,82],31:[0,1,[22,27],30]},44:{0:[0],1:[[0,7],[11,16],83,84],2:[[0,5],21,22,24,29,32,33,81,82],3:[0,1,[3,8]],4:[[0,4]],5:[0,1,[6,15],23,82,83],6:[0,1,[4,8]],7:[0,1,[3,5],81,[83,85]],8:[[0,4],11,23,25,[81,83]],9:[[0,3],23,[81,83]],12:[[0,3],[23,26],83,84],13:[[0,3],[22,24],81],14:[[0,2],[21,24],26,27,81],15:[[0,2],21,23,81],16:[[0,2],[21,25]],17:[[0,2],21,23,81],18:[[0,3],21,23,[25,27],81,82],19:[0],20:[0],51:[[0,3],21,22],52:[[0,3],21,22,24,81],53:[[0,2],[21,23],81]},45:{0:[0],1:[[0,9],[21,27]],2:[[0,5],[21,26]],3:[[0,5],11,12,[21,32]],4:[0,1,[3,6],11,[21,23],81],5:[[0,3],12,21],6:[[0,3],21,81],7:[[0,3],21,22],8:[[0,4],21,81],9:[[0,3],[21,24],81],10:[[0,2],[21,31]],11:[[0,2],[21,23]],12:[[0,2],[21,29],81],13:[[0,2],[21,24],81],14:[[0,2],[21,25],81]},46:{0:[0],1:[0,1,[5,8]],2:[0,1],3:[0,[21,23]],90:[[0,3],[5,7],[21,39]]},50:{0:[0],1:[[0,19]],2:[0,[22,38],[40,43]],3:[0,[81,84]]},51:{0:[0],1:[0,1,[4,8],[12,15],[21,24],29,31,32,[81,84]],3:[[0,4],11,21,22],4:[[0,3],11,21,22],5:[[0,4],21,22,24,25],6:[0,1,3,23,26,[81,83]],7:[0,1,3,4,[22,27],81],8:[[0,2],11,12,[21,24]],9:[[0,4],[21,23]],10:[[0,2],11,24,25,28],11:[[0,2],[11,13],23,24,26,29,32,33,81],13:[[0,4],[21,25],81],14:[[0,2],[21,25]],15:[[0,3],[21,29]],16:[[0,3],[21,23],81],17:[[0,3],[21,25],81],18:[[0,3],[21,27]],19:[[0,3],[21,23]],20:[[0,2],21,22,81],32:[0,[21,33]],33:[0,[21,38]],34:[0,1,[22,37]]},52:{0:[0],1:[[0,3],[11,15],[21,23],81],2:[0,1,3,21,22],3:[[0,3],[21,30],81,82],4:[[0,2],[21,25]],5:[[0,2],[21,27]],6:[[0,3],[21,28]],22:[0,1,[22,30]],23:[0,1,[22,28]],24:[0,1,[22,28]],26:[0,1,[22,36]],27:[[0,2],22,23,[25,32]]},53:{0:[0],1:[[0,3],[11,14],21,22,[24,29],81],3:[[0,2],[21,26],28,81],4:[[0,2],[21,28]],5:[[0,2],[21,24]],6:[[0,2],[21,30]],7:[[0,2],[21,24]],8:[[0,2],[21,29]],9:[[0,2],[21,27]],23:[0,1,[22,29],31],25:[[0,4],[22,32]],26:[0,1,[21,28]],27:[0,1,[22,30]],28:[0,1,22,23],29:[0,1,[22,32]],31:[0,2,3,[22,24]],34:[0,[21,23]],33:[0,21,[23,25]],35:[0,[21,28]]},54:{0:[0],1:[[0,2],[21,27]],21:[0,[21,29],32,33],22:[0,[21,29],[31,33]],23:[0,1,[22,38]],24:[0,[21,31]],25:[0,[21,27]],26:[0,[21,27]]},61:{0:[0],1:[[0,4],[11,16],22,[24,26]],2:[[0,4],22],3:[[0,4],[21,24],[26,31]],4:[[0,4],[22,31],81],5:[[0,2],[21,28],81,82],6:[[0,2],[21,32]],7:[[0,2],[21,30]],8:[[0,2],[21,31]],9:[[0,2],[21,29]],10:[[0,2],[21,26]]},62:{0:[0],1:[[0,5],11,[21,23]],2:[0,1],3:[[0,2],21],4:[[0,3],[21,23]],5:[[0,3],[21,25]],6:[[0,2],[21,23]],7:[[0,2],[21,25]],8:[[0,2],[21,26]],9:[[0,2],[21,24],81,82],10:[[0,2],[21,27]],11:[[0,2],[21,26]],12:[[0,2],[21,28]],24:[0,21,[24,29]],26:[0,21,[23,30]],29:[0,1,[21,27]],30:[0,1,[21,27]]},63:{0:[0],1:[[0,5],[21,23]],2:[0,2,[21,25]],21:[0,[21,23],[26,28]],22:[0,[21,24]],23:[0,[21,24]],25:[0,[21,25]],26:[0,[21,26]],27:[0,1,[21,26]],28:[[0,2],[21,23]]},64:{0:[0],1:[0,1,[4,6],21,22,81],2:[[0,3],5,[21,23]],3:[[0,3],[21,24],81],4:[[0,2],[21,25]],5:[[0,2],21,22]},65:{0:[0],1:[[0,9],21],2:[[0,5]],21:[0,1,22,23],22:[0,1,22,23],23:[[0,3],[23,25],27,28],28:[0,1,[22,29]],29:[0,1,[22,29]],30:[0,1,[22,24]],31:[0,1,[21,31]],32:[0,1,[21,27]],40:[0,2,3,[21,28]],42:[[0,2],21,[23,26]],43:[0,1,[21,26]],90:[[0,4]],27:[[0,2],22,23]},71:{0:[0]},81:{0:[0]},82:{0:[0]}},d=parseInt(b.substr(0,2),10),e=parseInt(b.substr(2,2),10),f=parseInt(b.substr(4,2),10);if(!c[d]||!c[d][e])return!1;for(var g=!1,h=c[d][e],i=0;i<h.length;i++)if(a.isArray(h[i])&&h[i][0]<=f&&f<=h[i][1]||!a.isArray(h[i])&&f===h[i]){g=!0;break}if(!g)return!1;var j;j=18===b.length?b.substr(6,8):"19"+b.substr(6,6);var k=parseInt(j.substr(0,4),10),l=parseInt(j.substr(4,2),10),m=parseInt(j.substr(6,2),10);if(!FormValidation.Helper.date(k,l,m))return!1;if(18===b.length){var n=0,o=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2];for(i=0;17>i;i++)n+=parseInt(b.charAt(i),10)*o[i];n=(12-n%11)%11;var p="X"!==b.charAt(17).toUpperCase()?parseInt(b.charAt(17),10):10;return p===n}return!0},_cz:function(a){if(!/^\d{9,10}$/.test(a))return!1;var b=1900+parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10)%50%20,d=parseInt(a.substr(4,2),10);if(9===a.length){if(b>=1980&&(b-=100),b>1953)return!1}else 1954>b&&(b+=100);if(!FormValidation.Helper.date(b,c,d))return!1;if(10===a.length){var e=parseInt(a.substr(0,9),10)%11;return 1985>b&&(e%=10),e+""===a.substr(9,1)}return!0},_dk:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(a))return!1;a=a.replace(/-/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);switch(!0){case-1!=="5678".indexOf(a.charAt(6))&&d>=58:d+=1800;break;case-1!=="0123".indexOf(a.charAt(6)):case-1!=="49".indexOf(a.charAt(6))&&d>=37:d+=1900;break;default:d+=2e3}return FormValidation.Helper.date(d,c,b)},_ee:function(a){return this._lt(a)},_es:function(a){var b=/^[0-9]{8}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(a),c=/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[A-HJ-NP-TV-Z]$/.test(a),d=/^[A-HNPQS][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-J]$/.test(a);if(!b&&!c&&!d)return!1;a=a.replace(/-/g,"");var e;if(b||c){var f="XYZ".indexOf(a.charAt(0));return-1!==f&&(a=f+a.substr(1)+""),e=parseInt(a.substr(0,8),10),e="TRWAGMYFPDXBNJZSQVHLCKE"[e%23],e===a.substr(8,1)}e=a.substr(1,7);for(var g=a[0],h=a.substr(-1),i=0,j=0;j<e.length;j++)if(j%2!==0)i+=parseInt(e[j],10);else{var k=""+2*parseInt(e[j],10);i+=parseInt(k[0],10),2===k.length&&(i+=parseInt(k[1],10))}var l=i-10*Math.floor(i/10);return 0!==l&&(l=10-l),-1!=="KQS".indexOf(g)?h==="JABCDEFGHI"[l]:-1!=="ABEH".indexOf(g)?h===""+l:h===""+l||h==="JABCDEFGHI"[l]},_fi:function(a){if(!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(a))return!1;var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10),e={"+":1800,"-":1900,A:2e3};if(d=e[a.charAt(6)]+d,!FormValidation.Helper.date(d,c,b))return!1;var f=parseInt(a.substr(7,3),10);if(2>f)return!1;var g=a.substr(0,6)+a.substr(7,3)+"";return g=parseInt(g,10),"0123456789ABCDEFHJKLMNPRSTUVWXY".charAt(g%31)===a.charAt(10)},_hr:function(a){return/^[0-9]{11}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_ie:function(a){if(!/^\d{7}[A-W][AHWTX]?$/.test(a))return!1;var b=function(a){for(;a.length<7;)a="0"+a;for(var b="WABCDEFGHIJKLMNOPQRSTUV",c=0,d=0;7>d;d++)c+=parseInt(a.charAt(d),10)*(8-d);return c+=9*b.indexOf(a.substr(7)),b[c%23]};return 9!==a.length||"A"!==a.charAt(8)&&"H"!==a.charAt(8)?a.charAt(7)===b(a.substr(0,7)):a.charAt(7)===b(a.substr(0,7)+a.substr(8)+"")},_is:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(a))return!1;a=a.replace(/-/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10),e=parseInt(a.charAt(9),10);if(d=9===e?1900+d:100*(20+e)+d,!FormValidation.Helper.date(d,c,b,!0))return!1;for(var f=0,g=[3,2,7,6,5,4,3,2],h=0;8>h;h++)f+=parseInt(a.charAt(h),10)*g[h];return f=11-f%11,f+""===a.charAt(8)},_lt:function(a){if(!/^[0-9]{11}$/.test(a))return!1;var b=parseInt(a.charAt(0),10),c=parseInt(a.substr(1,2),10),d=parseInt(a.substr(3,2),10),e=parseInt(a.substr(5,2),10),f=b%2===0?17+b/2:17+(b+1)/2;if(c=100*f+c,!FormValidation.Helper.date(c,d,e,!0))return!1;for(var g=0,h=[1,2,3,4,5,6,7,8,9,1],i=0;10>i;i++)g+=parseInt(a.charAt(i),10)*h[i];if(g%=11,10!==g)return g+""===a.charAt(10);for(g=0,h=[3,4,5,6,7,8,9,1,2,3],i=0;10>i;i++)g+=parseInt(a.charAt(i),10)*h[i];return g%=11,10===g&&(g=0),g+""===a.charAt(10)},_lv:function(a){if(!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(a))return!1;a=a.replace(/\D/g,"");var b=parseInt(a.substr(0,2),10),c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(d=d+1800+100*parseInt(a.charAt(6),10),!FormValidation.Helper.date(d,c,b,!0))return!1;for(var e=0,f=[10,5,8,4,2,1,6,3,7,9],g=0;10>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=(e+1)%11%10,e+""===a.charAt(10)},_nl:function(a){for(;a.length<9;)a="0"+a;if(!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(a))return!1;if(a=a.replace(/\./g,""),0===parseInt(a,10))return!1;for(var b=0,c=a.length,d=0;c-1>d;d++)b+=(9-d)*parseInt(a.charAt(d),10);return b%=11,10===b&&(b=0),b+""===a.charAt(c-1)},_pl:function(a){if(!/^[0-9]{11}$/.test(a))return!1;for(var b=0,c=a.length,d=[1,3,7,9,1,3,7,9,1,3,7],e=0;c-1>e;e++)b+=d[e]*parseInt(a.charAt(e),10);return b%=10,0===b&&(b=10),b=10-b,b+""===a.charAt(c-1)},_ro:function(a){if(!/^[0-9]{13}$/.test(a))return!1;var b=parseInt(a.charAt(0),10);if(0===b||7===b||8===b)return!1;var c=parseInt(a.substr(1,2),10),d=parseInt(a.substr(3,2),10),e=parseInt(a.substr(5,2),10),f={1:1900,2:1900,3:1800,4:1800,5:2e3,6:2e3};if(e>31&&d>12)return!1;if(9!==b&&(c=f[b+""]+c,!FormValidation.Helper.date(c,d,e)))return!1;for(var g=0,h=[2,7,9,1,4,6,3,5,8,2,7,9],i=a.length,j=0;i-1>j;j++)g+=parseInt(a.charAt(j),10)*h[j];return g%=11,10===g&&(g=1),g+""===a.charAt(i-1)},_se:function(a){if(!/^[0-9]{10}$/.test(a)&&!/^[0-9]{6}[-|+][0-9]{4}$/.test(a))return!1;a=a.replace(/[^0-9]/g,"");var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);return FormValidation.Helper.date(b,c,d)?FormValidation.Helper.luhn(a):!1},_sk:function(a){return this._cz(a)},_sm:function(a){return/^\d{5}$/.test(a)},_th:function(a){if(13!==a.length)return!1;for(var b=0,c=0;12>c;c++)b+=parseInt(a.charAt(c),10)*(13-c);return(11-b%11)%10===parseInt(a.charAt(12),10)},_za:function(a){if(!/^[0-9]{10}[0|1][8|9][0-9]$/.test(a))return!1;var b=parseInt(a.substr(0,2),10),c=(new Date).getFullYear()%100,d=parseInt(a.substr(2,2),10),e=parseInt(a.substr(4,2),10);return b=b>=c?b+1900:b+2e3,FormValidation.Helper.date(b,d,e)?FormValidation.Helper.luhn(a):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{identical:{"default":"Please enter the same value"}}}),FormValidation.Validator.identical={html5Attributes:{message:"message",field:"field"},init:function(a,b,c){var d=a.getFieldElements(c.field);a.onLiveChange(d,"live_identical",function(){var c=a.getStatus(b,"identical");c!==a.STATUS_NOT_VALIDATED&&a.revalidateField(b)})},destroy:function(a,b,c){var d=a.getFieldElements(c.field);a.offLiveChange(d,"live_identical")},validate:function(a,b,c){var d=a.getFieldValue(b,"identical"),e=a.getFieldElements(c.field);if(null===e||0===e.length)return!0;var f=a.getFieldValue(e,"identical");return d===f?(a.updateStatus(e,a.STATUS_VALID,"identical"),!0):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{imei:{"default":"Please enter a valid IMEI number"}}}),FormValidation.Validator.imei={validate:function(a,b){var c=a.getFieldValue(b,"imei");if(""===c)return!0;switch(!0){case/^\d{15}$/.test(c):case/^\d{2}-\d{6}-\d{6}-\d{1}$/.test(c):case/^\d{2}\s\d{6}\s\d{6}\s\d{1}$/.test(c):return c=c.replace(/[^0-9]/g,""),FormValidation.Helper.luhn(c);case/^\d{14}$/.test(c):case/^\d{16}$/.test(c):case/^\d{2}-\d{6}-\d{6}(|-\d{2})$/.test(c):case/^\d{2}\s\d{6}\s\d{6}(|\s\d{2})$/.test(c):return!0;default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{imo:{"default":"Please enter a valid IMO number"}}}),FormValidation.Validator.imo={validate:function(a,b){var c=a.getFieldValue(b,"imo");if(""===c)return!0;if(!/^IMO \d{7}$/i.test(c))return!1;for(var d=0,e=c.replace(/^.*(\d{7})$/,"$1"),f=6;f>=1;f--)d+=e.slice(6-f,-f)*(f+1);return d%10===parseInt(e.charAt(6),10)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{integer:{"default":"Please enter a valid number"}}}),FormValidation.Validator.integer={enableByHtml5:function(a){return"number"===a.attr("type")&&(void 0===a.attr("step")||a.attr("step")%1===0)},validate:function(a,b){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var c=a.getFieldValue(b,"integer");return""===c?!0:/^(?:-?(?:0|[1-9][0-9]*))$/.test(c)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ip:{"default":"Please enter a valid IP address",ipv4:"Please enter a valid IPv4 address",ipv6:"Please enter a valid IPv6 address"}}}),FormValidation.Validator.ip={html5Attributes:{message:"message",ipv4:"ipv4",ipv6:"ipv6"},validate:function(b,c,d){var e=b.getFieldValue(c,"ip");if(""===e)return!0;d=a.extend({},{ipv4:!0,ipv6:!0},d);var f,g=b.getLocale(),h=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,i=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,j=!1;switch(!0){case d.ipv4&&!d.ipv6:j=h.test(e),f=d.message||FormValidation.I18n[g].ip.ipv4;break;case!d.ipv4&&d.ipv6:j=i.test(e),f=d.message||FormValidation.I18n[g].ip.ipv6;break;case d.ipv4&&d.ipv6:default:j=h.test(e)||i.test(e),f=d.message||FormValidation.I18n[g].ip["default"]}return{valid:j,message:f}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{isbn:{"default":"Please enter a valid ISBN number"}}}),FormValidation.Validator.isbn={validate:function(a,b){var c=a.getFieldValue(b,"isbn");if(""===c)return!0;var d;switch(!0){case/^\d{9}[\dX]$/.test(c):case 13===c.length&&/^(\d+)-(\d+)-(\d+)-([\dX])$/.test(c):case 13===c.length&&/^(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(c):d="ISBN10";break;case/^(978|979)\d{9}[\dX]$/.test(c):case 17===c.length&&/^(978|979)-(\d+)-(\d+)-(\d+)-([\dX])$/.test(c):case 17===c.length&&/^(978|979)\s(\d+)\s(\d+)\s(\d+)\s([\dX])$/.test(c):d="ISBN13";break;default:return!1}c=c.replace(/[^0-9X]/gi,"");var e,f,g=c.split(""),h=g.length,i=0;switch(d){case"ISBN10":for(i=0,e=0;h-1>e;e++)i+=parseInt(g[e],10)*(10-e);return f=11-i%11,11===f?f=0:10===f&&(f="X"),f+""===g[h-1];case"ISBN13":for(i=0,e=0;h-1>e;e++)i+=e%2===0?parseInt(g[e],10):3*parseInt(g[e],10);return f=10-i%10,10===f&&(f="0"),f+""===g[h-1];default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{isin:{"default":"Please enter a valid ISIN number"}}}),FormValidation.Validator.isin={COUNTRY_CODES:"AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW",validate:function(a,b){var c=a.getFieldValue(b,"isin");if(""===c)return!0;c=c.toUpperCase();var d=new RegExp("^("+this.COUNTRY_CODES+")[0-9A-Z]{10}$");if(!d.test(c))return!1;for(var e="",f=c.length,g=0;f-1>g;g++){var h=c.charCodeAt(g);e+=h>57?(h-55).toString():c.charAt(g)}var i="",j=e.length,k=j%2!==0?0:1;for(g=0;j>g;g++)i+=parseInt(e[g],10)*(g%2===k?2:1)+"";var l=0;for(g=0;g<i.length;g++)l+=parseInt(i.charAt(g),10);return l=(10-l%10)%10,l+""===c.charAt(f-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{ismn:{"default":"Please enter a valid ISMN number"}}}),FormValidation.Validator.ismn={validate:function(a,b){var c=a.getFieldValue(b,"ismn");if(""===c)return!0;var d;switch(!0){case/^M\d{9}$/.test(c):case/^M-\d{4}-\d{4}-\d{1}$/.test(c):case/^M\s\d{4}\s\d{4}\s\d{1}$/.test(c):d="ISMN10";break;case/^9790\d{9}$/.test(c):case/^979-0-\d{4}-\d{4}-\d{1}$/.test(c):case/^979\s0\s\d{4}\s\d{4}\s\d{1}$/.test(c):d="ISMN13";break;default:return!1}"ISMN10"===d&&(c="9790"+c.substr(1)),c=c.replace(/[^0-9]/gi,"");for(var e=c.length,f=0,g=[1,3],h=0;e-1>h;h++)f+=parseInt(c.charAt(h),10)*g[h%2];return f=10-f%10,f+""===c.charAt(e-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{issn:{"default":"Please enter a valid ISSN number"}}}),FormValidation.Validator.issn={validate:function(a,b){var c=a.getFieldValue(b,"issn");if(""===c)return!0;if(!/^\d{4}\-\d{3}[\dX]$/.test(c))return!1;c=c.replace(/[^0-9X]/gi,"");var d=c.split(""),e=d.length,f=0;"X"===d[7]&&(d[7]=10);for(var g=0;e>g;g++)f+=parseInt(d[g],10)*(8-g);return f%11===0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{lessThan:{"default":"Please enter a value less than or equal to %s",notInclusive:"Please enter a value less than %s"}}}),FormValidation.Validator.lessThan={html5Attributes:{message:"message",value:"value",inclusive:"inclusive"},enableByHtml5:function(a){var b=a.attr("type"),c=a.attr("max");return c&&"date"!==b?{value:c}:!1},validate:function(b,c,d){var e=b.getFieldValue(c,"lessThan");if(""===e)return!0;if(e=this._format(e),!a.isNumeric(e))return!1;var f=b.getLocale(),g=a.isNumeric(d.value)?d.value:b.getDynamicOption(c,d.value),h=this._format(g);return e=parseFloat(e),d.inclusive===!0||void 0===d.inclusive?{valid:h>=e,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].lessThan["default"],g)}:{valid:h>e,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].lessThan.notInclusive,g)}},_format:function(a){return(a+"").replace(",",".")}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{mac:{"default":"Please enter a valid MAC address"}}}),FormValidation.Validator.mac={validate:function(a,b){var c=a.getFieldValue(b,"mac");return""===c?!0:/^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(c)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{meid:{"default":"Please enter a valid MEID number"}}}),FormValidation.Validator.meid={validate:function(a,b){var c=a.getFieldValue(b,"meid");if(""===c)return!0;switch(!0){case/^[0-9A-F]{15}$/i.test(c):case/^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(c):case/^\d{19}$/.test(c):case/^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}[- ]\d$/.test(c):var d=c.charAt(c.length-1);if(c=c.replace(/[- ]/g,""),c.match(/^\d*$/i))return FormValidation.Helper.luhn(c);c=c.slice(0,-1);for(var e="",f=1;13>=f;f+=2)e+=(2*parseInt(c.charAt(f),16)).toString(16);var g=0;for(f=0;f<e.length;f++)g+=parseInt(e.charAt(f),16);return g%10===0?"0"===d:d===(2*(10*Math.floor((g+10)/10)-g)).toString(16);case/^[0-9A-F]{14}$/i.test(c):case/^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(c):case/^\d{18}$/.test(c):case/^\d{5}[- ]\d{5}[- ]\d{4}[- ]\d{4}$/.test(c):return!0;default:return!1}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{notEmpty:{"default":"Please enter a value"}}}),FormValidation.Validator.notEmpty={enableByHtml5:function(a){var b=a.attr("required")+"";return"required"===b||"true"===b},validate:function(b,c){var d=c.attr("type");if("radio"===d||"checkbox"===d){var e=b.getNamespace();return b.getFieldElements(c.attr("data-"+e+"-field")).filter(":checked").length>0}if("number"===d&&c.get(0).validity&&c.get(0).validity.badInput===!0)return!0;var f=b.getFieldValue(c,"notEmpty");return""!==a.trim(f)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{numeric:{"default":"Please enter a valid float number"}}}),FormValidation.Validator.numeric={html5Attributes:{message:"message",separator:"separator"},enableByHtml5:function(a){return"number"===a.attr("type")&&void 0!==a.attr("step")&&a.attr("step")%1!==0},validate:function(a,b,c){if(this.enableByHtml5(b)&&b.get(0).validity&&b.get(0).validity.badInput===!0)return!1;var d=a.getFieldValue(b,"numeric");if(""===d)return!0;var e=c.separator||".";return"."!==e&&(d=d.replace(e,".")),!isNaN(parseFloat(d))&&isFinite(d)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{phone:{"default":"Please enter a valid phone number",country:"Please enter a valid phone number in %s",countries:{AE:"United Arab Emirates",BG:"Bulgaria",BR:"Brazil",CN:"China",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",ES:"Spain",FR:"France",GB:"United Kingdom",IN:"India",MA:"Morocco",NL:"Netherlands",PK:"Pakistan",RO:"Romania",RU:"Russia",SK:"Slovakia",TH:"Thailand",US:"USA",VE:"Venezuela"}}}}),FormValidation.Validator.phone={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AE","BG","BR","CN","CZ","DE","DK","ES","FR","GB","IN","MA","NL","PK","RO","RU","SK","TH","US","VE"],validate:function(b,c,d){var e=b.getFieldValue(c,"phone");if(""===e)return!0;var f=b.getLocale(),g=d.country;if(("string"!=typeof g||-1===a.inArray(g,this.COUNTRY_CODES))&&(g=b.getDynamicOption(c,g)),!g||-1===a.inArray(g.toUpperCase(),this.COUNTRY_CODES))return!0;var h=!0;switch(g.toUpperCase()){case"AE":e=a.trim(e),h=/^(((\+|00)?971[\s\.-]?(\(0\)[\s\.-]?)?|0)(\(5(0|2|5|6)\)|5(0|2|5|6)|2|3|4|6|7|9)|60)([\s\.-]?[0-9]){7}$/.test(e);break;case"BG":e=e.replace(/\+|\s|-|\/|\(|\)/gi,""),h=/^(0|359|00)(((700|900)[0-9]{5}|((800)[0-9]{5}|(800)[0-9]{4}))|(87|88|89)([0-9]{7})|((2[0-9]{7})|(([3-9][0-9])(([0-9]{6})|([0-9]{5})))))$/.test(e);break;case"BR":e=a.trim(e),h=/^(([\d]{4}[-.\s]{1}[\d]{2,3}[-.\s]{1}[\d]{2}[-.\s]{1}[\d]{2})|([\d]{4}[-.\s]{1}[\d]{3}[-.\s]{1}[\d]{4})|((\(?\+?[0-9]{2}\)?\s?)?(\(?\d{2}\)?\s?)?\d{4,5}[-.\s]?\d{4}))$/.test(e);break;case"CN":e=a.trim(e),h=/^((00|\+)?(86(?:-| )))?((\d{11})|(\d{3}[- ]{1}\d{4}[- ]{1}\d{4})|((\d{2,4}[- ]){1}(\d{7,8}|(\d{3,4}[- ]{1}\d{4}))([- ]{1}\d{1,4})?))$/.test(e);break;case"CZ":h=/^(((00)([- ]?)|\+)(420)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(e);break;case"DE":e=a.trim(e),h=/^(((((((00|\+)49[ \-/]?)|0)[1-9][0-9]{1,4})[ \-/]?)|((((00|\+)49\()|\(0)[1-9][0-9]{1,4}\)[ \-/]?))[0-9]{1,7}([ \-/]?[0-9]{1,5})?)$/.test(e);break;case"DK":e=a.trim(e),h=/^(\+45|0045|\(45\))?\s?[2-9](\s?\d){7}$/.test(e);break;case"ES":e=a.trim(e),h=/^(?:(?:(?:\+|00)34\D?))?(?:5|6|7|8|9)(?:\d\D?){8}$/.test(e);break;case"FR":e=a.trim(e),h=/^(?:(?:(?:\+|00)33[ ]?(?:\(0\)[ ]?)?)|0){1}[1-9]{1}([ .-]?)(?:\d{2}\1?){3}\d{2}$/.test(e);break;case"GB":e=a.trim(e),h=/^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)$/.test(e);break;case"IN":e=a.trim(e),h=/((\+?)((0[ -]+)*|(91 )*)(\d{12}|\d{10}))|\d{5}([- ]*)\d{6}/.test(e);break;case"MA":e=a.trim(e),h=/^(?:(?:(?:\+|00)212[\s]?(?:[\s]?\(0\)[\s]?)?)|0){1}(?:5[\s.-]?[2-3]|6[\s.-]?[13-9]){1}[0-9]{1}(?:[\s.-]?\d{2}){3}$/.test(e);break;case"NL":e=a.trim(e),h=/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9])((\s|\s?-\s?)?[0-9])((\s|\s?-\s?)?[0-9])\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]\s?[0-9]$/gm.test(e);break;case"PK":e=a.trim(e),h=/^0?3[0-9]{2}[0-9]{7}$/.test(e);break;case"RO":h=/^(\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\s|\.|\-)?([0-9]{3}(\s|\.|\-|)){2}$/g.test(e);break;case"RU":h=/^((8|\+7|007)[\-\.\/ ]?)?([\(\/\.]?\d{3}[\)\/\.]?[\-\.\/ ]?)?[\d\-\.\/ ]{7,10}$/g.test(e);break;case"SK":h=/^(((00)([- ]?)|\+)(421)([- ]?))?((\d{3})([- ]?)){2}(\d{3})$/.test(e);break;case"TH":h=/^0\(?([6|8-9]{2})*-([0-9]{3})*-([0-9]{4})$/.test(e);break;case"VE":e=a.trim(e),h=/^0(?:2(?:12|4[0-9]|5[1-9]|6[0-9]|7[0-8]|8[1-35-8]|9[1-5]|3[45789])|4(?:1[246]|2[46]))\d{7}$/.test(e);break;case"US":default:h=/^(?:(1\-?)|(\+1 ?))?\(?(\d{3})[\)\-\.]?(\d{3})[\-\.]?(\d{4})$/.test(e)}return{valid:h,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].phone.country,FormValidation.I18n[f].phone.countries[g])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{regexp:{"default":"Please enter a value matching the pattern"}}}),FormValidation.Validator.regexp={html5Attributes:{message:"message",regexp:"regexp"},enableByHtml5:function(a){var b=a.attr("pattern");return b?{regexp:b}:!1},validate:function(a,b,c){var d=a.getFieldValue(b,"regexp");if(""===d)return!0;var e="string"==typeof c.regexp?new RegExp(c.regexp):c.regexp;return e.test(d)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{remote:{"default":"Please enter a valid value"}}}),FormValidation.Validator.remote={html5Attributes:{crossdomain:"crossDomain",data:"data",datatype:"dataType",delay:"delay",message:"message",name:"name",type:"type",url:"url",validkey:"validKey"},destroy:function(a,b){var c=a.getNamespace(),d=b.data(c+".remote.timer");d&&(clearTimeout(d),b.removeData(c+".remote.timer"))},validate:function(b,c,d){function e(){var b=a.ajax(m);return b.success(function(a){a.valid=a[l]===!0||"true"===a[l],h.resolve(c,"remote",a)}).error(function(){h.resolve(c,"remote",{valid:!1})}),h.fail(function(){b.abort()}),h}var f=b.getNamespace(),g=b.getFieldValue(c,"remote"),h=new a.Deferred;if(""===g)return h.resolve(c,"remote",{valid:!0}),h;var i=c.attr("data-"+f+"-field"),j=d.data||{},k=d.url,l=d.validKey||"valid";"function"==typeof j&&(j=j.call(this,b)),"string"==typeof j&&(j=JSON.parse(j)),"function"==typeof k&&(k=k.call(this,b)),j[d.name||i]=g;var m={data:j,dataType:d.dataType||"json",headers:d.headers||{},type:d.type||"GET",url:k};return null!==d.crossDomain&&(m.crossDomain=d.crossDomain===!0||"true"===d.crossDomain),d.delay?(c.data(f+".remote.timer")&&clearTimeout(c.data(f+".remote.timer")),c.data(f+".remote.timer",setTimeout(e,d.delay)),h):e()}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{rtn:{"default":"Please enter a valid RTN number"}}}),FormValidation.Validator.rtn={validate:function(a,b){var c=a.getFieldValue(b,"rtn");if(""===c)return!0;if(!/^\d{9}$/.test(c))return!1;for(var d=0,e=0;e<c.length;e+=3)d+=3*parseInt(c.charAt(e),10)+7*parseInt(c.charAt(e+1),10)+parseInt(c.charAt(e+2),10);return 0!==d&&d%10===0
}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{sedol:{"default":"Please enter a valid SEDOL number"}}}),FormValidation.Validator.sedol={validate:function(a,b){var c=a.getFieldValue(b,"sedol");if(""===c)return!0;if(c=c.toUpperCase(),!/^[0-9A-Z]{7}$/.test(c))return!1;for(var d=0,e=[1,3,1,7,3,9,1],f=c.length,g=0;f-1>g;g++)d+=e[g]*parseInt(c.charAt(g),36);return d=(10-d%10)%10,d+""===c.charAt(f-1)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{siren:{"default":"Please enter a valid SIREN number"}}}),FormValidation.Validator.siren={validate:function(a,b){var c=a.getFieldValue(b,"siren");return""===c?!0:/^\d{9}$/.test(c)?FormValidation.Helper.luhn(c):!1}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{siret:{"default":"Please enter a valid SIRET number"}}}),FormValidation.Validator.siret={validate:function(a,b){var c=a.getFieldValue(b,"siret");if(""===c)return!0;for(var d,e=0,f=c.length,g=0;f>g;g++)d=parseInt(c.charAt(g),10),g%2===0&&(d=2*d,d>9&&(d-=9)),e+=d;return e%10===0}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{step:{"default":"Please enter a valid step of %s"}}}),FormValidation.Validator.step={html5Attributes:{message:"message",base:"baseValue",step:"step"},validate:function(b,c,d){var e=b.getFieldValue(c,"step");if(""===e)return!0;if(d=a.extend({},{baseValue:0,step:1},d),e=parseFloat(e),!a.isNumeric(e))return!1;var f=function(a,b){var c=Math.pow(10,b);a*=c;var d=a>0|-(0>a),e=a%1===.5*d;return e?(Math.floor(a)+(d>0))/c:Math.round(a)/c},g=function(a,b){if(0===b)return 1;var c=(a+"").split("."),d=(b+"").split("."),e=(1===c.length?0:c[1].length)+(1===d.length?0:d[1].length);return f(a-b*Math.floor(a/b),e)},h=b.getLocale(),i=g(e-d.baseValue,d.step);return{valid:0===i||i===d.step,message:FormValidation.Helper.format(d.message||FormValidation.I18n[h].step["default"],[d.step])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{stringCase:{"default":"Please enter only lowercase characters",upper:"Please enter only uppercase characters"}}}),FormValidation.Validator.stringCase={html5Attributes:{message:"message","case":"case"},validate:function(a,b,c){var d=a.getFieldValue(b,"stringCase");if(""===d)return!0;var e=a.getLocale(),f=(c["case"]||"lower").toLowerCase();return{valid:"upper"===f?d===d.toUpperCase():d===d.toLowerCase(),message:c.message||("upper"===f?FormValidation.I18n[e].stringCase.upper:FormValidation.I18n[e].stringCase["default"])}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{stringLength:{"default":"Please enter a value with valid length",less:"Please enter less than %s characters",more:"Please enter more than %s characters",between:"Please enter value between %s and %s characters long"}}}),FormValidation.Validator.stringLength={html5Attributes:{message:"message",min:"min",max:"max",trim:"trim",utf8bytes:"utf8Bytes"},enableByHtml5:function(b){var c={},d=b.attr("maxlength"),e=b.attr("minlength");return d&&(c.max=parseInt(d,10)),e&&(c.min=parseInt(e,10)),a.isEmptyObject(c)?!1:c},validate:function(b,c,d){var e=b.getFieldValue(c,"stringLength");if((d.trim===!0||"true"===d.trim)&&(e=a.trim(e)),""===e)return!0;var f=b.getLocale(),g=a.isNumeric(d.min)?d.min:b.getDynamicOption(c,d.min),h=a.isNumeric(d.max)?d.max:b.getDynamicOption(c,d.max),i=function(a){for(var b=a.length,c=a.length-1;c>=0;c--){var d=a.charCodeAt(c);d>127&&2047>=d?b++:d>2047&&65535>=d&&(b+=2),d>=56320&&57343>=d&&c--}return b},j=d.utf8Bytes?i(e):e.length,k=!0,l=d.message||FormValidation.I18n[f].stringLength["default"];switch((g&&j<parseInt(g,10)||h&&j>parseInt(h,10))&&(k=!1),!0){case!!g&&!!h:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].stringLength.between,[parseInt(g,10),parseInt(h,10)]);break;case!!g:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].stringLength.more,parseInt(g,10));break;case!!h:l=FormValidation.Helper.format(d.message||FormValidation.I18n[f].stringLength.less,parseInt(h,10))}return{valid:k,message:l}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{uri:{"default":"Please enter a valid URI"}}}),FormValidation.Validator.uri={html5Attributes:{message:"message",allowlocal:"allowLocal",allowemptyprotocol:"allowEmptyProtocol",protocol:"protocol"},enableByHtml5:function(a){return"url"===a.attr("type")},validate:function(a,b,c){var d=a.getFieldValue(b,"uri");if(""===d)return!0;var e=c.allowLocal===!0||"true"===c.allowLocal,f=c.allowEmptyProtocol===!0||"true"===c.allowEmptyProtocol,g=(c.protocol||"http, https, ftp").split(",").join("|").replace(/\s/g,""),h=new RegExp("^(?:(?:"+g+")://)"+(f?"?":"")+"(?:\\S+(?::\\S*)?@)?(?:"+(e?"":"(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})")+"(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-?)*[a-z\\u00a1-\\uffff0-9])*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"+(e?"?":"")+")(?::\\d{2,5})?(?:/[^\\s]*)?$","i");return h.test(d)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{uuid:{"default":"Please enter a valid UUID number",version:"Please enter a valid UUID version %s number"}}}),FormValidation.Validator.uuid={html5Attributes:{message:"message",version:"version"},validate:function(a,b,c){var d=a.getFieldValue(b,"uuid");if(""===d)return!0;var e=a.getLocale(),f={3:/^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,4:/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,5:/^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,all:/^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i},g=c.version?c.version+"":"all";return{valid:null===f[g]?!0:f[g].test(d),message:c.version?FormValidation.Helper.format(c.message||FormValidation.I18n[e].uuid.version,c.version):c.message||FormValidation.I18n[e].uuid["default"]}}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{vat:{"default":"Please enter a valid VAT number",country:"Please enter a valid VAT number in %s",countries:{AT:"Austria",BE:"Belgium",BG:"Bulgaria",BR:"Brazil",CH:"Switzerland",CY:"Cyprus",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",EE:"Estonia",ES:"Spain",FI:"Finland",FR:"France",GB:"United Kingdom",GR:"Greek",EL:"Greek",HU:"Hungary",HR:"Croatia",IE:"Ireland",IS:"Iceland",IT:"Italy",LT:"Lithuania",LU:"Luxembourg",LV:"Latvia",MT:"Malta",NL:"Netherlands",NO:"Norway",PL:"Poland",PT:"Portugal",RO:"Romania",RU:"Russia",RS:"Serbia",SE:"Sweden",SI:"Slovenia",SK:"Slovakia",VE:"Venezuela",ZA:"South Africa"}}}}),FormValidation.Validator.vat={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AT","BE","BG","BR","CH","CY","CZ","DE","DK","EE","EL","ES","FI","FR","GB","GR","HR","HU","IE","IS","IT","LT","LU","LV","MT","NL","NO","PL","PT","RO","RU","RS","SE","SK","SI","VE","ZA"],validate:function(b,c,d){var e=b.getFieldValue(c,"vat");if(""===e)return!0;var f=b.getLocale(),g=d.country;if(g?("string"!=typeof g||-1===a.inArray(g.toUpperCase(),this.COUNTRY_CODES))&&(g=b.getDynamicOption(c,g)):g=e.substr(0,2),-1===a.inArray(g,this.COUNTRY_CODES))return!0;var h=["_",g.toLowerCase()].join("");return this[h](e)?!0:{valid:!1,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].vat.country,FormValidation.I18n[f].vat.countries[g.toUpperCase()])}},_at:function(a){if(/^ATU[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^U[0-9]{8}$/.test(a))return!1;a=a.substr(1);for(var b=0,c=[1,2,1,2,1,2,1],d=0,e=0;7>e;e++)d=parseInt(a.charAt(e),10)*c[e],d>9&&(d=Math.floor(d/10)+d%10),b+=d;return b=10-(b+4)%10,10===b&&(b=0),b+""===a.substr(7,1)},_be:function(a){if(/^BE[0]{0,1}[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0]{0,1}[0-9]{9}$/.test(a))return!1;if(9===a.length&&(a="0"+a),"0"===a.substr(1,1))return!1;var b=parseInt(a.substr(0,8),10)+parseInt(a.substr(8,2),10);return b%97===0},_bg:function(a){if(/^BG[0-9]{9,10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9,10}$/.test(a))return!1;var b=0,c=0;if(9===a.length){for(c=0;8>c;c++)b+=parseInt(a.charAt(c),10)*(c+1);if(b%=11,10===b)for(b=0,c=0;8>c;c++)b+=parseInt(a.charAt(c),10)*(c+3);return b%=10,b+""===a.substr(8)}if(10===a.length){var d=function(a){var b=parseInt(a.substr(0,2),10)+1900,c=parseInt(a.substr(2,2),10),d=parseInt(a.substr(4,2),10);if(c>40?(b+=100,c-=40):c>20&&(b-=100,c-=20),!FormValidation.Helper.date(b,c,d))return!1;for(var e=0,f=[2,4,8,5,10,9,7,3,6],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e=e%11%10,e+""===a.substr(9,1)},e=function(a){for(var b=0,c=[21,19,17,13,11,9,7,3,1],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%=10,b+""===a.substr(9,1)},f=function(a){for(var b=0,c=[4,3,2,7,6,5,4,3,2],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,10===b?!1:(11===b&&(b=0),b+""===a.substr(9,1))};return d(a)||e(a)||f(a)}return!1},_br:function(a){if(""===a)return!0;var b=a.replace(/[^\d]+/g,"");if(""===b||14!==b.length)return!1;if("00000000000000"===b||"11111111111111"===b||"22222222222222"===b||"33333333333333"===b||"44444444444444"===b||"55555555555555"===b||"66666666666666"===b||"77777777777777"===b||"88888888888888"===b||"99999999999999"===b)return!1;for(var c=b.length-2,d=b.substring(0,c),e=b.substring(c),f=0,g=c-7,h=c;h>=1;h--)f+=parseInt(d.charAt(c-h),10)*g--,2>g&&(g=9);var i=2>f%11?0:11-f%11;if(i!==parseInt(e.charAt(0),10))return!1;for(c+=1,d=b.substring(0,c),f=0,g=c-7,h=c;h>=1;h--)f+=parseInt(d.charAt(c-h),10)*g--,2>g&&(g=9);return i=2>f%11?0:11-f%11,i===parseInt(e.charAt(1),10)},_ch:function(a){if(/^CHE[0-9]{9}(MWST)?$/.test(a)&&(a=a.substr(2)),!/^E[0-9]{9}(MWST)?$/.test(a))return!1;a=a.substr(1);for(var b=0,c=[5,4,3,2,7,6,5,4],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,10===b?!1:(11===b&&(b=0),b+""===a.substr(8,1))},_cy:function(a){if(/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(a)&&(a=a.substr(2)),!/^[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(a))return!1;if("12"===a.substr(0,2))return!1;for(var b=0,c={0:1,1:0,2:5,3:7,4:9,5:13,6:15,7:17,8:19,9:21},d=0;8>d;d++){var e=parseInt(a.charAt(d),10);d%2===0&&(e=c[e+""]),b+=e}return b="ABCDEFGHIJKLMNOPQRSTUVWXYZ"[b%26],b+""===a.substr(8,1)},_cz:function(a){if(/^CZ[0-9]{8,10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8,10}$/.test(a))return!1;var b=0,c=0;if(8===a.length){if(a.charAt(0)+""=="9")return!1;for(b=0,c=0;7>c;c++)b+=parseInt(a.charAt(c),10)*(8-c);return b=11-b%11,10===b&&(b=0),11===b&&(b=1),b+""===a.substr(7,1)}if(9===a.length&&a.charAt(0)+""=="6"){for(b=0,c=0;7>c;c++)b+=parseInt(a.charAt(c+1),10)*(8-c);return b=11-b%11,10===b&&(b=0),11===b&&(b=1),b=[8,7,6,5,4,3,2,1,0,9,10][b-1],b+""===a.substr(8,1)}if(9===a.length||10===a.length){var d=1900+parseInt(a.substr(0,2),10),e=parseInt(a.substr(2,2),10)%50%20,f=parseInt(a.substr(4,2),10);if(9===a.length){if(d>=1980&&(d-=100),d>1953)return!1}else 1954>d&&(d+=100);if(!FormValidation.Helper.date(d,e,f))return!1;if(10===a.length){var g=parseInt(a.substr(0,9),10)%11;return 1985>d&&(g%=10),g+""===a.substr(9,1)}return!0}return!1},_de:function(a){return/^DE[0-9]{9}$/.test(a)&&(a=a.substr(2)),/^[0-9]{9}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_dk:function(a){if(/^DK[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[2,7,6,5,4,3,2,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_ee:function(a){if(/^EE[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[3,7,1,3,7,1,3,7,1],d=0;9>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%10===0},_es:function(a){if(/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(a)&&(a=a.substr(2)),!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(a))return!1;var b=function(a){var b=parseInt(a.substr(0,8),10);return b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1)},c=function(a){var b=["XYZ".indexOf(a.charAt(0)),a.substr(1)].join("");return b=parseInt(b,10),b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1)},d=function(a){var b,c=a.charAt(0);if(-1!=="KLM".indexOf(c))return b=parseInt(a.substr(1,8),10),b="TRWAGMYFPDXBNJZSQVHLCKE"[b%23],b+""===a.substr(8,1);if(-1!=="ABCDEFGHJNPQRSUVW".indexOf(c)){for(var d=0,e=[2,1,2,1,2,1,2],f=0,g=0;7>g;g++)f=parseInt(a.charAt(g+1),10)*e[g],f>9&&(f=Math.floor(f/10)+f%10),d+=f;return d=10-d%10,d+""===a.substr(8,1)||"JABCDEFGHI"[d]===a.substr(8,1)}return!1},e=a.charAt(0);return/^[0-9]$/.test(e)?b(a):/^[XYZ]$/.test(e)?c(a):d(a)},_fi:function(a){if(/^FI[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[7,9,10,5,8,4,2,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_fr:function(a){if(/^FR[0-9A-Z]{2}[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9A-Z]{2}[0-9]{9}$/.test(a))return!1;if(!FormValidation.Helper.luhn(a.substr(2)))return!1;if(/^[0-9]{2}$/.test(a.substr(0,2)))return a.substr(0,2)===parseInt(a.substr(2)+"12",10)%97+"";var b,c="0123456789ABCDEFGHJKLMNPQRSTUVWXYZ";return b=/^[0-9]{1}$/.test(a.charAt(0))?24*c.indexOf(a.charAt(0))+c.indexOf(a.charAt(1))-10:34*c.indexOf(a.charAt(0))+c.indexOf(a.charAt(1))-100,(parseInt(a.substr(2),10)+1+Math.floor(b/11))%11===b%11},_gb:function(a){if((/^GB[0-9]{9}$/.test(a)||/^GB[0-9]{12}$/.test(a)||/^GBGD[0-9]{3}$/.test(a)||/^GBHA[0-9]{3}$/.test(a)||/^GB(GD|HA)8888[0-9]{5}$/.test(a))&&(a=a.substr(2)),!(/^[0-9]{9}$/.test(a)||/^[0-9]{12}$/.test(a)||/^GD[0-9]{3}$/.test(a)||/^HA[0-9]{3}$/.test(a)||/^(GD|HA)8888[0-9]{5}$/.test(a)))return!1;var b=a.length;if(5===b){var c=a.substr(0,2),d=parseInt(a.substr(2),10);return"GD"===c&&500>d||"HA"===c&&d>=500}if(11===b&&("GD8888"===a.substr(0,6)||"HA8888"===a.substr(0,6)))return"GD"===a.substr(0,2)&&parseInt(a.substr(6,3),10)>=500||"HA"===a.substr(0,2)&&parseInt(a.substr(6,3),10)<500?!1:parseInt(a.substr(6,3),10)%97===parseInt(a.substr(9,2),10);if(9===b||12===b){for(var e=0,f=[8,7,6,5,4,3,2,10,1],g=0;9>g;g++)e+=parseInt(a.charAt(g),10)*f[g];return e%=97,parseInt(a.substr(0,3),10)>=100?0===e||42===e||55===e:0===e}return!0},_gr:function(a){if(/^(GR|EL)[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;8===a.length&&(a="0"+a);for(var b=0,c=[256,128,64,32,16,8,4,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=b%11%10,b+""===a.substr(8,1)},_el:function(a){return this._gr(a)},_hu:function(a){if(/^HU[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[9,7,3,1,9,7,3,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%10===0},_hr:function(a){return/^HR[0-9]{11}$/.test(a)&&(a=a.substr(2)),/^[0-9]{11}$/.test(a)?FormValidation.Helper.mod11And10(a):!1},_ie:function(a){if(/^IE[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{1}[0-9A-Z\*\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(a))return!1;var b=function(a){for(;a.length<7;)a="0"+a;for(var b="WABCDEFGHIJKLMNOPQRSTUV",c=0,d=0;7>d;d++)c+=parseInt(a.charAt(d),10)*(8-d);return c+=9*b.indexOf(a.substr(7)),b[c%23]};return/^[0-9]+$/.test(a.substr(0,7))?a.charAt(7)===b(a.substr(0,7)+a.substr(8)+""):-1!=="ABCDEFGHIJKLMNOPQRSTUVWXYZ+*".indexOf(a.charAt(1))?a.charAt(7)===b(a.substr(2,5)+a.substr(0,1)+""):!0},_is:function(a){return/^IS[0-9]{5,6}$/.test(a)&&(a=a.substr(2)),/^[0-9]{5,6}$/.test(a)},_it:function(a){if(/^IT[0-9]{11}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{11}$/.test(a))return!1;if(0===parseInt(a.substr(0,7),10))return!1;var b=parseInt(a.substr(7,3),10);return 1>b||b>201&&999!==b&&888!==b?!1:FormValidation.Helper.luhn(a)},_lt:function(a){if(/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(a)&&(a=a.substr(2)),!/^([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(a))return!1;var b,c=a.length,d=0;for(b=0;c-1>b;b++)d+=parseInt(a.charAt(b),10)*(1+b%9);var e=d%11;if(10===e)for(d=0,b=0;c-1>b;b++)d+=parseInt(a.charAt(b),10)*(1+(b+2)%9);return e=e%11%10,e+""===a.charAt(c-1)},_lu:function(a){return/^LU[0-9]{8}$/.test(a)&&(a=a.substr(2)),/^[0-9]{8}$/.test(a)?parseInt(a.substr(0,6),10)%89+""===a.substr(6,2):!1},_lv:function(a){if(/^LV[0-9]{11}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{11}$/.test(a))return!1;var b,c=parseInt(a.charAt(0),10),d=0,e=[],f=a.length;if(c>3){for(d=0,e=[9,1,4,8,3,10,2,5,7,6,1],b=0;f>b;b++)d+=parseInt(a.charAt(b),10)*e[b];return d%=11,3===d}var g=parseInt(a.substr(0,2),10),h=parseInt(a.substr(2,2),10),i=parseInt(a.substr(4,2),10);if(i=i+1800+100*parseInt(a.charAt(6),10),!FormValidation.Helper.date(i,h,g))return!1;for(d=0,e=[10,5,8,4,2,1,6,3,7,9],b=0;f-1>b;b++)d+=parseInt(a.charAt(b),10)*e[b];return d=(d+1)%11%10,d+""===a.charAt(f-1)},_mt:function(a){if(/^MT[0-9]{8}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{8}$/.test(a))return!1;for(var b=0,c=[3,4,6,7,8,9,10,1],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%37===0},_nl:function(a){if(/^NL[0-9]{9}B[0-9]{2}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}B[0-9]{2}$/.test(a))return!1;for(var b=0,c=[9,8,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%=11,b>9&&(b=0),b+""===a.substr(8,1)},_no:function(a){if(/^NO[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[3,2,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,11===b&&(b=0),b+""===a.substr(8,1)},_pl:function(a){if(/^PL[0-9]{10}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{10}$/.test(a))return!1;for(var b=0,c=[6,5,7,2,3,4,5,6,7,-1],d=0;10>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b%11===0},_pt:function(a){if(/^PT[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=0,c=[9,8,7,6,5,4,3,2],d=0;8>d;d++)b+=parseInt(a.charAt(d),10)*c[d];return b=11-b%11,b>9&&(b=0),b+""===a.substr(8,1)},_ro:function(a){if(/^RO[1-9][0-9]{1,9}$/.test(a)&&(a=a.substr(2)),!/^[1-9][0-9]{1,9}$/.test(a))return!1;for(var b=a.length,c=[7,5,3,2,1,7,5,3,2].slice(10-b),d=0,e=0;b-1>e;e++)d+=parseInt(a.charAt(e),10)*c[e];return d=10*d%11%10,d+""===a.substr(b-1,1)},_ru:function(a){if(/^RU([0-9]{10}|[0-9]{12})$/.test(a)&&(a=a.substr(2)),!/^([0-9]{10}|[0-9]{12})$/.test(a))return!1;var b=0;if(10===a.length){var c=0,d=[2,4,10,3,5,9,4,6,8,0];for(b=0;10>b;b++)c+=parseInt(a.charAt(b),10)*d[b];return c%=11,c>9&&(c%=10),c+""===a.substr(9,1)}if(12===a.length){var e=0,f=[7,2,4,10,3,5,9,4,6,8,0],g=0,h=[3,7,2,4,10,3,5,9,4,6,8,0];for(b=0;11>b;b++)e+=parseInt(a.charAt(b),10)*f[b],g+=parseInt(a.charAt(b),10)*h[b];return e%=11,e>9&&(e%=10),g%=11,g>9&&(g%=10),e+""===a.substr(10,1)&&g+""===a.substr(11,1)}return!1},_rs:function(a){if(/^RS[0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[0-9]{9}$/.test(a))return!1;for(var b=10,c=0,d=0;8>d;d++)c=(parseInt(a.charAt(d),10)+b)%10,0===c&&(c=10),b=2*c%11;return(b+parseInt(a.substr(8,1),10))%10===1},_se:function(a){return/^SE[0-9]{10}01$/.test(a)&&(a=a.substr(2)),/^[0-9]{10}01$/.test(a)?(a=a.substr(0,10),FormValidation.Helper.luhn(a)):!1},_si:function(a){var b=a.match(/^(SI)?([1-9][0-9]{7})$/);if(!b)return!1;b[1]&&(a=a.substr(2));for(var c=0,d=[8,7,6,5,4,3,2],e=0;7>e;e++)c+=parseInt(a.charAt(e),10)*d[e];return c=11-c%11,10===c&&(c=0),c+""===a.substr(7,1)},_sk:function(a){return/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(a)&&(a=a.substr(2)),/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(a)?parseInt(a,10)%11===0:!1},_ve:function(a){if(/^VE[VEJPG][0-9]{9}$/.test(a)&&(a=a.substr(2)),!/^[VEJPG][0-9]{9}$/.test(a))return!1;for(var b={V:4,E:8,J:12,P:16,G:20},c=b[a.charAt(0)],d=[3,2,7,6,5,4,3,2],e=0;8>e;e++)c+=parseInt(a.charAt(e+1),10)*d[e];return c=11-c%11,(11===c||10===c)&&(c=0),c+""===a.substr(9,1)},_za:function(a){return/^ZA4[0-9]{9}$/.test(a)&&(a=a.substr(2)),/^4[0-9]{9}$/.test(a)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{vin:{"default":"Please enter a valid VIN number"}}}),FormValidation.Validator.vin={validate:function(a,b){var c=a.getFieldValue(b,"vin");if(""===c)return!0;if(!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(c))return!1;c=c.toUpperCase();for(var d={A:1,B:2,C:3,D:4,E:5,F:6,G:7,H:8,J:1,K:2,L:3,M:4,N:5,P:7,R:9,S:2,T:3,U:4,V:5,W:6,X:7,Y:8,Z:9,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,0:0},e=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2],f=0,g=c.length,h=0;g>h;h++)f+=d[c.charAt(h)+""]*e[h];var i=f%11;return 10===i&&(i="X"),i+""===c.charAt(8)}}}(jQuery),function(a){FormValidation.I18n=a.extend(!0,FormValidation.I18n||{},{en_US:{zipCode:{"default":"Please enter a valid postal code",country:"Please enter a valid postal code in %s",countries:{AT:"Austria",BG:"Bulgaria",BR:"Brazil",CA:"Canada",CH:"Switzerland",CZ:"Czech Republic",DE:"Germany",DK:"Denmark",ES:"Spain",FR:"France",GB:"United Kingdom",IE:"Ireland",IN:"India",IT:"Italy",MA:"Morocco",NL:"Netherlands",PL:"Poland",PT:"Portugal",RO:"Romania",RU:"Russia",SE:"Sweden",SG:"Singapore",SK:"Slovakia",US:"USA"}}}}),FormValidation.Validator.zipCode={html5Attributes:{message:"message",country:"country"},COUNTRY_CODES:["AT","BG","BR","CA","CH","CZ","DE","DK","ES","FR","GB","IE","IN","IT","MA","NL","PL","PT","RO","RU","SE","SG","SK","US"],validate:function(b,c,d){var e=b.getFieldValue(c,"zipCode");if(""===e||!d.country)return!0;var f=b.getLocale(),g=d.country;if(("string"!=typeof g||-1===a.inArray(g,this.COUNTRY_CODES))&&(g=b.getDynamicOption(c,g)),!g||-1===a.inArray(g.toUpperCase(),this.COUNTRY_CODES))return!0;var h=!1;switch(g=g.toUpperCase()){case"AT":h=/^([1-9]{1})(\d{3})$/.test(e);break;case"BG":h=/^([1-9]{1}[0-9]{3})$/.test(a.trim(e));break;case"BR":h=/^(\d{2})([\.]?)(\d{3})([\-]?)(\d{3})$/.test(e);break;case"CA":h=/^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(e);break;case"CH":h=/^([1-9]{1})(\d{3})$/.test(e);break;case"CZ":h=/^(\d{3})([ ]?)(\d{2})$/.test(e);break;case"DE":h=/^(?!01000|99999)(0[1-9]\d{3}|[1-9]\d{4})$/.test(e);break;case"DK":h=/^(DK(-|\s)?)?\d{4}$/i.test(e);break;case"ES":h=/^(?:0[1-9]|[1-4][0-9]|5[0-2])\d{3}$/.test(e);break;case"FR":h=/^[0-9]{5}$/i.test(e);break;case"GB":h=this._gb(e);break;case"IN":h=/^\d{3}\s?\d{3}$/.test(e);break;case"IE":h=/^(D6W|[ACDEFHKNPRTVWXY]\d{2})\s[0-9ACDEFHKNPRTVWXY]{4}$/.test(e);break;case"IT":h=/^(I-|IT-)?\d{5}$/i.test(e);break;case"MA":h=/^[1-9][0-9]{4}$/i.test(e);break;case"NL":h=/^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(e);break;case"PL":h=/^[0-9]{2}\-[0-9]{3}$/.test(e);break;case"PT":h=/^[1-9]\d{3}-\d{3}$/.test(e);break;case"RO":h=/^(0[1-8]{1}|[1-9]{1}[0-5]{1})?[0-9]{4}$/i.test(e);break;case"RU":h=/^[0-9]{6}$/i.test(e);break;case"SE":h=/^(S-)?\d{3}\s?\d{2}$/i.test(e);break;case"SG":h=/^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\d{4})$/i.test(e);break;case"SK":h=/^(\d{3})([ ]?)(\d{2})$/.test(e);break;case"US":default:h=/^\d{4,5}([\-]?\d{4})?$/.test(e)}return{valid:h,message:FormValidation.Helper.format(d.message||FormValidation.I18n[f].zipCode.country,FormValidation.I18n[f].zipCode.countries[g])}},_gb:function(a){for(var b="[ABCDEFGHIJKLMNOPRSTUWYZ]",c="[ABCDEFGHKLMNOPQRSTUVWXY]",d="[ABCDEFGHJKPMNRSTUVWXY]",e="[ABEHMNPRVWXY]",f="[ABDEFGHJLNPQRSTUWXYZ]",g=[new RegExp("^("+b+"{1}"+c+"?[0-9]{1,2})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^("+b+"{1}[0-9]{1}"+d+"{1})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^("+b+"{1}"+c+"{1}?[0-9]{1}"+e+"{1})(\\s*)([0-9]{1}"+f+"{2})$","i"),new RegExp("^(BF1)(\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$","i"),/^(GIR)(\s*)(0AA)$/i,/^(BFPO)(\s*)([0-9]{1,4})$/i,/^(BFPO)(\s*)(c\/o\s*[0-9]{1,3})$/i,/^([A-Z]{4})(\s*)(1ZZ)$/i,/^(AI-2640)$/i],h=0;h<g.length;h++)if(g[h].test(a))return!0;return!1}}}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
/**
 * This class supports validating Bootstrap form (http://getbootstrap.com/)
 */
(function($) {
    FormValidation.Framework.Bootstrap = function(element, options, namespace) {
        options = $.extend(true, {
            button: {
                selector: '[type="submit"]',
                // The class of disabled button
                // http://getbootstrap.com/css/#buttons-disabled
                disabled: 'disabled'
            },
            err: {
                // http://getbootstrap.com/css/#forms-help-text
                clazz: 'help-block',
                parent: '^(.*)col-(xs|sm|md|lg)-(offset-){0,1}[0-9]+(.*)$'
            },
            // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).
            // Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.
            // In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.
            //
            // Examples:
            // - Use Glyphicons icons:
            //  icon: {
            //      valid: 'glyphicon glyphicon-ok',
            //      invalid: 'glyphicon glyphicon-remove',
            //      validating: 'glyphicon glyphicon-refresh',
            //      feedback: 'form-control-feedback'
            //  }
            // - Use FontAwesome icons:
            //  icon: {
            //      valid: 'fa fa-check',
            //      invalid: 'fa fa-times',
            //      validating: 'fa fa-refresh',
            //      feedback: 'form-control-feedback'
            //  }
            icon: {
                valid: null,
                invalid: null,
                validating: null,
                feedback: 'form-control-feedback'
            },
            row: {
                // By default, each field is placed inside the <div class="form-group"></div>
                // http://getbootstrap.com/css/#forms
                selector: '.form-group',
                valid: 'has-success',
                invalid: 'has-error',
                feedback: 'has-feedback'
            }
        }, options);

        FormValidation.Base.apply(this, [element, options, namespace]);
    };

    FormValidation.Framework.Bootstrap.prototype = $.extend({}, FormValidation.Base.prototype, {
        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
            var ns      = this._namespace,
                type    = $field.attr('type'),
                field   = $field.attr('data-' + ns + '-field'),
                row     = this.options.fields[field].row || this.options.row.selector,
                $parent = $field.closest(row);

            // Place it after the container of checkbox/radio
            // so when clicking the icon, it doesn't effect to the checkbox/radio element
            if ('checkbox' === type || 'radio' === type) {
                var $fieldParent = $field.parent();
                if ($fieldParent.hasClass(type)) {
                    $icon.insertAfter($fieldParent);
                } else if ($fieldParent.parent().hasClass(type)) {
                    $icon.insertAfter($fieldParent.parent());
                }
            }

            // The feedback icon does not render correctly if there is no label
            // https://github.com/twbs/bootstrap/issues/12873
            if ($parent.find('label').length === 0) {
                $icon.addClass('fv-icon-no-label');
            }
            // Fix feedback icons in input-group
            if ($parent.find('.input-group').length !== 0) {
                $icon.addClass('fv-bootstrap-icon-input-group')
                     .insertAfter($parent.find('.input-group').eq(0));
            }
        },

        /**
         * Create a tooltip or popover
         * It will be shown when focusing on the field
         *
         * @param {jQuery} $field The field element
         * @param {String} message The message
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _createTooltip: function($field, message, type) {
            var ns    = this._namespace,
                $icon = $field.data(ns + '.icon');
            if ($icon) {
                switch (type) {
                    case 'popover':
                        $icon
                            .css({
                                'cursor': 'pointer',
                                'pointer-events': 'auto'
                            })
                            .popover('destroy')
                            .popover({
                                container: 'body',
                                content: message,
                                html: true,
                                placement: 'auto top',
                                trigger: 'hover click'
                            });
                        break;

                    case 'tooltip':
                    /* falls through */
                    default:
                        $icon
                            .css({
                                'cursor': 'pointer',
                                'pointer-events': 'auto'
                            })
                            .tooltip('destroy')
                            .tooltip({
                                container: 'body',
                                html: true,
                                placement: 'auto top',
                                title: message
                            });
                        break;
                }
            }
        },

        /**
         * Destroy the tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _destroyTooltip: function($field, type) {
            var ns    = this._namespace,
                $icon = $field.data(ns + '.icon');
            if ($icon) {
                switch (type) {
                    case 'popover':
                        $icon
                            .css({
                                'cursor': '',
                                'pointer-events': 'none'
                            })
                            .popover('destroy');
                        break;

                    case 'tooltip':
                    /* falls through */
                    default:
                        $icon
                            .css({
                                'cursor': '',
                                'pointer-events': 'none'
                            })
                            .tooltip('destroy');
                        break;
                }
            }
        },

        /**
         * Hide a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _hideTooltip: function($field, type) {
            var ns    = this._namespace,
                $icon = $field.data(ns + '.icon');
            if ($icon) {
                switch (type) {
                    case 'popover':
                        $icon.popover('hide');
                        break;

                    case 'tooltip':
                    /* falls through */
                    default:
                        $icon.tooltip('hide');
                        break;
                }
            }
        },

        /**
         * Show a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _showTooltip: function($field, type) {
            var ns    = this._namespace,
                $icon = $field.data(ns + '.icon');
            if ($icon) {
                switch (type) {
                    case 'popover':
                        $icon.popover('show');
                        break;

                    case 'tooltip':
                    /* falls through */
                    default:
                        $icon.tooltip('show');
                        break;
                }
            }
        }
    });

    /**
     * Plugin definition
     * Support backward
     * @deprecated It will be removed soon. Instead of using $(form).bootstrapValidator(), use
     *  $(form).formValidation({
     *      framework: 'bootstrap'  // It's equivalent to use data-fv-framework="bootstrap" for <form>
     *  });
     */
    $.fn.bootstrapValidator = function(option) {
        var params = arguments;
        return this.each(function() {
            var $this   = $(this),
                data    = $this.data('formValidation') || $this.data('bootstrapValidator'),
                options = 'object' === typeof option && option;
            if (!data) {
                data = new FormValidation.Framework.Bootstrap(this, $.extend({}, {
                    events: {
                        // Support backward
                        formInit: 'init.form.bv',
                        formError: 'error.form.bv',
                        formSuccess: 'success.form.bv',
                        fieldAdded: 'added.field.bv',
                        fieldRemoved: 'removed.field.bv',
                        fieldInit: 'init.field.bv',
                        fieldError: 'error.field.bv',
                        fieldSuccess: 'success.field.bv',
                        fieldStatus: 'status.field.bv',
                        localeChanged: 'changed.locale.bv',
                        validatorError: 'error.validator.bv',
                        validatorSuccess: 'success.validator.bv'
                    }
                }, options), 'bv');

                $this.addClass('fv-form-bootstrap')
                     .data('formValidation', data)
                     .data('bootstrapValidator', data);
            }

            // Allow to call plugin method
            if ('string' === typeof option) {
                data[option].apply(data, Array.prototype.slice.call(params, 1));
            }
        });
    };

    $.fn.bootstrapValidator.Constructor = FormValidation.Framework.Bootstrap;
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:11 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
!function(a){FormValidation.Framework.Bootstrap=function(b,c,d){c=a.extend(!0,{button:{selector:'[type="submit"]',disabled:"disabled"},err:{clazz:"help-block",parent:"^(.*)col-(xs|sm|md|lg)-(offset-){0,1}[0-9]+(.*)$"},icon:{valid:null,invalid:null,validating:null,feedback:"form-control-feedback"},row:{selector:".form-group",valid:"has-success",invalid:"has-error",feedback:"has-feedback"}},c),FormValidation.Base.apply(this,[b,c,d])},FormValidation.Framework.Bootstrap.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=this._namespace,d=a.attr("type"),e=a.attr("data-"+c+"-field"),f=this.options.fields[e].row||this.options.row.selector,g=a.closest(f);if("checkbox"===d||"radio"===d){var h=a.parent();h.hasClass(d)?b.insertAfter(h):h.parent().hasClass(d)&&b.insertAfter(h.parent())}0===g.find("label").length&&b.addClass("fv-icon-no-label"),0!==g.find(".input-group").length&&b.addClass("fv-bootstrap-icon-input-group").insertAfter(g.find(".input-group").eq(0))},_createTooltip:function(a,b,c){var d=this._namespace,e=a.data(d+".icon");if(e)switch(c){case"popover":e.css({cursor:"pointer","pointer-events":"auto"}).popover("destroy").popover({container:"body",content:b,html:!0,placement:"auto top",trigger:"hover click"});break;case"tooltip":default:e.css({cursor:"pointer","pointer-events":"auto"}).tooltip("destroy").tooltip({container:"body",html:!0,placement:"auto top",title:b})}},_destroyTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.css({cursor:"","pointer-events":"none"}).popover("destroy");break;case"tooltip":default:d.css({cursor:"","pointer-events":"none"}).tooltip("destroy")}},_hideTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.popover("hide");break;case"tooltip":default:d.tooltip("hide")}},_showTooltip:function(a,b){var c=this._namespace,d=a.data(c+".icon");if(d)switch(b){case"popover":d.popover("show");break;case"tooltip":default:d.tooltip("show")}}}),a.fn.bootstrapValidator=function(b){var c=arguments;return this.each(function(){var d=a(this),e=d.data("formValidation")||d.data("bootstrapValidator"),f="object"==typeof b&&b;e||(e=new FormValidation.Framework.Bootstrap(this,a.extend({},{events:{formInit:"init.form.bv",formError:"error.form.bv",formSuccess:"success.form.bv",fieldAdded:"added.field.bv",fieldRemoved:"removed.field.bv",fieldInit:"init.field.bv",fieldError:"error.field.bv",fieldSuccess:"success.field.bv",fieldStatus:"status.field.bv",localeChanged:"changed.locale.bv",validatorError:"error.validator.bv",validatorSuccess:"success.validator.bv"}},f),"bv"),d.addClass("fv-form-bootstrap").data("formValidation",e).data("bootstrapValidator",e)),"string"==typeof b&&e[b].apply(e,Array.prototype.slice.call(c,1))})},a.fn.bootstrapValidator.Constructor=FormValidation.Framework.Bootstrap}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
/**
 * This class supports validating Foundation form (http://foundation.zurb.com/)
 */
/* global Foundation: false */
(function($) {
    FormValidation.Framework.Foundation = function(element, options) {
        options = $.extend(true, {
            button: {
                selector: '[type="submit"]',
                // The class for disabled button
                // http://foundation.zurb.com/docs/components/buttons.html#button-colors
                disabled: 'disabled'
            },
            err: {
                // http://foundation.zurb.com/docs/components/forms.html#error-states
                clazz: 'error',
                parent: '^.*((small|medium|large)-[0-9]+)\\s.*(columns).*$'
            },
            // Foundation doesn't support feedback icon
            icon: {
                valid: null,
                invalid: null,
                validating: null,
                feedback: 'fv-control-feedback'
            },
            row: {
                // http://foundation.zurb.com/docs/components/forms.html
                selector: '.row',
                valid: 'fv-has-success',
                invalid: 'error',
                feedback: 'fv-has-feedback'
            }
        }, options);

        FormValidation.Base.apply(this, [element, options]);
    };

    FormValidation.Framework.Foundation.prototype = $.extend({}, FormValidation.Base.prototype, {
        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
            var ns      = this._namespace,
                type    = $field.attr('type'),
                field   = $field.attr('data-' + ns + '-field'),
                row     = this.options.fields[field].row || this.options.row.selector,
                $parent = $field.closest(row);

            if ('checkbox' === type || 'radio' === type) {
                var $next = $icon.next();
                if ($next.is('label')) {
                    $icon.insertAfter($next);
                }
            }

            if ($parent.find('label').length === 0) {
                $icon.addClass('fv-icon-no-label');
            }
        },

        /**
         * Create a tooltip or popover
         * It will be shown when focusing on the field
         *
         * @param {jQuery} $field The field element
         * @param {String} message The message
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _createTooltip: function($field, message, type) {
            var that  = this,
                $icon = $field.data('fv.icon');
            if ($icon) {
                $icon
                    .attr('title', message)
                    .css({
                        'cursor': 'pointer'
                    })
                    .off('mouseenter.container.fv focusin.container.fv')
                    .on('mouseenter.container.fv', function() {
                        that._showTooltip($field, type);
                    })
                    .off('mouseleave.container.fv focusout.container.fv')
                    .on('mouseleave.container.fv focusout.container.fv', function() {
                        that._hideTooltip($field, type);
                    });
                Foundation.libs.tooltip.create($icon);
                $icon.data('fv.foundation.tooltip', $icon);
            }
        },

        /**
         * Destroy the tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _destroyTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                $icon.css({
                    'cursor': ''
                });
                var $tooltip = $icon.data('fv.foundation.tooltip');
                if ($tooltip) {
                    // Foundation doesn't provide method to destroy particular tooltip instance
                    $tooltip.off('.fndtn.tooltip');
                    Foundation.libs.tooltip.hide($tooltip);
                    $icon.removeData('fv.foundation.tooltip');
                }
            }
        },

        /**
         * Hide a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _hideTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                $icon.css({
                    'cursor': ''
                });
                var $tooltip = $icon.data('fv.foundation.tooltip');
                if ($tooltip) {
                    Foundation.libs.tooltip.hide($tooltip);
                }
            }
        },

        /**
         * Show a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _showTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                var $tooltip = $icon.data('fv.foundation.tooltip');
                if ($tooltip) {
                    $icon.css({
                        'cursor': 'pointer'
                    });
                    Foundation.libs.tooltip.show($tooltip);
                }
            }
        }
    });
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:12 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
!function(a){FormValidation.Framework.Foundation=function(b,c){c=a.extend(!0,{button:{selector:'[type="submit"]',disabled:"disabled"},err:{clazz:"error",parent:"^.*((small|medium|large)-[0-9]+)\\s.*(columns).*$"},icon:{valid:null,invalid:null,validating:null,feedback:"fv-control-feedback"},row:{selector:".row",valid:"fv-has-success",invalid:"error",feedback:"fv-has-feedback"}},c),FormValidation.Base.apply(this,[b,c])},FormValidation.Framework.Foundation.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=this._namespace,d=a.attr("type"),e=a.attr("data-"+c+"-field"),f=this.options.fields[e].row||this.options.row.selector,g=a.closest(f);if("checkbox"===d||"radio"===d){var h=b.next();h.is("label")&&b.insertAfter(h)}0===g.find("label").length&&b.addClass("fv-icon-no-label")},_createTooltip:function(a,b,c){var d=this,e=a.data("fv.icon");e&&(e.attr("title",b).css({cursor:"pointer"}).off("mouseenter.container.fv focusin.container.fv").on("mouseenter.container.fv",function(){d._showTooltip(a,c)}).off("mouseleave.container.fv focusout.container.fv").on("mouseleave.container.fv focusout.container.fv",function(){d._hideTooltip(a,c)}),Foundation.libs.tooltip.create(e),e.data("fv.foundation.tooltip",e))},_destroyTooltip:function(a){var b=a.data("fv.icon");if(b){b.css({cursor:""});var c=b.data("fv.foundation.tooltip");c&&(c.off(".fndtn.tooltip"),Foundation.libs.tooltip.hide(c),b.removeData("fv.foundation.tooltip"))}},_hideTooltip:function(a){var b=a.data("fv.icon");if(b){b.css({cursor:""});var c=b.data("fv.foundation.tooltip");c&&Foundation.libs.tooltip.hide(c)}},_showTooltip:function(a){var b=a.data("fv.icon");if(b){var c=b.data("fv.foundation.tooltip");c&&(b.css({cursor:"pointer"}),Foundation.libs.tooltip.show(c))}}})}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
/**
 * This class supports validating Pure framework (http://purecss.io/)
 */
(function($) {
    FormValidation.Framework.Pure = function(element, options) {
        options = $.extend(true, {
            button: {
                selector: '[type="submit"]',
                // The class of disabled button
                // http://purecss.io/buttons/#disabled-buttons
                disabled: 'pure-button-disabled'
            },
            err: {
                clazz: 'fv-help-block',
                parent: '^.*pure-control-group.*$'
            },
            // Pure doesn't support feedback icon
            icon: {
                valid: null,
                invalid: null,
                validating: null,
                feedback: 'fv-control-feedback'
            },
            row: {
                // http://purecss.io/forms/#aligned-form
                selector: '.pure-control-group',
                valid: 'fv-has-success',
                invalid: 'fv-has-error',
                feedback: 'fv-has-feedback'
            }
        }, options);

        FormValidation.Base.apply(this, [element, options]);
    };

    FormValidation.Framework.Pure.prototype = $.extend({}, FormValidation.Base.prototype, {
        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
            var ns      = this._namespace,
                type    = $field.attr('type'),
                field   = $field.attr('data-' + ns + '-field'),
                row     = this.options.fields[field].row || this.options.row.selector,
                $parent = $field.closest(row);

            if ($parent.find('label').length === 0) {
                $icon.addClass('fv-icon-no-label');
            }
        }
    });
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:12 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
!function(a){FormValidation.Framework.Pure=function(b,c){c=a.extend(!0,{button:{selector:'[type="submit"]',disabled:"pure-button-disabled"},err:{clazz:"fv-help-block",parent:"^.*pure-control-group.*$"},icon:{valid:null,invalid:null,validating:null,feedback:"fv-control-feedback"},row:{selector:".pure-control-group",valid:"fv-has-success",invalid:"fv-has-error",feedback:"fv-has-feedback"}},c),FormValidation.Base.apply(this,[b,c])},FormValidation.Framework.Pure.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=this._namespace,d=(a.attr("type"),a.attr("data-"+c+"-field")),e=this.options.fields[d].row||this.options.row.selector,f=a.closest(e);0===f.find("label").length&&b.addClass("fv-icon-no-label")}})}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
/**
 * This class supports validating SemanticUI form (http://semantic-ui.com/)
 */
(function($) {
    FormValidation.Framework.Semantic = function(element, options) {
        options = $.extend(true, {
            button: {
                selector: '[type="submit"]',
                // CSS class of disabled button
                // http://semantic-ui.com/elements/button.html#disabled
                disabled: 'disabled'
            },
            control: {
                valid: '',
                invalid: ''
            },
            err: {
                // http://semantic-ui.com/elements/label.html#pointing
                clazz: 'ui red pointing label transition',
                parent: '^.*(field|column).*$'
            },
            // When using feedback icon, the input must place inside 'ui input icon' element
            //  <div class="ui input icon">
            //      <input type="text" />
            //  </div>
            // See http://semantic-ui.com/elements/input.html#icon
            icon: {
                // http://semantic-ui.com/elements/icon.html
                valid: null,        // 'checkmark icon'
                invalid: null,      // 'remove icon'
                validating: null,   // 'refresh icon'
                feedback: 'fv-control-feedback'
            },
            row: {
                // http://semantic-ui.com/collections/form.html
                selector: '.field',
                valid: 'fv-has-success',
                invalid: 'error',
                feedback: 'fv-has-feedback'
            }
        }, options);

        FormValidation.Base.apply(this, [element, options]);
    };

    FormValidation.Framework.Semantic.prototype = $.extend({}, FormValidation.Base.prototype, {
        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
            var type = $field.attr('type');
            if ('checkbox' === type || 'radio' === type) {
                var $fieldParent = $field.parent();
                if ($fieldParent.hasClass(type)) {
                    $icon.insertAfter($fieldParent);
                }
            }
        },

        /**
         * Create a tooltip or popover
         * It will be shown when focusing on the field
         *
         * @param {jQuery} $field The field element
         * @param {String} message The message
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _createTooltip: function($field, message, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                // Remove the popup if it's already exists
                if ($icon.popup('exists')) {
                    $icon.popup('remove popup')
                         .popup('destroy');
                }

                // http://semantic-ui.com/modules/popup.html
                switch (type) {
                    case 'popover':
                        $icon
                            .css({
                                'cursor': 'pointer'
                            })
                            .popup({
                                content: message,
                                position: 'top center'
                            });
                        break;

                    case 'tooltip':
                    /* falls through */
                    default:
                        $icon
                            .css({
                                'cursor': 'pointer'
                            })
                            .popup({
                                content: message,
                                position: 'top center',
                                variation: 'inverted'
                            });
                        break;
                }
            }
        },

        /**
         * Destroy the tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _destroyTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon && $icon.popup('exists')) {
                $icon
                    .css({
                        'cursor': ''
                    })
                    .popup('remove popup')
                    .popup('destroy');
            }
        },

        /**
         * Hide a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _hideTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                $icon.popup('hide');
            }
        },

        /**
         * Show a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _showTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                $icon.popup('show');
            }
        }
    });
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:12 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
!function(a){FormValidation.Framework.Semantic=function(b,c){c=a.extend(!0,{button:{selector:'[type="submit"]',disabled:"disabled"},control:{valid:"",invalid:""},err:{clazz:"ui red pointing label transition",parent:"^.*(field|column).*$"},icon:{valid:null,invalid:null,validating:null,feedback:"fv-control-feedback"},row:{selector:".field",valid:"fv-has-success",invalid:"error",feedback:"fv-has-feedback"}},c),FormValidation.Base.apply(this,[b,c])},FormValidation.Framework.Semantic.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=a.attr("type");if("checkbox"===c||"radio"===c){var d=a.parent();d.hasClass(c)&&b.insertAfter(d)}},_createTooltip:function(a,b,c){var d=a.data("fv.icon");if(d)switch(d.popup("exists")&&d.popup("remove popup").popup("destroy"),c){case"popover":d.css({cursor:"pointer"}).popup({content:b,position:"top center"});break;case"tooltip":default:d.css({cursor:"pointer"}).popup({content:b,position:"top center",variation:"inverted"})}},_destroyTooltip:function(a){var b=a.data("fv.icon");b&&b.popup("exists")&&b.css({cursor:""}).popup("remove popup").popup("destroy")},_hideTooltip:function(a){var b=a.data("fv.icon");b&&b.popup("hide")},_showTooltip:function(a){var b=a.data("fv.icon");b&&b.popup("show")}})}(jQuery);
/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:10 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
/**
 * This class supports validating UIKit form (http://getuikit.com/)
 */
(function($) {
    FormValidation.Framework.Uikit = function(element, options) {
        options = $.extend(true, {
            button: {
                selector: '[type="submit"]',
                // The class for disabled button
                // http://getuikit.com/docs/button.html
                disabled: 'disabled'
            },
            control: {
                valid: 'uk-form-success',
                invalid: 'uk-form-danger'
            },
            err: {
                // http://getuikit.com/docs/text.html#text-styles
                clazz: 'uk-text-danger',
                parent: '^.*(uk-form-controls|uk-width-[\\d+]-[\\d+]).*$'
            },
            // UIKit doesn't support feedback icon
            icon: {
                valid: null,
                invalid: null,
                validating: null,
                feedback: 'fv-control-feedback'
            },
            row: {
                // http://getuikit.com/docs/form.html
                selector: '.uk-form-row',
                valid: 'fv-has-success',
                invalid: 'fv-has-error',
                feedback: 'fv-has-feedback'
            }
        }, options);

        FormValidation.Base.apply(this, [element, options]);
    };

    FormValidation.Framework.Uikit.prototype = $.extend({}, FormValidation.Base.prototype, {
        /**
         * Specific framework might need to adjust the icon position
         *
         * @param {jQuery} $field The field element
         * @param {jQuery} $icon The icon element
         */
        _fixIcon: function($field, $icon) {
            var ns      = this._namespace,
                type    = $field.attr('type'),
                field   = $field.attr('data-' + ns + '-field'),
                row     = this.options.fields[field].row || this.options.row.selector,
                $parent = $field.closest(row);

            if ('checkbox' === type || 'radio' === type) {
                var $fieldParent = $field.parent();
                if ($fieldParent.is('label')) {
                    $icon.insertAfter($fieldParent);
                }
            }

            if ($parent.find('label').length === 0) {
                $icon.addClass('fv-icon-no-label');
            }
        },

        /**
         * Create a tooltip or popover
         * It will be shown when focusing on the field
         *
         * @param {jQuery} $field The field element
         * @param {String} message The message
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _createTooltip: function($field, message, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                // Remove the tooltip if it's already exists
                if ($icon.data('tooltip')) {
                    $icon.data('tooltip').off();
                    $icon.removeData('tooltip');
                }

                $icon
                    .attr('title', message)
                    .css({
                        'cursor': 'pointer'
                    });

                new $.UIkit.tooltip($icon);
                // UIKit auto set the 'tooltip' data for the element
                // so I can retrieve the tooltip later via $icon.data('tooltip')
            }
        },

        /**
         * Destroy the tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _destroyTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                var tooltip = $icon.data('tooltip');
                if (tooltip) {
                    tooltip.hide();
                    tooltip.off();
                    $icon.off('focus mouseenter')
                         .removeData('tooltip');
                }
                $icon.css({
                    'cursor': ''
                });
            }
        },

        /**
         * Hide a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _hideTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                var tooltip = $icon.data('tooltip');
                if (tooltip) {
                    tooltip.hide();
                }
                $icon.css({
                    'cursor': ''
                });
            }
        },

        /**
         * Show a tooltip or popover
         *
         * @param {jQuery} $field The field element
         * @param {String} type Can be 'tooltip' or 'popover'
         */
        _showTooltip: function($field, type) {
            var $icon = $field.data('fv.icon');
            if ($icon) {
                $icon.css({
                    'cursor': 'pointer'
                });
                var tooltip = $icon.data('tooltip');
                if (tooltip) {
                    tooltip.show();
                }
            }
        }
    });
}(jQuery));

/*!
 * FormValidation (http://formvalidation.io)
 * The best jQuery plugin to validate form fields. Support Bootstrap, Foundation, Pure, SemanticUI, UIKit and custom frameworks
 *
 * @version     v0.6.1, built on 2015-02-24 10:14:12 PM
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
!function(a){FormValidation.Framework.Uikit=function(b,c){c=a.extend(!0,{button:{selector:'[type="submit"]',disabled:"disabled"},control:{valid:"uk-form-success",invalid:"uk-form-danger"},err:{clazz:"uk-text-danger",parent:"^.*(uk-form-controls|uk-width-[\\d+]-[\\d+]).*$"},icon:{valid:null,invalid:null,validating:null,feedback:"fv-control-feedback"},row:{selector:".uk-form-row",valid:"fv-has-success",invalid:"fv-has-error",feedback:"fv-has-feedback"}},c),FormValidation.Base.apply(this,[b,c])},FormValidation.Framework.Uikit.prototype=a.extend({},FormValidation.Base.prototype,{_fixIcon:function(a,b){var c=this._namespace,d=a.attr("type"),e=a.attr("data-"+c+"-field"),f=this.options.fields[e].row||this.options.row.selector,g=a.closest(f);if("checkbox"===d||"radio"===d){var h=a.parent();h.is("label")&&b.insertAfter(h)}0===g.find("label").length&&b.addClass("fv-icon-no-label")},_createTooltip:function(b,c){var d=b.data("fv.icon");d&&(d.data("tooltip")&&(d.data("tooltip").off(),d.removeData("tooltip")),d.attr("title",c).css({cursor:"pointer"}),new a.UIkit.tooltip(d))},_destroyTooltip:function(a){var b=a.data("fv.icon");if(b){var c=b.data("tooltip");c&&(c.hide(),c.off(),b.off("focus mouseenter").removeData("tooltip")),b.css({cursor:""})}},_hideTooltip:function(a){var b=a.data("fv.icon");if(b){var c=b.data("tooltip");c&&c.hide(),b.css({cursor:""})}},_showTooltip:function(a){var b=a.data("fv.icon");if(b){b.css({cursor:"pointer"});var c=b.data("tooltip");c&&c.show()}}})}(jQuery);
(function ($) {
    /**
     * Arabic language package
     * Translated by @Arkni
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ar_MA': {
            base64: {
                'default': 'الرجاء إدخال قيمة مشفرة طبقا للقاعدة 64.'
            },
            between: {
                'default': 'الرجاء إدخال قيمة بين %s و %s .',
                notInclusive: 'الرجاء إدخال قيمة بين %s و %s بدقة.'
            },
            bic: {
                'default': 'الرجاء إدخال رقم BIC صالح.'
            },
            callback: {
                'default': 'الرجاء إدخال قيمة صالحة.'
            },
            choice: {
                'default': 'الرجاء إدخال قيمة صالحة.',
                less: 'الرجاء اختيار %s خيارات كحد أدنى.',
                more: 'الرجاء اختيار %s خيارات كحد أقصى.',
                between: 'الرجاء إختيار %s-%s خيارات.'
            },
            color: {
                'default': 'الرجاء إدخال رمز لون صالح.'
            },
            creditCard: {
                'default': 'الرجاء إدخال رقم بطاقة إئتمان صحيح.'
            },
            cusip: {
                'default': 'الرجاء إدخال رقم CUSIP صالح.'
            },
            cvv: {
                'default': 'الرجاء إدخال رقم CVV صالح.'
            },
            date: {
                'default': 'الرجاء إدخال تاريخ صالح.',
                min: 'الرجاء إدخال تاريخ بعد %s.',
                max: 'الرجاء إدخال تاريخ قبل %s.',
                range: 'الرجاء إدخال تاريخ في المجال %s - %s.'
            },
            different: {
                'default': 'الرجاء إدخال قيمة مختلفة.'
            },
            digits: {
                'default': 'الرجاء إدخال الأرقام فقط.'
            },
            ean: {
                'default': 'الرجاء إدخال رقم EAN صالح.'
            },
            ein: {
                'default': 'الرجاء إدخال رقم EIN صالح.'
            },
            emailAddress: {
                'default': 'الرجاء إدخال بريد إلكتروني صحيح.'
            },
            file: {
                'default': 'الرجاء إختيار ملف صالح.'
            },
            greaterThan: {
                'default': 'الرجاء إدخال قيمة أكبر من أو تساوي %s.',
                notInclusive: 'الرجاء إدخال قيمة أكبر من %s.'
            },
            grid: {
                'default': 'الرجاء إدخال رقم GRid صالح.'
            },
            hex: {
                'default': 'الرجاء إدخال رقم ست عشري صالح.'
            },
            iban: {
                'default': 'الرجاء إدخال رقم IBAN صالح.',
                country: 'الرجاء إدخال رقم IBAN صالح في %s.',
                countries: {
                    AD: 'أندورا',
                    AE: 'الإمارات العربية المتحدة',
                    AL: 'ألبانيا',
                    AO: 'أنغولا',
                    AT: 'النمسا',
                    AZ: 'أذربيجان',
                    BA: 'البوسنة والهرسك',
                    BE: 'بلجيكا',
                    BF: 'بوركينا فاسو',
                    BG: 'بلغاريا',
                    BH: 'البحرين',
                    BI: 'بوروندي',
                    BJ: 'بنين',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CI: 'ساحل العاج',
                    CM: 'الكاميرون',
                    CR: 'كوستاريكا',
                    CV: 'الرأس الأخضر',
                    CY: 'قبرص',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    DO: 'جمهورية الدومينيكان',
                    DZ: 'الجزائر',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    FO: 'جزر فارو',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    GE: 'جورجيا',
                    GI: 'جبل طارق',
                    GL: 'جرينلاند',
                    GR: 'اليونان',
                    GT: 'غواتيمالا',
                    HR: 'كرواتيا',
                    HU: 'المجر',
                    IE: 'أيرلندا',
                    IL: 'إسرائيل',
                    IR: 'إيران',
                    IS: 'آيسلندا',
                    IT: 'إيطاليا',
                    JO: 'الأردن',
                    KW: 'الكويت',
                    KZ: 'كازاخستان',
                    LB: 'لبنان',
                    LI: 'ليختنشتاين',
                    LT: 'ليتوانيا',
                    LU: 'لوكسمبورغ',
                    LV: 'لاتفيا',
                    MC: 'موناكو',
                    MD: 'مولدوفا',
                    ME: 'الجبل الأسود',
                    MG: 'مدغشقر',
                    MK: 'جمهورية مقدونيا',
                    ML: 'مالي',
                    MR: 'موريتانيا',
                    MT: 'مالطا',
                    MU: 'موريشيوس',
                    MZ: 'موزمبيق',
                    NL: 'هولندا',
                    NO: 'النرويج',
                    PK: 'باكستان',
                    PL: 'بولندا',
                    PS: 'فلسطين',
                    PT: 'البرتغال',
                    QA: 'قطر',
                    RO: 'رومانيا',
                    RS: 'صربيا',
                    SA: 'المملكة العربية السعودية',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    SM: 'سان مارينو',
                    SN: 'السنغال',
                    TN: 'تونس',
                    TR: 'تركيا',
                    VG: 'جزر العذراء البريطانية'
                }
            },
            id: {
                'default': 'الرجاء إدخال رقم هوية صالحة.',
                country: 'الرجاء إدخال رقم تعريف صالح في %s.',
                countries: {
                    BA: 'البوسنة والهرسك',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CL: 'تشيلي',
                    CN: 'الصين',
                    CZ: 'التشيك',
                    DK: 'الدنمارك',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    HR: 'كرواتيا',
                    IE: 'أيرلندا',
                    IS: 'آيسلندا',
                    LT: 'ليتوانيا',
                    LV: 'لاتفيا',
                    ME: 'الجبل الأسود',
                    MK: 'جمهورية مقدونيا',
                    NL: 'هولندا',
                    PL: 'بولندا',
                    RO: 'رومانيا',
                    RS: 'صربيا',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    SM: 'سان مارينو',
                    TH: 'تايلاند',
                    ZA: 'جنوب أفريقيا'
                }
            },
            identical: {
                'default': 'الرجاء إدخال نفس القيمة.'
            },
            imei: {
                'default': 'الرجاء إدخال رقم IMEI صالح.'
            },
            imo: {
                'default': 'الرجاء إدخال رقم IMO صالح.'
            },
            integer: {
                'default': 'الرجاء إدخال رقم صحيح.'
            },
            ip: {
                'default': 'الرجاء إدخال عنوان IP صالح.',
                ipv4: 'الرجاء إدخال عنوان IPv4 صالح.',
                ipv6: 'الرجاء إدخال عنوان IPv6 صالح.'
            },
            isbn: {
                'default': 'الرجاء إدخال رقم ISBN صالح.'
            },
            isin: {
                'default': 'الرجاء إدخال رقم ISIN صالح.'
            },
            ismn: {
                'default': 'الرجاء إدخال رقم ISMN صالح.'
            },
            issn: {
                'default': 'الرجاء إدخال رقم ISSN صالح.'
            },
            lessThan: {
                'default': 'الرجاء إدخال قيمة أصغر من أو تساوي %s.',
                notInclusive: 'الرجاء إدخال قيمة أصغر من %s.'
            },
            mac: {
                'default': 'يرجى إدخال عنوان MAC صالح.'
            },
            meid: {
                'default': 'الرجاء إدخال رقم MEID صالح.'
            },
            notEmpty: {
                'default': 'الرجاء إدخال قيمة.'
            },
            numeric: {
                'default': 'الرجاء إدخال عدد عشري صالح.'
            },
            phone: {
                'default': 'الرجاء إدخال رقم هاتف صحيح.',
                country: 'الرجاء إدخال رقم هاتف صالح في %s.',
                countries: {
                    AE: 'الإمارات العربية المتحدة',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CN: 'الصين',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    ES: 'إسبانيا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    IN: 'الهند',
                    MA: 'المغرب',
                    NL: 'هولندا',
                    PK: 'باكستان',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    SK: 'سلوفاكيا',
                    TH: 'تايلاند',
                    US: 'الولايات المتحدة',
                    VE: 'فنزويلا'
                }
            },
            regexp: {
                'default': 'الرجاء إدخال قيمة مطابقة للنمط.'
            },
            remote: {
                'default': 'الرجاء إدخال قيمة صالحة.'
            },
            rtn: {
                'default': 'الرجاء إدخال رقم RTN صالح.'
            },
            sedol: {
                'default': 'الرجاء إدخال رقم SEDOL صالح.'
            },
            siren: {
                'default': 'الرجاء إدخال رقم SIREN صالح.'
            },
            siret: {
                'default': 'الرجاء إدخال رقم SIRET صالح.'
            },
            step: {
                'default': 'الرجاء إدخال قيمة من مضاعفات %s .'
            },
            stringCase: {
                'default': 'الرجاء إدخال أحرف صغيرة فقط.',
                upper: 'الرجاء إدخال أحرف كبيرة فقط.'
            },
            stringLength: {
                'default': 'الرجاء إدخال قيمة ذات طول صحيح.',
                less: 'الرجاء إدخال أقل من %s حرفا.',
                more: 'الرجاء إدخال أكتر من %s حرفا.',
                between: 'الرجاء إدخال قيمة ذات عدد حروف بين %s و %s حرفا.'
            },
            uri: {
                'default': 'الرجاء إدخال URI صالح.'
            },
            uuid: {
                'default': 'الرجاء إدخال رقم UUID صالح.',
                version: 'الرجاء إدخال رقم UUID صالح إصدار %s.'
            },
            vat: {
                'default': 'الرجاء إدخال رقم VAT صالح.',
                country: 'الرجاء إدخال رقم VAT صالح في %s.',
                countries: {
                    AT: 'النمسا',
                    BE: 'بلجيكا',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CH: 'سويسرا',
                    CY: 'قبرص',
                    CZ: 'التشيك',
                    DE: 'جورجيا',
                    DK: 'الدنمارك',
                    EE: 'إستونيا',
                    ES: 'إسبانيا',
                    FI: 'فنلندا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    GR: 'اليونان',
                    EL: 'اليونان',
                    HR: 'كرواتيا',
                    HU: 'المجر',
                    IE: 'أيرلندا',
                    IS: 'آيسلندا',
                    IT: 'إيطاليا',
                    LT: 'ليتوانيا',
                    LU: 'لوكسمبورغ',
                    LV: 'لاتفيا',
                    MT: 'مالطا',
                    NL: 'هولندا',
                    NO: 'النرويج',
                    PL: 'بولندا',
                    PT: 'البرتغال',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    RS: 'صربيا',
                    SE: 'السويد',
                    SI: 'سلوفينيا',
                    SK: 'سلوفاكيا',
                    VE: 'فنزويلا',
                    ZA: 'جنوب أفريقيا'
                }
            },
            vin: {
                'default': 'الرجاء إدخال رقم VIN صالح.'
            },
            zipCode: {
                'default': 'الرجاء إدخال رمز بريدي صالح.',
                country: 'الرجاء إدخال رمز بريدي صالح في %s.',
                countries: {
                    AT: 'النمسا',
                    BG: 'بلغاريا',
                    BR: 'البرازيل',
                    CA: 'كندا',
                    CH: 'سويسرا',
                    CZ: 'التشيك',
                    DE: 'ألمانيا',
                    DK: 'الدنمارك',
                    ES: 'إسبانيا',
                    FR: 'فرنسا',
                    GB: 'المملكة المتحدة',
                    IE: 'أيرلندا',
                    IN: 'الهند',
                    IT: 'إيطاليا',
                    MA: 'المغرب',
                    NL: 'هولندا',
                    PL: 'بولندا',
                    PT: 'البرتغال',
                    RO: 'رومانيا',
                    RU: 'روسيا',
                    SE: 'السويد',
                    SG: 'سنغافورة',
                    SK: 'سلوفاكيا',
                    US: 'الولايات المتحدة'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Belgium (French) language package
     * Translated by @neilime
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'be_FR': {
            base64: {
                'default': 'Veuillez fournir une donnée correctement encodée en Base64'
            },
            between: {
                'default': 'Veuillez fournir une valeur comprise entre %s et %s',
                notInclusive: 'Veuillez fournir une valeur strictement comprise entre %s et %s'
            },
            bic: {
                'default': 'Veuillez fournir un code-barre BIC valide'
            },
            callback: {
                'default': 'Veuillez fournir une valeur valide'
            },
            choice: {
                'default': 'Veuillez fournir une valeur valide',
                less: 'Veuillez choisir au minimum %s options',
                more: 'Veuillez choisir au maximum %s options',
                between: 'Veuillez choisir de %s à %s options'
            },
            color: {
                'default': 'Veuillez fournir une couleur valide'
            },
            creditCard: {
                'default': 'Veuillez fournir un numéro de carte de crédit valide'
            },
            cusip: {
                'default': 'Veuillez fournir un code CUSIP valide'
            },
            cvv: {
                'default': 'Veuillez fournir un code CVV valide'
            },
            date: {
                'default': 'Veuillez fournir une date valide',
                'min': 'Veuillez fournir une date supérieure à %s',
                'max': 'Veuillez fournir une date inférieure à %s',
                'range': 'Veuillez fournir une date comprise entre %s et %s'
            },
            different: {
                'default': 'Veuillez fournir une valeur différente'
            },
            digits: {
                'default': 'Veuillez ne fournir que des chiffres'
            },
            ean: {
                'default': 'Veuillez fournir un code-barre EAN valide'
            },
            ein: {
                'default': 'Veuillez fournir un code-barre EIN valide'
            },
            emailAddress: {
                'default': 'Veuillez fournir une adresse e-mail valide'
            },
            file: {
                'default': 'Veuillez choisir un fichier valide'
            },
            greaterThan: {
                'default': 'Veuillez fournir une valeur supérieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur supérieure à %s'
            },
            grid: {
                'default': 'Veuillez fournir un code GRId valide'
            },
            hex: {
                'default': 'Veuillez fournir un nombre hexadécimal valide'
            },
            iban: {
                'default': 'Veuillez fournir un code IBAN valide',
                country: 'Veuillez fournir un code IBAN valide pour %s',
                countries: {
                    AD: 'Andorre',
                    AE: 'Émirats Arabes Unis',
                    AL: 'Albanie',
                    AO: 'Angola',
                    AT: 'Autriche',
                    AZ: 'Azerbaïdjan',
                    BA: 'Bosnie-Herzégovine',
                    BE: 'Belgique',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarie',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Bénin',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CI: 'Côte d\'ivoire',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Cap Vert',
                    CY: 'Chypre',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    DO: 'République Dominicaine',
                    DZ: 'Algérie',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FO: 'Îles Féroé',
                    FR: 'France',
                    GB: 'Royaume Uni',
                    GE: 'Géorgie',
                    GI: 'Gibraltar',
                    GL: 'Groënland',
                    GR: 'Gréce',
                    GT: 'Guatemala',
                    HR: 'Croatie',
                    HU: 'Hongrie',
                    IE: 'Irlande',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'Islande',
                    IT: 'Italie',
                    JO: 'Jordanie',
                    KW: 'Koweït',
                    KZ: 'Kazakhstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Lithuanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MC: 'Monaco',
                    MD: 'Moldavie',
                    ME: 'Monténégro',
                    MG: 'Madagascar',
                    MK: 'Macédoine',
                    ML: 'Mali',
                    MR: 'Mauritanie',
                    MT: 'Malte',
                    MU: 'Maurice',
                    MZ: 'Mozambique',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PK: 'Pakistan',
                    PL: 'Pologne',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Quatar',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SA: 'Arabie Saoudite',
                    SE: 'Suède',
                    SI: 'Slovènie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    SN: 'Sénégal',
                    TN: 'Tunisie',
                    TR: 'Turquie',
                    VG: 'Îles Vierges britanniques'
                }
            },
            id: {
                'default': 'Veuillez fournir un numéro d\'identification valide',
                country: 'Veuillez fournir un numéro d\'identification valide pour %s',
                countries: {
                    BA: 'Bosnie-Herzégovine',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CL: 'Chili',
                    CN: 'Chine',
                    CZ: 'Tchèque',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    LT: 'Lituanie',
                    LV: 'Lettonie',
                    ME: 'Monténégro',
                    MK: 'Macédoine',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    TH: 'Thaïlande',
                    ZA: 'Afrique du Sud'
                }
            },
            identical: {
                'default': 'Veuillez fournir la même valeur'
            },
            imei: {
                'default': 'Veuillez fournir un code IMEI valide'
            },
            imo: {
                'default': 'Veuillez fournir un code IMO valide'
            },
            integer: {
                'default': 'Veuillez fournir un nombre valide'
            },
            ip: {
                'default': 'Veuillez fournir une adresse IP valide',
                ipv4: 'Veuillez fournir une adresse IPv4 valide',
                ipv6: 'Veuillez fournir une adresse IPv6 valide'
            },
            isbn: {
                'default': 'Veuillez fournir un code ISBN valide'
            },
            isin: {
                'default': 'Veuillez fournir un code ISIN valide'
            },
            ismn: {
                'default': 'Veuillez fournir un code ISMN valide'
            },
            issn: {
                'default': 'Veuillez fournir un code ISSN valide'
            },
            lessThan: {
                'default': 'Veuillez fournir une valeur inférieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur inférieure à %s'
            },
            mac: {
                'default': 'Veuillez fournir une adresse MAC valide'
            },
            meid: {
                'default': 'Veuillez fournir un code MEID valide'
            },
            notEmpty: {
                'default': 'Veuillez fournir une valeur'
            },
            numeric: {
                'default': 'Veuillez fournir une valeur décimale valide'
            },
            phone: {
                'default': 'Veuillez fournir un numéro de téléphone valide',
                country: 'Veuillez fournir un numéro de téléphone valide pour %s',
                countries: {
                    AE: 'Émirats Arabes Unis',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CN: 'Chine',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IN: 'Inde',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PK: 'Pakistan',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SK: 'Slovaquie',
                    TH: 'Thaïlande',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Veuillez fournir une valeur correspondant au modèle'
            },
            remote: {
                'default': 'Veuillez fournir une valeur valide'
            },
            rtn: {
                'default': 'Veuillez fournir un code RTN valide'
            },
            sedol: {
                'default': 'Veuillez fournir a valid SEDOL number'
            },
            siren: {
                'default': 'Veuillez fournir un numéro SIREN valide'
            },
            siret: {
                'default': 'Veuillez fournir un numéro SIRET valide'
            },
            step: {
                'default': 'Veuillez fournir un écart valide de %s'
            },
            stringCase: {
                'default': 'Veuillez ne fournir que des caractères minuscules',
                upper: 'Veuillez ne fournir que des caractères majuscules'
            },
            stringLength: {
                'default': 'Veuillez fournir une valeur de longueur valide',
                less: 'Veuillez fournir moins de %s caractères',
                more: 'Veuillez fournir plus de %s caractères',
                between: 'Veuillez fournir entre %s et %s caractères'
            },
            uri: {
                'default': 'Veuillez fournir un URI valide'
            },
            uuid: {
                'default': 'Veuillez fournir un UUID valide',
                version: 'Veuillez fournir un UUID version %s number'
            },
            vat: {
                'default': 'Veuillez fournir un code VAT valide',
                country: 'Veuillez fournir un code VAT valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BE: 'Belgique',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CY: 'Chypre',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    GR: 'Grèce',
                    EL: 'Grèce',
                    HU: 'Hongrie',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    IT: 'Italie',
                    LT: 'Lituanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MT: 'Malte',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    VE: 'Venezuela',
                    ZA: 'Afrique du Sud'
                }
            },
            vin: {
                'default': 'Veuillez fournir un code VIN valide'
            },
            zipCode: {
                'default': 'Veuillez fournir un code postal valide',
                country: 'Veuillez fournir un code postal valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CA: 'Canada',
                    CH: 'Suisse',
                    CZ: 'Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IE: 'Irlande',
                    IN: 'Inde',
                    IT: 'Italie',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SE: 'Suède',
                    SG: 'Singapour',
                    SK: 'Slovaquie',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Belgium (Dutch) language package
     * Translated by @dokterpasta. Improved by @jdt
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'be_NL': {
            base64: {
                'default': 'Geef een geldige base 64 geëncodeerde tekst in'
            },
            between: {
                'default': 'Geef een waarde in van %s tot en met %s',
                notInclusive: 'Geef een waarde in van %s tot %s'
            },
            bic: {
                'default': 'Geef een geldig BIC-nummer in'
            },
            callback: {
                'default': 'Geef een geldige waarde in'
            },
            choice: {
                'default': 'Geef een geldige waarde in',
                less: 'Kies minimaal %s opties',
                more: 'Kies maximaal %s opties',
                between: 'Kies tussen de %s en %s opties'
            },
            color: {
                'default': 'Geef een geldige kleurcode in'
            },
            creditCard: {
                'default': 'Geef een geldig kredietkaartnummer in'
            },
            cusip: {
                'default': 'Geef een geldig CUSIP-nummer in'
            },
            cvv: {
                'default': 'Geef een geldig CVV-nummer in'
            },
            date: {
                'default': 'Geef een geldige datum in',
                min: 'Geef een datum in die na %s ligt',
                max: 'Geef een datum in die voor %s ligt',
                range: 'Geef een datum in die tussen %s en %s ligt'
            },
            different: {
                'default': 'Geef een andere waarde in'
            },
            digits: {
                'default': 'Geef alleen cijfers in'
            },
            ean: {
                'default': 'Geef een geldig EAN-nummer in'
            },
            ein: {
                'default': 'Geef een geldig EIN-nummer in'
            },
            emailAddress: {
                'default': 'Geef een geldig emailadres op'
            },
            file: {
                'default': 'Kies een geldig bestand'
            },
            greaterThan: {
                'default': 'Geef een waarde in die gelijk is aan of groter is dan %s',
                notInclusive: 'Geef een waarde in die groter is dan %s'
            },
            grid: {
                'default': 'Geef een geldig GRID-nummer in'
            },
            hex: {
                'default': 'Geef een geldig hexadecimaal nummer in'
            },
            iban: {
                'default': 'Geef een geldig IBAN-nummer in',
                country: 'Geef een geldig IBAN-nummer in uit %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Verenigde Arabische Emiraten',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Oostenrijk',
                    AZ: 'Azerbeidzjan',
                    BA: 'Bosnië en Herzegovina',
                    BE: 'België',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarije"',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CI: 'Ivoorkust',
                    CM: 'Kameroen',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    DO: 'Dominicaanse Republiek',
                    DZ: 'Algerije',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FO: 'Faeröer',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenland',
                    GR: 'Griekenland',
                    GT: 'Guatemala',
                    HR: 'Kroatië',
                    HU: 'Hongarije',
                    IE: 'Ierland',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'IJsland',
                    IT: 'Italië',
                    JO: 'Jordan',
                    KW: 'Koeweit',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldavië',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonië',
                    ML: 'Mali',
                    MR: 'Mauretanië',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestijnse',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SA: 'Saudi-Arabië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunesië',
                    TR: 'Turkije',
                    VG: 'Britse Maagdeneilanden'
                }
            },
            id: {
                'default': 'Geef een geldig identificatienummer in',
                country: 'Geef een geldig identificatienummer in uit %s',
                countries: {
                    BA: 'Bosnië en Herzegovina',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CL: 'Chili',
                    CN: 'China',
                    CZ: 'Tsjechische',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    LT: 'Litouwen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Macedonië',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Zuid-Afrika'
                }
            },
            identical: {
                'default': 'Geef dezelfde waarde in'
            },
            imei: {
                'default': 'Geef een geldig IMEI-nummer in'
            },
            imo: {
                'default': 'Geef een geldig IMO-nummer in'
            },
            integer: {
                'default': 'Geef een geldig nummer in'
            },
            ip: {
                'default': 'Geef een geldig IP-adres in',
                ipv4: 'Geef een geldig IPv4-adres in',
                ipv6: 'Geef een geldig IPv6-adres in'
            },
            isbn: {
                'default': 'Geef een geldig ISBN-nummer in'
            },
            isin: {
                'default': 'Geef een geldig ISIN-nummer in'
            },
            ismn: {
                'default': 'Geef een geldig ISMN-nummer in'
            },
            issn: {
                'default': 'Geef een geldig ISSN-nummer in'
            },
            lessThan: {
                'default': 'Geef een waarde in die gelijk is aan of kleiner is dan %s',
                notInclusive: 'Geef een waarde in die kleiner is dan %s'
            },
            mac: {
                'default': 'Geef een geldig MAC-adres in'
            },
            meid: {
                'default': 'Geef een geldig MEID-nummer in'
            },
            notEmpty: {
                'default': 'Geef een waarde in'
            },
            numeric: {
                'default': 'Geef een geldig kommagetal in'
            },
            phone: {
                'default': 'Geef een geldig telefoonnummer in',
                country: 'Geef een geldig telefoonnummer in uit %s',
                countries: {
                    AE: 'Verenigde Arabische Emiraten',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CN: 'China',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IN: 'Indië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SK: 'Slowakije',
                    TH: 'Thailand',
                    US: 'VS',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Geef een waarde in die overeenkomt met het patroon'
            },
            remote: {
                'default': 'Geef een geldige waarde in'
            },
            rtn: {
                'default': 'Geef een geldig RTN-nummer in'
            },
            sedol: {
                'default': 'Geef een geldig SEDOL-nummer in'
            },
            siren: {
                'default': 'Geef een geldig SIREN-nummer in'
            },
            siret: {
                'default': 'Geef een geldig SIRET-nummer in'
            },
            step: {
                'default': 'Geef een geldig meervoud in van %s'
            },
            stringCase: {
                'default': 'Geef enkel kleine letters in',
                upper: 'Geef enkel hoofdletters in'
            },
            stringLength: {
                'default': 'Geef een waarde in met de juiste lengte',
                less: 'Geef minder dan %s karakters in',
                more: 'Geef meer dan %s karakters in',
                between: 'Geef tussen %s en %s karakters in'
            },
            uri: {
                'default': 'Geef een geldige URI in'
            },
            uuid: {
                'default': 'Geef een geldig UUID-nummer in',
                version: 'Geef een geldig UUID-nummer (versie %s) in'
            },
            vat: {
                'default': 'Geef een geldig BTW-nummer in',
                country: 'Geef een geldig BTW-nummer in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BE: 'België',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GR: 'Griekenland',
                    EL: 'Griekenland',
                    HU: 'Hongarije',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    IT: 'Italië',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    VE: 'Venezuela',
                    ZA: 'Zuid-Afrika'
                }
            },
            vin: {
                'default': 'Geef een geldig VIN-nummer in'
            },
            zipCode: {
                'default': 'Geef een geldige postcode in',
                country: 'Geef een geldige postcode in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CA: 'Canada',
                    CH: 'Zwitserland',
                    CZ: 'Tsjechische',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IE: 'Ierland',
                    IN: 'Indië',
                    IT: 'Italië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SE: 'Zweden',
                    SG: 'Singapore',
                    SK: 'Slowakije',
                    US: 'VS'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Bulgarian language package
     * Translated by @mraiur
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'bg_BG': {
            base64: {
                'default': 'Моля, въведете валиден base 64 кодиран'
            },
            between: {
                'default': 'Моля, въведете стойност между %s и %s',
                notInclusive: 'Моля, въведете стойност точно между %s и %s'
            },
            bic: {
                'default': 'Моля, въведете валиден BIC номер'
            },
            callback: {
                'default': 'Моля, въведете валидна стойност'
            },
            choice: {
                'default': 'Моля, въведете валидна стойност',
                less: 'Моля изберете минимална стойност %s',
                more: 'Моля изберете максимална стойност %s',
                between: 'Моля изберете от %s до %s стойност'
            },
            color: {
                'default': 'Моля, въведете валиден цвят'
            },
            creditCard: {
                'default': 'Моля, въведете валиден номер на кредитна карта'
            },
            cusip: {
                'default': 'Моля, въведете валиден CUSIP номер'
            },
            cvv: {
                'default': 'Моля, въведете валиден CVV номер'
            },
            date: {
                'default': 'Моля, въведете валидна дата',
                min: 'Моля въведете дата след %s',
                max: 'Моля въведете дата преди %s',
                range: 'Моля въведете дата между %s и %s'
            },
            different: {
                'default': 'Моля, въведете различна стойност'
            },
            digits: {
                'default': 'Моля, въведете само цифри'
            },
            ean: {
                'default': 'Моля, въведете валиден EAN номер'
            },
            ein: {
                'default': 'Моля, въведете валиден EIN номер'
            },
            emailAddress: {
                'default': 'Моля, въведете валиден имейл адрес'
            },
            file: {
                'default': 'Моля, изберете валиден файл'
            },
            greaterThan: {
                'default': 'Моля, въведете стойност по-голяма от или равна на %s',
                notInclusive: 'Моля, въведете стойност по-голяма от %s'
            },
            grid: {
                'default': 'Моля, изберете валиден GRId номер'
            },
            hex: {
                'default': 'Моля, въведете валиден шестнадесетичен номер'
            },
            iban: {
                'default': 'Моля, въведете валиден IBAN номер',
                country: 'Моля, въведете валиден номер на IBAN в %s',
                countries: {
                    АD: 'Андора',
                    AE: 'Обединени арабски емирства',
                    AL: 'Албания',
                    AO: 'Ангола',
                    AT: 'Австрия',
                    AZ: 'Азербайджан',
                    BA: 'Босна и Херцеговина',
                    BE: 'Белгия',
                    BF: 'Буркина Фасо',
                    BG: 'България',
                    BH: 'Бахрейн',
                    BI: 'Бурунди',
                    BJ: 'Бенин',
                    BR: 'Бразилия',
                    CH: 'Швейцария',
                    CI: 'Ivory Coast',
                    CM: 'Камерун',
                    CR: 'Коста Рика',
                    CV: 'Cape Verde',
                    CY: 'Кипър',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    DO: 'Доминиканска република',
                    DZ: 'Алжир',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    FO: 'Фарьорските острови',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    GE: 'Грузия',
                    GI: 'Гибралтар',
                    GL: 'Гренландия',
                    GR: 'Гърция',
                    GT: 'Гватемала',
                    HR: 'Хърватия',
                    HU: 'Унгария',
                    IE: 'Ирландия',
                    IL: 'Израел',
                    IR: 'Иран',
                    IS: 'Исландия',
                    IT: 'Италия',
                    JO: 'Йордания',
                    KW: 'Кувейт',
                    KZ: 'Казахстан',
                    LB: 'Ливан',
                    LI: 'Лихтенщайн',
                    LT: 'Литва',
                    LU: 'Люксембург',
                    LV: 'Латвия',
                    MC: 'Монако',
                    MD: 'Молдова',
                    ME: 'Черна гора',
                    MG: 'Мадагаскар',
                    MK: 'Македония',
                    ML: 'Мали',
                    MR: 'Мавритания',
                    MT: 'Малта',
                    MU: 'Мавриций',
                    MZ: 'Мозамбик',
                    NL: 'Нидерландия',
                    NO: 'Норвегия',
                    PK: 'Пакистан',
                    PL: 'Полша',
                    PS: 'палестинска',
                    PT: 'Португалия',
                    QA: 'Катар',
                    RO: 'Румъния',
                    RS: 'Сърбия',
                    SA: 'Саудитска Арабия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    SM: 'San Marino',
                    SN: 'Сенегал',
                    TN: 'Тунис',
                    TR: 'Турция',
                    VG: 'Британски Вирджински острови'
                }
            },
            id: {
                'default': 'Моля, въведете валиден идентификационен номер',
                country: 'Моля, въведете валиден идентификационен номер в %s',
                countries: {
                    BA: 'Босна и Херцеговина',
                    BG: 'България',
                    BR: 'Бразилия',
                    СН: 'Швейцария',
                    CL: 'Чили',
                    CN: 'Китай',
                    CZ: 'Чешката република',
                    DK: 'Дания',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    HR: 'Хърватия',
                    IE: 'Ирландия',
                    IS: 'Исландия',
                    LT: 'Литва',
                    LV: 'Латвия',
                    ME: 'Черна гора',
                    MK: 'Македония',
                    NL: 'Холандия',
                    PL: 'Полша',
                    RO: 'Румъния',
                    RS: 'Сърбия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    SM: 'San Marino',
                    TH: 'Тайланд',
                    ZA: 'Южна Африка'
                }
            },
            identical: {
                'default': 'Моля, въведете една и съща стойност'
            },
            imei: {
                'default': 'Моля, въведете валиден IMEI номер'
            },
            imo: {
                'default': 'Моля, въведете валиден IMO номер'
            },
            integer: {
                'default': 'Моля, въведете валиден номер'
            },
            ip: {
                'default': 'Моля, въведете валиден IP адрес',
                ipv4: 'Моля, въведете валиден IPv4 адрес',
                ipv6: 'Моля, въведете валиден IPv6 адрес'
            },
            isbn: {
                'default': 'Моля, въведете валиден ISBN номер'
            },
            isin: {
                'default': 'Моля, въведете валиден ISIN номер'
            },
            ismn: {
                'default': 'Моля, въведете валиден ISMN номер'
            },
            issn: {
                'default': 'Моля, въведете валиден ISSN номер'
            },
            lessThan: {
                'default': 'Моля, въведете стойност по-малка или равна на %s',
                notInclusive: 'Моля, въведете стойност по-малко от %s'
            },
            mac: {
                'default': 'Моля, въведете валиден MAC адрес'
            },
            meid: {
                'default': 'Моля, въведете валиден MEID номер'
            },
            notEmpty: {
                'default': 'Моля, въведете стойност'
            },
            numeric: {
                'default': 'Моля, въведете валидно число с плаваща запетая'
            },
            phone: {
                'default': 'Моля, въведете валиден телефонен номер',
                country: 'Моля, въведете валиден телефонен номер в %s',
                countries: {
                    AE: 'Обединени арабски емирства',
                    BG: 'България',
                    BR: 'Бразилия',
                    CN: 'Китай',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    ES: 'Испания',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    IN: 'Индия',
                    MA: 'Мароко',
                    NL: 'Нидерландия',
                    PK: 'Пакистан',
                    RO: 'Румъния',
                    RU: 'Русия',
                    SK: 'Словакия',
                    TH: 'Тайланд',
                    US: 'САЩ',
                    VE: 'Венецуела'
                }
            },
            regexp: {
                'default': 'Моля, въведете стойност, отговаряща на модела'
            },
            remote: {
                'default': 'Моля, въведете валидна стойност'
            },
            rtn: {
                'default': 'Моля, въведете валиде  RTN номер'
            },
            sedol: {
                'default': 'Моля, въведете валиден SEDOL номер'
            },
            siren: {
                'default': 'Моля, въведете валиден SIREN номер'
            },
            siret: {
                'default': 'Моля, въведете валиден SIRET номер'
            },
            step: {
                'default': 'Моля, въведете валиденa стъпка от %s'
            },
            stringCase: {
                'default': 'Моля, въведете само с малки букви',
                upper: 'Моля въведете само главни букви'
            },
            stringLength: {
                'default': 'Моля, въведете стойност с валидни дължина',
                less: 'Моля, въведете по-малко от %s знака',
                more: 'Моля въведете повече от %s знака',
                between: 'Моля, въведете стойност между %s и %s знака'
            },
            uri: {
                'default': 'Моля, въведете валиден URI'
            },
            uuid: {
                'default': 'Моля, въведете валиден UUID номер',
                version: 'Моля, въведете валиден UUID номер с версия %s'
            },
            vat: {
                'default': 'Моля, въведете валиден ДДС',
                country: 'Моля, въведете валиден ДДС в %s',
                countries: {
                    AT: 'Австрия',
                    BE: 'Белгия',
                    BG: 'България',
                    BR: 'Бразилия',
                    СН: 'Швейцария',
                    CY: 'Кипър',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    EE: 'Естония',
                    ES: 'Испания',
                    FI: 'Финландия',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    GR: 'Гърция',
                    EL: 'Гърция',
                    HU: 'Унгария',
                    HR: 'Ирландия',
                    IE: 'Ирландски',
                    IS: 'Исландия',
                    IT: 'Италия',
                    LT: 'Литва',
                    LU: 'Люксембург',
                    LV: 'Латвия',
                    MT: 'Малта',
                    NL: 'Холандия',
                    NO: 'Норвегия',
                    PL: 'Полша',
                    PT: 'Португалия',
                    RO: 'Румъния',
                    RU: 'Русия',
                    RS: 'Сърбия',
                    SE: 'Швеция',
                    SI: 'Словения',
                    SK: 'Словакия',
                    VE: 'Венецуела',
                    ZA: 'Южна Африка'
                }
            },
            vin: {
                'default': 'Моля, въведете валиден номер VIN'
            },
            zipCode: {
                'default': 'Моля, въведете валиден пощенски код',
                country: 'Моля, въведете валиден пощенски код в %s',
                countries: {
                    AT: 'Австрия',
                    BG: 'България',
                    BR: 'Бразилия',
                    CA: 'Канада',
                    СН: 'Швейцария',
                    CZ: 'Чешката република',
                    DE: 'Германия',
                    DK: 'Дания',
                    ES: 'Испания',
                    FR: 'Франция',
                    GB: 'Обединеното кралство',
                    IE: 'Ирландски',
                    IN: 'Индия',
                    IT: 'Италия',
                    MA: 'Мароко',
                    NL: 'Холандия',
                    PL: 'Полша',
                    PT: 'Португалия',
                    RO: 'Румъния',
                    RU: 'Русия',
                    SE: 'Швеция',
                    SG: 'Сингапур',
                    SK: 'Словакия',
                    US: 'САЩ'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Catalan language package
     * Translated by @ArnauAregall
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ca_ES': {
            base64: {
                'default': 'Si us plau introdueix un valor vàlid en base 64'
            },
            between: {
                'default': 'Si us plau introdueix un valor entre %s i %s',
                notInclusive: 'Si us plau introdueix un valor comprès entre %s i %s'
            },
            bic: {
                'default': 'Si us plau introdueix un nombre BIC vàlid'
            },
            callback: {
                'default': 'Si us plau introdueix un valor vàlid'
            },
            choice: {
                'default': 'Si us plau introdueix un valor vàlid',
                less: 'Si us plau escull %s opcions com a mínim',
                more: 'Si us plau escull %s opcions com a màxim',
                between: 'Si us plau escull entre %s i %s opcions'
            },
            color: {
                'default': 'Si us plau introdueix un color vàlid'
            },
            creditCard: {
                'default': 'Si us plau introdueix un nombre vàlid de targeta de crèdit'
            },
            cusip: {
                'default': 'Si us plau introdueix un nombre CUSIP vàlid'
            },
            cvv: {
                'default': 'Si us plau introdueix un nombre CVV vàlid'
            },
            date: {
                'default': 'Si us plau introdueix una data vàlida',
                min: 'Si us plau introdueix una data posterior a %s',
                max: 'Si us plau introdueix una data anterior %s',
                range: 'Si us plau introdueix una data compresa entre %s i %s'
            },
            different: {
                'default': 'Si us plau introdueix un valor diferent'
            },
            digits: {
                'default': 'Si us plau introdueix només dígits'
            },
            ean: {
                'default': 'Si us plau introdueix un nombre EAN vàlid'
            },
            ein: {
                'default': 'Si us plau introdueix un nombre EIN vàlid'
            },
            emailAddress: {
                'default': 'Si us plau introdueix una adreça electrònica vàlida'
            },
            file: {
                'default': 'Si us plau selecciona un arxiu vàlid'
            },
            greaterThan: {
                'default': 'Si us plau introdueix un valor més gran o igual a %s',
                notInclusive: 'Si us plau introdueix un valor més gran que %s'
            },
            grid: {
                'default': 'Si us plau introdueix un nombre GRId vàlid'
            },
            hex: {
                'default': 'Si us plau introdueix un valor hexadecimal vàlid'
            },
            iban: {
                'default': 'Si us plau introdueix un nombre IBAN vàlid',
                country: 'Si us plau introdueix un nombre IBAN vàlid a %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirats Àrabs Units',
                    AL: 'Albània',
                    AO: 'Angola',
                    AT: 'Àustria',
                    AZ: 'Azerbaidjan',
                    BA: 'Bòsnia i Hercegovina',
                    BE: 'Bèlgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgària',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CI: 'Costa d\'Ivori',
                    CM: 'Camerun',
                    CR: 'Costa Rica',
                    CV: 'Cap Verd',
                    CY: 'Xipre',
                    CZ: 'República Txeca',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Algèria',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlàndia',
                    FO: 'Illes Fèroe',
                    FR: 'França',
                    GB: 'Regne Unit',
                    GE: 'Geòrgia',
                    GI: 'Gibraltar',
                    GL: 'Grenlàndia',
                    GR: 'Grècia',
                    GT: 'Guatemala',
                    HR: 'Croàcia',
                    HU: 'Hongria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islàndia',
                    IT: 'Itàlia',
                    JO: 'Jordània',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líban',
                    LI: 'Liechtenstein',
                    LT: 'Lituània',
                    LU: 'Luxemburg',
                    LV: 'Letònia',
                    MC: 'Mònaco',
                    MD: 'Moldàvia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedònia',
                    ML: 'Malo',
                    MR: 'Mauritània',
                    MT: 'Malta',
                    MU: 'Maurici',
                    MZ: 'Moçambic',
                    NL: 'Països Baixos',
                    NO: 'Noruega',
                    PK: 'Pakistan',
                    PL: 'Polònia',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Sèrbia',
                    SA: 'Aràbia Saudita',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Illes Verges Britàniques'
                }
            },
            id: {
                'default': 'Si us plau introdueix un nombre d\'identificació vàlid',
                country: 'Si us plau introdueix un nombre d\'identificació vàlid a %s',
                countries: {
                    BA: 'Bòsnia i Hercegovina',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CL: 'Xile',
                    CN: 'Xina',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlpandia',
                    HR: 'Cropàcia',
                    IE: 'Irlanda',
                    IS: 'Islàndia',
                    LT: 'Lituania',
                    LV: 'Letònia',
                    ME: 'Montenegro',
                    MK: 'Macedònia',
                    NL: 'Països Baixos',
                    PL: 'Polònia',
                    RO: 'Romania',
                    RS: 'Sèrbia',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    SM: 'San Marino',
                    TH: 'Tailàndia',
                    ZA: 'Sud-àfrica'
                }
            },
            identical: {
                'default': 'Si us plau introdueix exactament el mateix valor'
            },
            imei: {
                'default': 'Si us plau introdueix un nombre IMEI vàlid'
            },
            imo: {
                'default': 'Si us plau introdueix un nombre IMO vàlid'
            },
            integer: {
                'default': 'Si us plau introdueix un nombre vàlid'
            },
            ip: {
                'default': 'Si us plau introdueix una direcció IP vàlida',
                ipv4: 'Si us plau introdueix una direcció IPV4 vàlida',
                ipv6: 'Si us plau introdueix una direcció IPV6 vàlida'
            },
            isbn: {
                'default': 'Si us plau introdueix un nombre ISBN vàlid'
            },
            isin: {
                'default': 'Si us plau introdueix un nombre ISIN vàlid'
            },
            ismn: {
                'default': 'Si us plau introdueix un nombre ISMN vàlid'
            },
            issn: {
                'default': 'Si us plau introdueix un nombre ISSN vàlid'
            },
            lessThan: {
                'default': 'Si us plau introdueix un valor menor o igual a %s',
                notInclusive: 'Si us plau introdueix un valor menor que %s'
            },
            mac: {
                'default': 'Si us plau introdueix una adreça MAC vàlida'
            },
            meid: {
                'default': 'Si us plau introdueix nombre MEID vàlid'
            },
            notEmpty: {
                'default': 'Si us plau introdueix un valor'
            },
            numeric: {
                'default': 'Si us plau introdueix un nombre decimal vàlid'
            },
            phone: {
                'default': 'Si us plau introdueix un telèfon vàlid',
                country: 'Si us plau introdueix un telèfon vàlid a %s',
                countries: {
                    AE: 'Emirats Àrabs Units',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CN: 'Xina',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    ES: 'Espanya',
                    FR: 'França',
                    GB: 'Regne Unit',
                    IN: 'Índia',
                    MA: 'Marroc',
                    NL: 'Països Baixos',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Rússia',
                    SK: 'Eslovàquia',
                    TH: 'Tailàndia',
                    US: 'Estats Units',
                    VE: 'Veneçuela'
                }
            },
            regexp: {
                'default': 'Si us plau introdueix un valor que coincideixi amb el patró'
            },
            remote: {
                'default': 'Si us plau introdueix un valor vàlid'
            },
            rtn: {
                'default': 'Si us plau introdueix un nombre RTN vàlid'
            },
            sedol: {
                'default': 'Si us plau introdueix un nombre SEDOL vàlid'
            },
            siren: {
                'default': 'Si us plau introdueix un nombre SIREN vàlid'
            },
            siret: {
                'default': 'Si us plau introdueix un nombre SIRET vàlid'
            },
            step: {
                'default': 'Si us plau introdueix un pas vàlid de %s'
            },
            stringCase: {
                'default': 'Si us plau introdueix només caràcters en minúscula',
                upper: 'Si us plau introdueix només caràcters en majúscula'
            },
            stringLength: {
                'default': 'Si us plau introdueix un valor amb una longitud vàlida',
                less: 'Si us plau introdueix menys de %s caràcters',
                more: 'Si us plau introdueix més de %s caràcters',
                between: 'Si us plau introdueix un valor amb una longitud compresa entre %s i %s caràcters'
            },
            uri: {
                'default': 'Si us plau introdueix una URI vàlida'
            },
            uuid: {
                'default': 'Si us plau introdueix un nom UUID vàlid',
                version: 'Si us plau introdueix una versió UUID vàlida per %s'
            },
            vat: {
                'default': 'Si us plau introdueix una quantitat d\'IVA vàlida',
                country: 'Si us plau introdueix una quantitat d\' IVA vàlida a %s',
                countries: {
                    AT: 'Àustria',
                    BE: 'Bèlgica',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CH: 'Suïssa',
                    CY: 'Xipre',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    EE: 'Estònia',
                    ES: 'Espanya',
                    FI: 'Finlàndia',
                    FR: 'França',
                    GB: 'Regne Unit',
                    GR: 'Grècia',
                    EL: 'Grècia',
                    HU: 'Hongria',
                    HR: 'Croàcia',
                    IE: 'Irlanda',
                    IS: 'Islàndia',
                    IT: 'Itàlia',
                    LT: 'Lituània',
                    LU: 'Luxemburg',
                    LV: 'Letònia',
                    MT: 'Malta',
                    NL: 'Països Baixos',
                    NO: 'Noruega',
                    PL: 'Polònia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Rússia',
                    RS: 'Sèrbia',
                    SE: 'Suècia',
                    SI: 'Eslovènia',
                    SK: 'Eslovàquia',
                    VE: 'Veneçuela',
                    ZA: 'Sud-àfrica'
                }
            },
            vin: {
                'default': 'Si us plau introdueix un nombre VIN vàlid'
            },
            zipCode: {
                'default': 'Si us plau introdueix un codi postal vàlid',
                country: 'Si us plau introdueix un codi postal vàlid a %s',
                countries: {
                    AT: 'Àustria',
                    BG: 'Bulgària',
                    BR: 'Brasil',
                    CA: 'Canadà',
                    CH: 'Suïssa',
                    CZ: 'República Checa',
                    DE: 'Alemanya',
                    DK: 'Dinamarca',
                    ES: 'Espanya',
                    FR: 'França',
                    GB: 'Rege Unit',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itàlia',
                    MA: 'Marroc',
                    NL: 'Països Baixos',
                    PL: 'Polònia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Rússia',
                    SE: 'Suècia',
                    SG: 'Singapur',
                    SK: 'Eslovàquia',
                    US: 'Estats Units'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Czech language package
     * Translated by @AdwinTrave. Improved by @cuchac, @budik21
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'cs_CZ': {
            base64: {
                'default': 'Prosím zadejte správný base64'
            },
            between: {
                'default': 'Prosím zadejte hodnotu mezi %s a %s',
                notInclusive: 'Prosím zadejte hodnotu mezi %s a %s (včetně těchto čísel)'
            },
            bic: {
                'default': 'Prosím zadejte správné BIC číslo'
            },
            callback: {
                'default': 'Prosím zadejte správnou hodnotu'
            },
            choice: {
                'default': 'Prosím vyberte správnou hodnotu',
                less: 'Hodnota musí být minimálně %s',
                more: 'Hodnota nesmí být více jak %s',
                between: 'Prosím vyberte mezi %s a %s'
            },
            color: {
                'default': 'Prosím zadejte správnou barvu'
            },
            creditCard: {
                'default': 'Prosím zadejte správné číslo kreditní karty'
            },
            cusip: {
                'default': 'Prosím zadejte správné CUSIP číslo'
            },
            cvv: {
                'default': 'Prosím zadejte správné CVV číslo'
            },
            date: {
                'default': 'Prosím zadejte správné datum',
                min: 'Prosím zadejte datum před %s',
                max: 'Prosím zadejte datum po %s',
                range: 'Prosím zadejte datum v rozmezí %s až %s'
            },
            different: {
                'default': 'Prosím zadejte jinou hodnotu'
            },
            digits: {
                'default': 'Toto pole může obsahovat pouze čísla'
            },
            ean: {
                'default': 'Prosím zadejte správné EAN číslo'
            },
            ein: {
                'default': 'Prosím zadejte správné EIN číslo'
            },
            emailAddress: {
                'default': 'Prosím zadejte správnou emailovou adresu'
            },
            file: {
                'default': 'Prosím vyberte soubor'
            },
            greaterThan: {
                'default': 'Prosím zadejte hodnotu větší nebo rovnu %s',
                notInclusive: 'Prosím zadejte hodnotu větší než %s'
            },
            grid: {
                'default': 'Prosím zadejte správné GRId číslo'
            },
            hex: {
                'default': 'Prosím zadejte správné hexadecimální číslo'
            },
            iban: {
                'default': 'Prosím zadejte správné IBAN číslo',
                country: 'Prosím zadejte správné IBAN číslo pro %s',
                countries: {
                    AD: 'Andorru',
                    AE: 'Spojené arabské emiráty',
                    AL: 'Albanii',
                    AO: 'Angolu',
                    AT: 'Rakousko',
                    AZ: 'Ázerbajdžán',
                    BA: 'Bosnu a Herzegovinu',
                    BE: 'Belgii',
                    BF: 'Burkinu Faso',
                    BG: 'Bulharsko',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CI: 'Pobřeží slonoviny',
                    CM: 'Kamerun',
                    CR: 'Kostariku',
                    CV: 'Cape Verde',
                    CY: 'Kypr',
                    CZ: 'Českou republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    DO: 'Dominikánskou republiku',
                    DZ: 'Alžírsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    FO: 'Faerské ostrovy',
                    FR: 'Francie',
                    GB: 'Velkou Británii',
                    GE: 'Gruzii',
                    GI: 'Gibraltar',
                    GL: 'Grónsko',
                    GR: 'Řecko',
                    GT: 'Guatemalu',
                    HR: 'Chorvatsko',
                    HU: 'Maďarsko',
                    IE: 'Irsko',
                    IL: 'Israel',
                    IR: 'Irán',
                    IS: 'Island',
                    IT: 'Itálii',
                    JO: 'Jordansko',
                    KW: 'Kuwait',
                    KZ: 'Kazachstán',
                    LB: 'Libanon',
                    LI: 'Lichtenštejnsko',
                    LT: 'Litvu',
                    LU: 'Lucembursko',
                    LV: 'Lotyšsko',
                    MC: 'Monaco',
                    MD: 'Moldavsko',
                    ME: 'Černou Horu',
                    MG: 'Madagaskar',
                    MK: 'Makedonii',
                    ML: 'Mali',
                    MR: 'Mauritánii',
                    MT: 'Maltu',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Nizozemsko',
                    NO: 'Norsko',
                    PK: 'Pakistán',
                    PL: 'Polsko',
                    PS: 'Palestinu',
                    PT: 'Portugalsko',
                    QA: 'Katar',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SA: 'Saudskou Arábii',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisko',
                    TR: 'Turecko',
                    VG: 'Britské Panenské ostrovy'
                }
            },
            id: {
                'default': 'Prosím zadejte správné rodné číslo',
                country: 'Prosím zadejte správné rodné číslo pro %s',
                countries: {
                    BA: 'Bosnu a Hercegovinu',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CL: 'Chile',
                    CN: 'Čínu',
                    CZ: 'Českou Republiku',
                    DK: 'Dánsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    HR: 'Chorvatsko',
                    IE: 'Irsko',
                    IS: 'Island',
                    LT: 'Litvu',
                    LV: 'Lotyšsko',
                    ME: 'Černou horu',
                    MK: 'Makedonii',
                    NL: 'Nizozemí',
                    PL: 'Polsko',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    TH: 'Thajsko',
                    ZA: 'Jižní Afriku'
                }
            },
            identical: {
                'default': 'Prosím zadejte stejnou hodnotu'
            },
            imei: {
                'default': 'Prosím zadejte správné IMEI číslo'
            },
            imo: {
                'default': 'Prosím zadejte správné IMO číslo'
            },
            integer: {
                'default': 'Prosím zadejte celé číslo'
            },
            ip: {
                'default': 'Prosím zadejte správnou IP adresu',
                ipv4: 'Prosím zadejte správnou IPv4 adresu',
                ipv6: 'Prosím zadejte správnou IPv6 adresu'
            },
            isbn: {
                'default': 'Prosím zadejte správné ISBN číslo'
            },
            isin: {
                'default': 'Prosím zadejte správné ISIN číslo'
            },
            ismn: {
                'default': 'Prosím zadejte správné ISMN číslo'
            },
            issn: {
                'default': 'Prosím zadejte správné ISSN číslo'
            },
            lessThan: {
                'default': 'Prosím zadejte hodnotu menší nebo rovno %s',
                notInclusive: 'Prosím zadejte hodnotu menčí než %s'
            },
            mac: {
                'default': 'Prosím zadejte správnou MAC adresu'
            },
            meid: {
                'default': 'Prosím zadejte správné MEID číslo'
            },
            notEmpty: {
                'default': 'Toto pole nesmí být prázdné'
            },
            numeric: {
                'default': 'Prosím zadejte číselnou hodnotu'
            },
            phone: {
                'default': 'Prosím zadejte správné telefoní číslo',
                country: 'Prosím zadejte správné telefoní číslo pro %s',
                countries: {
                    AE: 'Spojené arabské emiráty',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CN: 'Čínu',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    ES: 'Španělsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    IN: 'Indie',
                    MA: 'Maroko',
                    NL: 'Nizozemsko',
                    PK: 'Pákistán',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SK: 'Slovensko',
                    TH: 'Thajsko',
                    US: 'Spojené Státy Americké',
                    VE: 'Venezuelu'
                }
            },
            regexp: {
                'default': 'Prosím zadejte hodnotu splňující zadání'
            },
            remote: {
                'default': 'Prosím zadejte správnou hodnotu'
            },
            rtn: {
                'default': 'Prosím zadejte správné RTN číslo'
            },
            sedol: {
                'default': 'Prosím zadejte správné SEDOL číslo'
            },
            siren: {
                'default': 'Prosím zadejte správné SIREN číslo'
            },
            siret: {
                'default': 'Prosím zadejte správné SIRET číslo'
            },
            step: {
                'default': 'Prosím zadejte správný krok %s'
            },
            stringCase: {
                'default': 'Pouze malá písmena jsou povoleny v tomto poli',
                upper: 'Pouze velké písmena jsou povoleny v tomto poli'
            },
            stringLength: {
                'default': 'Toto pole nesmí být prázdné',
                less: 'Prosím zadejte hodnotu menší než %s znaků',
                more: 'Prosím zadejte hodnotu %s znaků a delší',
                between: 'Prosím zadejte hodnotu mezi %s a %s znaky'
            },
            uri: {
                'default': 'Prosím zadejte správnou URI'
            },
            uuid: {
                'default': 'Prosím zadejte správné UUID číslo',
                version: 'Prosím zadejte správné UUID verze %s'
            },
            vat: {
                'default': 'Prosím zadejte správné VAT číslo',
                country: 'Prosím zadejte správné VAT číslo pro %s',
                countries: {
                    AT: 'Rakousko',
                    BE: 'Belgii',
                    BG: 'Bulharsko',
                    BR: 'Brazílii',
                    CH: 'Švýcarsko',
                    CY: 'Kypr',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    EE: 'Estonsko',
                    ES: 'Španělsko',
                    FI: 'Finsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    GR: 'Řecko',
                    EL: 'Řecko',
                    HU: 'Maďarsko',
                    HR: 'Chorvatsko',
                    IE: 'Irsko',
                    IS: 'Island',
                    IT: 'Itálii',
                    LT: 'Litvu',
                    LU: 'Lucembursko',
                    LV: 'Lotyšsko',
                    MT: 'Maltu',
                    NL: 'Nizozemí',
                    NO: 'Norsko',
                    PL: 'Polsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    VE: 'Venezuelu',
                    ZA: 'Jižní Afriku'
                }
            },
            vin: {
                'default': 'Prosím zadejte správné VIN číslo'
            },
            zipCode: {
                'default': 'Prosím zadejte správné PSČ',
                country: 'Prosím zadejte správné PSČ pro %s',
                countries: {
                    AT: 'Rakousko',
                    BG: 'Bulharsko',
                    BR: 'Brazílie',
                    CA: 'Kanadu',
                    CH: 'Švýcarsko',
                    CZ: 'Českou Republiku',
                    DE: 'Německo',
                    DK: 'Dánsko',
                    ES: 'Španělsko',
                    FR: 'Francii',
                    GB: 'Velkou Británii',
                    IE: 'Irsko',
                    IN: 'Indie',
                    IT: 'Itálii',
                    MA: 'Maroko',
                    NL: 'Nizozemí',
                    PL: 'Polsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SE: 'Švédsko',
                    SG: 'Singapur',
                    SK: 'Slovensko',
                    US: 'Spojené Státy Americké'
                }
            }
        }
    });
}(window.jQuery));

(function($) {
    /**
     * Danish language package
     * Translated by @Djarnis
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'da_DK': {
            base64: {
                'default': 'Udfyld venligst dette felt med en gyldig base64-kodet værdi'
            },
            between: {
                'default': 'Udfyld venligst dette felt med en værdi mellem %s og %s',
                notInclusive: 'Indtast venligst kun en værdi mellem %s og %s'
            },
            bic: {
                'default': 'Udfyld venligst dette felt med et gyldigt BIC-nummer'
            },
            callback: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi'
            },
            choice: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi',
                less: 'Vælg venligst mindst %s valgmuligheder',
                more: 'Vælg venligst højst %s valgmuligheder',
                between: 'Vælg venligst %s - %s valgmuligheder'
            },
            color: {
                'default': 'Udfyld venligst dette felt med en gyldig farve'
            },
            creditCard: {
                'default': 'Udfyld venligst dette felt med et gyldigt kreditkort-nummer'
            },
            cusip: {
                'default': 'Udfyld venligst dette felt med et gyldigt CUSIP-nummer'
            },
            cvv: {
                'default': 'Udfyld venligst dette felt med et gyldigt CVV-nummer'
            },
            date: {
                'default': 'Udfyld venligst dette felt med en gyldig dato',
                min: 'Angiv venligst en dato efter %s',
                max: 'Angiv venligst en dato før %s',
                range: 'Angiv venligst en dato mellem %s - %s'
            },
            different: {
                'default': 'Udfyld venligst dette felt med en anden værdi'
            },
            digits: {
                'default': 'Indtast venligst kun cifre'
            },
            ean: {
                'default': 'Udfyld venligst dette felt med et gyldigt EAN-nummer'
            },
            ein: {
                'default': 'Udfyld venligst dette felt med et gyldigt EIN-nummer'
            },
            emailAddress: {
                'default': 'Udfyld venligst dette felt med en gyldig e-mail-adresse'
            },
            file: {
                'default': 'Vælg venligst en gyldig fil'
            },
            greaterThan: {
                'default': 'Udfyld venligst dette felt med en værdi større eller lig med %s',
                notInclusive: 'Udfyld venligst dette felt med en værdi større end %s'
            },
            grid: {
                'default': 'Udfyld venligst dette felt med et gyldigt GRId-nummer'
            },
            hex: {
                'default': 'Udfyld venligst dette felt med et gyldigt hexadecimal-nummer'
            },
            iban: {
                'default': 'Udfyld venligst dette felt med et gyldigt IBAN-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'De Forenede Arabiske Emirater',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Østrig',
                    AZ: 'Aserbajdsjan',
                    BA: 'Bosnien-Hercegovina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbenskysten',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Kap Verde',
                    CY: 'Cypern',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Den Dominikanske Republik',
                    DZ: 'Algeriet',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FO: 'Færøerne',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grønland',
                    GR: 'Grækenland',
                    GT: 'Guatemala',
                    HR: 'Kroatien',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kasakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Holland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palæstina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Rumænien',
                    RS: 'Serbien',
                    SA: 'Saudi-Arabien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunesien',
                    TR: 'Tyrkiet',
                    VG: 'Britiske Jomfruøer'
                }
            },
            id: {
                'default': 'Udfyld venligst dette felt med et gyldigt identifikations-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt identifikations-nummer i %s',
                countries: {
                    BA: 'Bosnien-Hercegovina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tjekkiet',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Makedonien',
                    NL: 'Holland',
                    PL: 'Polen',
                    RO: 'Rumænien',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Sydafrika'
                }
            },
            identical: {
                'default': 'Udfyld venligst dette felt med den samme værdi'
            },
            imei: {
                'default': 'Udfyld venligst dette felt med et gyldigt IMEI-nummer'
            },
            imo: {
                'default': 'Udfyld venligst dette felt med et gyldigt IMO-nummer'
            },
            integer: {
                'default': 'Udfyld venligst dette felt med et gyldigt tal'
            },
            ip: {
                'default': 'Udfyld venligst dette felt med en gyldig IP adresse',
                ipv4: 'Udfyld venligst dette felt med en gyldig IPv4 adresse',
                ipv6: 'Udfyld venligst dette felt med en gyldig IPv6 adresse'
            },
            isbn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISBN-nummer'
            },
            isin: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISIN-nummer'
            },
            ismn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISMN-nummer'
            },
            issn: {
                'default': 'Udfyld venligst dette felt med et gyldigt ISSN-nummer'
            },
            lessThan: {
                'default': 'Udfyld venligst dette felt med en værdi mindre eller lig med %s',
                notInclusive: 'Udfyld venligst dette felt med en værdi mindre end %s'
            },
            mac: {
                'default': 'Udfyld venligst dette felt med en gyldig MAC adresse'
            },
            meid: {
                'default': 'Udfyld venligst dette felt med et gyldigt MEID-nummer'
            },
            notEmpty: {
                'default': 'Udfyld venligst dette felt'
            },
            numeric: {
                'default': 'Udfyld venligst dette felt med et gyldigt flydende decimaltal'
            },
            phone: {
                'default': 'Udfyld venligst dette felt med et gyldigt telefonnummer',
                country: 'Udfyld venligst dette felt med et gyldigt telefonnummer i %s',
                countries: {
                    AE: 'De Forenede Arabiske Emirater',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'Kina',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    IN: 'Indien',
                    MA: 'Marokko',
                    NL: 'Holland',
                    PK: 'Pakistan',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    SK: 'Slovakiet',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Udfyld venligst dette felt med en værdi der matcher mønsteret'
            },
            remote: {
                'default': 'Udfyld venligst dette felt med en gyldig værdi'
            },
            rtn: {
                'default': 'Udfyld venligst dette felt med et gyldigt RTN-nummer'
            },
            sedol: {
                'default': 'Udfyld venligst dette felt med et gyldigt SEDOL-nummer'
            },
            siren: {
                'default': 'Udfyld venligst dette felt med et gyldigt SIREN-nummer'
            },
            siret: {
                'default': 'Udfyld venligst dette felt med et gyldigt SIRET-nummer'
            },
            step: {
                'default': 'Udfyld venligst dette felt med et gyldigt trin af %s'
            },
            stringCase: {
                'default': 'Udfyld venligst kun dette felt med små bogstaver',
                upper: 'Udfyld venligst kun dette felt med store bogstaver'
            },
            stringLength: {
                'default': 'Udfyld venligst dette felt med en værdi af gyldig længde',
                less: 'Udfyld venligst dette felt med mindre end %s tegn',
                more: 'Udfyld venligst dette felt med mere end %s tegn',
                between: 'Udfyld venligst dette felt med en værdi mellem %s og %s tegn'
            },
            uri: {
                'default': 'Udfyld venligst dette felt med en gyldig URI'
            },
            uuid: {
                'default': 'Udfyld venligst dette felt med et gyldigt UUID-nummer',
                version: 'Udfyld venligst dette felt med en gyldig UUID version %s-nummer'
            },
            vat: {
                'default': 'Udfyld venligst dette felt med et gyldig moms-nummer',
                country: 'Udfyld venligst dette felt med et gyldigt moms-nummer i %s',
                countries: {
                    AT: 'Østrig',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    GR: 'Grækenland',
                    EL: 'Grækenland',
                    HU: 'Ungarn',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Holland',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakiet',
                    VE: 'Venezuela',
                    ZA: 'Sydafrika'
                }
            },
            vin: {
                'default': 'Udfyld venligst dette felt med et gyldigt VIN-nummer'
            },
            zipCode: {
                'default': 'Udfyld venligst dette felt med et gyldigt postnummer',
                country: 'Udfyld venligst dette felt med et gyldigt postnummer i %s',
                countries: {
                    AT: 'Østrig',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Canada',
                    CH: 'Schweiz',
                    CZ: 'Tjekkiet',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrig',
                    GB: 'Storbritannien',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marokko',
                    NL: 'Holland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumænien',
                    RU: 'Rusland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakiet',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * German language package
     * Translated by @logemann
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'de_DE': {
            base64: {
                'default': 'Bitte eine Base64 Kodierung eingeben'
            },
            between: {
                'default': 'Bitte einen Wert zwischen %s und %s eingeben',
                notInclusive: 'Bitte einen Wert zwischen %s und %s (strictly) eingeben'
            },
            bic: {
                'default': 'Bitte gültige BIC Nummer eingeben'
            },
            callback: {
                'default': 'Bitte einen gültigen Wert eingeben'
            },
            choice: {
                'default': 'Bitte einen gültigen Wert eingeben',
                less: 'Bitte mindestens %s Werte eingeben',
                more: 'Bitte maximal %s Werte eingeben',
                between: 'Zwischen %s - %s Werten wählen'
            },
            color: {
                'default': 'Bitte gültige Farbe eingeben'
            },
            creditCard: {
                'default': 'Bitte gültige Kreditkartennr. eingeben'
            },
            cusip: {
                'default': 'Bitte gültige CUSIP Nummer eingeben'
            },
            cvv: {
                'default': 'Bitte gültige CVV Nummer eingeben'
            },
            date: {
                'default': 'Bitte gültiges Datum eingeben',
                min: 'Bitte gültiges Datum nach %s',
                max: 'Bitte gültiges Datum vor %s',
                range: 'Bitte gültiges Datum im zwischen %s - %s'
            },
            different: {
                'default': 'Bitte anderen Wert eingeben'
            },
            digits: {
                'default': 'Bitte Zahlen eingeben'
            },
            ean: {
                'default': 'Bitte gültige EAN Nummer eingeben'
            },
            ein: {
                'default': 'Bitte gültige EIN Nummer eingeben'
            },
            emailAddress: {
                'default': 'Bitte gültige Emailadresse eingeben'
            },
            file: {
                'default': 'Bitte gültiges File eingeben'
            },
            greaterThan: {
                'default': 'Bitte Wert größer gleich %s eingeben',
                notInclusive: 'Bitte Wert größer als %s eingeben'
            },
            grid: {
                'default': 'Bitte gültige GRId Nummer eingeben'
            },
            hex: {
                'default': 'Bitte gültigen Hexadezimalwert eingeben'
            },
            iban: {
                'default': 'Bitte eine gültige IBAN Nummer eingeben',
                country: 'Bitte eine gültige IBAN Nummer für %s eingeben',
                countries: {
                    AD: 'Andorra',
                    AE: 'Vereinigte Arabische Emirate',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Österreich',
                    AZ: 'Aserbaidschan',
                    BA: 'Bosnien und Herzegowina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbeinküste',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Kap Verde',
                    CY: 'Zypern',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    DO: 'Dominikanische Republik',
                    DZ: 'Algerien',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finnland',
                    FO: 'Färöer-Inseln',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grönland',
                    GR: 'Griechenland',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordanien',
                    KW: 'Kuwait',
                    KZ: 'Kasachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MC: 'Monaco',
                    MD: 'Moldawien',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Mazedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Niederlande',
                    NO: 'Norwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palästina',
                    PT: 'Portugal',
                    QA: 'Katar',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SA: 'Saudi-Arabien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunesien',
                    TR: 'Türkei',
                    VG: 'Jungferninseln'
                }
            },
            id: {
                'default': 'Bitte gültige Identifikationsnnummer eingeben',
                country: 'Bitte gültige Identifikationsnummer für %s eingeben',
                countries: {
                    BA: 'Bosnien und Herzegowina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Tschechische',
                    DK: 'Dänemark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finnland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Lettland',
                    ME: 'Montenegro',
                    MK: 'Mazedonien',
                    NL: 'Niederlande',
                    PL: 'Polen',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Südafrika'
                }
            },
            identical: {
                'default': 'Bitte gleichen Wert eingeben'
            },
            imei: {
                'default': 'Bitte gültige IMEI Nummer eingeben'
            },
            imo: {
                'default': 'Bitte gültige IMO Nummer eingeben'
            },
            integer: {
                'default': 'Bitte Zahl eingeben'
            },
            ip: {
                'default': 'Bitte  gültige IP-Adresse eingeben',
                ipv4: 'Bitte  gültige IPv4 Adresse eingeben',
                ipv6: 'Bitte  gültige IPv6 Adresse eingeben'
            },
            isbn: {
                'default': 'Bitte gültige ISBN Nummer eingeben'
            },
            isin: {
                'default': 'Bitte gültige ISIN Nummer eingeben'
            },
            ismn: {
                'default': 'Bitte gültige ISMN Nummer eingeben'
            },
            issn: {
                'default': 'Bitte gültige ISSN Nummer eingeben'
            },
            lessThan: {
                'default': 'Bitte Wert kleiner gleich %s eingeben',
                notInclusive: 'Bitte Wert kleiner als %s eingeben'
            },
            mac: {
                'default': 'Bitte gültige MAC Adresse eingeben'
            },
            meid: {
                'default': 'Bitte gültige MEID Nummer eingeben'
            },
            notEmpty: {
                'default': 'Bitte Wert eingeben'
            },
            numeric: {
                'default': 'Bitte Nummer eingeben'
            },
            phone: {
                'default': 'Bitte gültige Telefonnummer eingeben',
                country: 'Bitte valide Telefonnummer für %s eingeben',
                countries: {
                    AE: 'Vereinigte Arabische Emirate',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'China',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    ES: 'Spanien',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    IN: 'Indien',
                    MA: 'Marokko',
                    NL: 'Niederlande',
                    PK: 'Pakistan',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    SK: 'Slowakei',
                    TH: 'Thailand',
                    US: 'Vereinigte Staaten von Amerika',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Bitte Wert eingeben, der der Maske entspricht'
            },
            remote: {
                'default': 'Bitte einen gültigen Wert eingeben'
            },
            rtn: {
                'default': 'Bitte gültige RTN Nummer eingeben'
            },
            sedol: {
                'default': 'Bitte gültige SEDOL Nummer eingeben'
            },
            siren: {
                'default': 'Bitte gültige SIREN Nummer eingeben'
            },
            siret: {
                'default': 'Bitte gültige SIRET Nummer eingeben'
            },
            step: {
                'default': 'Bitte einen gültigen Schritt von %s eingeben'
            },
            stringCase: {
                'default': 'Bitte nur Kleinbuchstaben eingeben',
                upper: 'Bitte nur Großbuchstaben eingeben'
            },
            stringLength: {
                'default': 'Bitte Wert mit gültiger Länge eingeben',
                less: 'Bitte weniger als %s Zeichen eingeben',
                more: 'Bitte mehr als %s Zeichen eingeben',
                between: 'Bitte Wert zwischen %s und %s Zeichen eingeben'
            },
            uri: {
                'default': 'Bitte gültige URI eingeben'
            },
            uuid: {
                'default': 'Bitte gültige UUID Nummer eingeben',
                version: 'Bitte gültige UUID Version %s eingeben'
            },
            vat: {
                'default': 'Bitte gültige VAT Nummer eingeben',
                country: 'Bitte gültige VAT Nummer für %s eingeben',
                countries: {
                    AT: 'Österreich',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Zypern',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    EE: 'Estland',
                    ES: 'Spanisch',
                    FI: 'Finnland',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    GR: 'Griechenland',
                    EL: 'Griechenland',
                    HU: 'Ungarn',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MT: 'Malta',
                    NL: 'Niederlande',
                    NO: 'Norwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    RS: 'Serbien',
                    SE: 'Schweden',
                    SI: 'Slowenien',
                    SK: 'Slowakei',
                    VE: 'Venezuela',
                    ZA: 'Südafrika'
                }
            },
            vin: {
                'default': 'Bitte gültige VIN Nummer eingeben'
            },
            zipCode: {
                'default': 'Bitte gültige PLZ eingeben',
                country: 'Bitte gültigen Postleitzahl für %s eingeben',
                countries: {
                    AT: 'Österreich',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Kanada',
                    CH: 'Schweiz',
                    CZ: 'Tschechische',
                    DE: 'Deutschland',
                    DK: 'Dänemark',
                    ES: 'Spanien',
                    FR: 'Frankreich',
                    GB: 'Vereinigtes Königreich',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marokko',
                    NL: 'Niederlande',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Russland',
                    SE: 'Schweden',
                    SG: 'Singapur',
                    SK: 'Slowakei',
                    US: 'Vereinigte Staaten von Amerika'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Default English package. It's included in the dist, so you do NOT need to include it to your head tag
     * The only reason I put it here is that you can clone it, and translate it into your language
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'en_US': {
            base64: {
                'default': 'Please enter a valid base 64 encoded'
            },
            between: {
                'default': 'Please enter a value between %s and %s',
                notInclusive: 'Please enter a value between %s and %s strictly'
            },
            bic: {
                'default': 'Please enter a valid BIC number'
            },
            callback: {
                'default': 'Please enter a valid value'
            },
            choice: {
                'default': 'Please enter a valid value',
                less: 'Please choose %s options at minimum',
                more: 'Please choose %s options at maximum',
                between: 'Please choose %s - %s options'
            },
            color: {
                'default': 'Please enter a valid color'
            },
            creditCard: {
                'default': 'Please enter a valid credit card number'
            },
            cusip: {
                'default': 'Please enter a valid CUSIP number'
            },
            cvv: {
                'default': 'Please enter a valid CVV number'
            },
            date: {
                'default': 'Please enter a valid date',
                min: 'Please enter a date after %s',
                max: 'Please enter a date before %s',
                range: 'Please enter a date in the range %s - %s'
            },
            different: {
                'default': 'Please enter a different value'
            },
            digits: {
                'default': 'Please enter only digits'
            },
            ean: {
                'default': 'Please enter a valid EAN number'
            },
            ein: {
                'default': 'Please enter a valid EIN number'
            },
            emailAddress: {
                'default': 'Please enter a valid email address'
            },
            file: {
                'default': 'Please choose a valid file'
            },
            greaterThan: {
                'default': 'Please enter a value greater than or equal to %s',
                notInclusive: 'Please enter a value greater than %s'
            },
            grid: {
                'default': 'Please enter a valid GRId number'
            },
            hex: {
                'default': 'Please enter a valid hexadecimal number'
            },
            iban: {
                'default': 'Please enter a valid IBAN number',
                country: 'Please enter a valid IBAN number in %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'United Arab Emirates',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia and Herzegovina',
                    BE: 'Belgium',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CI: 'Ivory Coast',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    DO: 'Dominican Republic',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FO: 'Faroe Islands',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Greece',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Hungary',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Italy',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PK: 'Pakistan',
                    PL: 'Poland',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turkey',
                    VG: 'Virgin Islands, British'
                }
            },
            id: {
                'default': 'Please enter a valid identification number',
                country: 'Please enter a valid identification number in %s',
                countries: {
                    BA: 'Bosnia and Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'South Africa'
                }
            },
            identical: {
                'default': 'Please enter the same value'
            },
            imei: {
                'default': 'Please enter a valid IMEI number'
            },
            imo: {
                'default': 'Please enter a valid IMO number'
            },
            integer: {
                'default': 'Please enter a valid number'
            },
            ip: {
                'default': 'Please enter a valid IP address',
                ipv4: 'Please enter a valid IPv4 address',
                ipv6: 'Please enter a valid IPv6 address'
            },
            isbn: {
                'default': 'Please enter a valid ISBN number'
            },
            isin: {
                'default': 'Please enter a valid ISIN number'
            },
            ismn: {
                'default': 'Please enter a valid ISMN number'
            },
            issn: {
                'default': 'Please enter a valid ISSN number'
            },
            lessThan: {
                'default': 'Please enter a value less than or equal to %s',
                notInclusive: 'Please enter a value less than %s'
            },
            mac: {
                'default': 'Please enter a valid MAC address'
            },
            meid: {
                'default': 'Please enter a valid MEID number'
            },
            notEmpty: {
                'default': 'Please enter a value'
            },
            numeric: {
                'default': 'Please enter a valid float number'
            },
            phone: {
                'default': 'Please enter a valid phone number',
                country: 'Please enter a valid phone number in %s',
                countries: {
                    AE: 'United Arab Emirates',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'China',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IN: 'India',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Please enter a value matching the pattern'
            },
            remote: {
                'default': 'Please enter a valid value'
            },
            rtn: {
                'default': 'Please enter a valid RTN number'
            },
            sedol: {
                'default': 'Please enter a valid SEDOL number'
            },
            siren: {
                'default': 'Please enter a valid SIREN number'
            },
            siret: {
                'default': 'Please enter a valid SIRET number'
            },
            step: {
                'default': 'Please enter a valid step of %s'
            },
            stringCase: {
                'default': 'Please enter only lowercase characters',
                upper: 'Please enter only uppercase characters'
            },
            stringLength: {
                'default': 'Please enter a value with valid length',
                less: 'Please enter less than %s characters',
                more: 'Please enter more than %s characters',
                between: 'Please enter value between %s and %s characters long'
            },
            uri: {
                'default': 'Please enter a valid URI'
            },
            uuid: {
                'default': 'Please enter a valid UUID number',
                version: 'Please enter a valid UUID version %s number'
            },
            vat: {
                'default': 'Please enter a valid VAT number',
                country: 'Please enter a valid VAT number in %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgium',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CY: 'Cyprus',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spain',
                    FI: 'Finland',
                    FR: 'France',
                    GB: 'United Kingdom',
                    GR: 'Greece',
                    EL: 'Greece',
                    HU: 'Hungary',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    IT: 'Italy',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'South Africa'
                }
            },
            vin: {
                'default': 'Please enter a valid VIN number'
            },
            zipCode: {
                'default': 'Please enter a valid postal code',
                country: 'Please enter a valid postal code in %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Canada',
                    CH: 'Switzerland',
                    CZ: 'Czech Republic',
                    DE: 'Germany',
                    DK: 'Denmark',
                    ES: 'Spain',
                    FR: 'France',
                    GB: 'United Kingdom',
                    IE: 'Ireland',
                    IN: 'India',
                    IT: 'Italy',
                    MA: 'Morocco',
                    NL: 'Netherlands',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Sweden',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Chilean Spanish language package
     * Translated by @marceloampuerop6
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'es_CL': {
            base64: {
                'default': 'Por favor ingrese un valor válido en base 64'
            },
            between: {
                'default': 'Por favor ingrese un valor entre %s y %s',
                notInclusive: 'Por favor ingrese un valor sólo entre %s and %s'
            },
            bic: {
                'default': 'Por favor ingrese un número BIC válido'
            },
            callback: {
                'default': 'Por favor ingrese un valor válido'
            },
            choice: {
                'default': 'Por favor ingrese un valor válido',
                less: 'Por favor elija %s opciones como mínimo',
                more: 'Por favor elija %s optiones como máximo',
                between: 'Por favor elija de %s a %s opciones'
            },
            color: {
                'default': 'Por favor ingrese un color válido'
            },
            creditCard: {
                'default': 'Por favor ingrese un número válido de tarjeta de crédito'
            },
            cusip: {
                'default': 'Por favor ingrese un número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor ingrese un número CVV válido'
            },
            date: {
                'default': 'Por favor ingrese una fecha válida',
                min: 'Por favor ingrese una fecha posterior a %s',
                max: 'Por favor ingrese una fecha anterior a %s',
                range: 'Por favor ingrese una fecha en el rango %s - %s'
            },
            different: {
                'default': 'Por favor ingrese un valor distinto'
            },
            digits: {
                'default': 'Por favor ingrese sólo dígitos'
            },
            ean: {
                'default': 'Por favor ingrese un número EAN válido'
            },
            ein: {
                'default': 'Por favor ingrese un número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor ingrese un email válido'
            },
            file: {
                'default': 'Por favor elija un archivo válido'
            },
            greaterThan: {
                'default': 'Por favor ingrese un valor mayor o igual a %s',
                notInclusive: 'Por favor ingrese un valor mayor que %s'
            },
            grid: {
                'default': 'Por favor ingrese un número GRId válido'
            },
            hex: {
                'default': 'Por favor ingrese un valor hexadecimal válido'
            },
            iban: {
                'default': 'Por favor ingrese un número IBAN válido',
                country: 'Por favor ingrese un número IBAN válido en %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratos Árabes Unidos',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaiyán',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CI: 'Costa de Marfil',
                    CM: 'Camerún',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argelia',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FO: 'Islas Feroe',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croacia',
                    HU: 'Hungría',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Mónaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Malí',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauricio',
                    MZ: 'Mozambique',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Rumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Túnez',
                    TR: 'Turquía',
                    VG: 'Islas Vírgenes Británicas'
                }
            },
            id: {
                'default': 'Por favor ingrese un número de identificación válido',
                country: 'Por favor ingrese un número de identificación válido en %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    ZA: 'Sudáfrica'
                }
            },
            identical: {
                'default': 'Por favor ingrese el mismo valor'
            },
            imei: {
                'default': 'Por favor ingrese un número IMEI válido'
            },
            imo: {
                'default': 'Por favor ingrese un número IMO válido'
            },
            integer: {
                'default': 'Por favor ingrese un número válido'
            },
            ip: {
                'default': 'Por favor ingrese una dirección IP válida',
                ipv4: 'Por favor ingrese una dirección IPv4 válida',
                ipv6: 'Por favor ingrese una dirección IPv6 válida'
            },
            isbn: {
                'default': 'Por favor ingrese un número ISBN válido'
            },
            isin: {
                'default': 'Por favor ingrese un número ISIN válido'
            },
            ismn: {
                'default': 'Por favor ingrese un número ISMN válido'
            },
            issn: {
                'default': 'Por favor ingrese un número ISSN válido'
            },
            lessThan: {
                'default': 'Por favor ingrese un valor menor o igual a %s',
                notInclusive: 'Por favor ingrese un valor menor que %s'
            },
            mac: {
                'default': 'Por favor ingrese una dirección MAC válida'
            },
            meid: {
                'default': 'Por favor ingrese un número MEID válido'
            },
            notEmpty: {
                'default': 'Por favor ingrese un valor'
            },
            numeric: {
                'default': 'Por favor ingrese un número decimal válido'
            },
            phone: {
                'default': 'Por favor ingrese un número válido de teléfono',
                country: 'Por favor ingrese un número válido de teléfono en %s',
                countries: {
                    AE: 'Emiratos Árabes Unidos',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IN: 'India',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PK: 'Pakistán',
                    RO: 'Rumania',
                    RU: 'Rusa',
                    SK: 'Eslovaquia',
                    TH: 'Tailandia',
                    US: 'Estados Unidos',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Por favor ingrese un valor que coincida con el patrón'
            },
            remote: {
                'default': 'Por favor ingrese un valor válido'
            },
            rtn: {
                'default': 'Por favor ingrese un número RTN válido'
            },
            sedol: {
                'default': 'Por favor ingrese un número SEDOL válido'
            },
            siren: {
                'default': 'Por favor ingrese un número SIREN válido'
            },
            siret: {
                'default': 'Por favor ingrese un número SIRET válido'
            },
            step: {
                'default': 'Por favor ingrese un paso válido de %s'
            },
            stringCase: {
                'default': 'Por favor ingrese sólo caracteres en minúscula',
                upper: 'Por favor ingrese sólo caracteres en mayúscula'
            },
            stringLength: {
                'default': 'Por favor ingrese un valor con una longitud válida',
                less: 'Por favor ingrese menos de %s caracteres',
                more: 'Por favor ingrese más de %s caracteres',
                between: 'Por favor ingrese un valor con una longitud entre %s y %s caracteres'
            },
            uri: {
                'default': 'Por favor ingresese una URI válida'
            },
            uuid: {
                'default': 'Por favor ingrese un número UUID válido',
                version: 'Por favor ingrese una versión UUID válida para %s'
            },
            vat: {
                'default': 'Por favor ingrese un número VAT válido',
                country: 'Por favor ingrese un número VAT válido en %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Bélgica',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Hungría',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    VE: 'Venezuela',
                    ZA: 'Sudáfrica'
                }
            },
            vin: {
                'default': 'Por favor ingrese un número VIN válido'
            },
            zipCode: {
                'default': 'Por favor ingrese un código postal válido',
                country: 'Por favor ingrese un código postal válido en %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suiza',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusia',
                    SE: 'Suecia',
                    SG: 'Singapur',
                    SK: 'Eslovaquia',
                    US: 'Estados Unidos'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Spanish language package
     * Translated by @vadail
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'es_ES': {
            base64: {
                'default': 'Por favor introduce un valor válido en base 64'
            },
            between: {
                'default': 'Por favor introduce un valor entre %s y %s',
                notInclusive: 'Por favor introduce un valor sólo entre %s and %s'
            },
            bic: {
                'default': 'Por favor introduce un número BIC válido'
            },
            callback: {
                'default': 'Por favor introduce un valor válido'
            },
            choice: {
                'default': 'Por favor introduce un valor válido',
                less: 'Por favor elija %s opciones como mínimo',
                more: 'Por favor elija %s optiones como máximo',
                between: 'Por favor elija de %s a %s opciones'
            },
            color: {
                'default': 'Por favor introduce un color válido'
            },
            creditCard: {
                'default': 'Por favor introduce un número válido de tarjeta de crédito'
            },
            cusip: {
                'default': 'Por favor introduce un número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor introduce un número CVV válido'
            },
            date: {
                'default': 'Por favor introduce una fecha válida',
                min: 'Por favor introduce una fecha posterior al %s',
                max: 'Por favor introduce una fecha previa al %s',
                range: 'Por favor introduce una fecha entre el %s y el %s'
            },
            different: {
                'default': 'Por favor introduce un valor distinto'
            },
            digits: {
                'default': 'Por favor introduce sólo dígitos'
            },
            ean: {
                'default': 'Por favor introduce un número EAN válido'
            },
            ein: {
                'default': 'Por favor introduce un número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor introduce un email válido'
            },
            file: {
                'default': 'Por favor elija un archivo válido'
            },
            greaterThan: {
                'default': 'Por favor introduce un valor mayor o igual a %s',
                notInclusive: 'Por favor introduce un valor mayor que %s'
            },
            grid: {
                'default': 'Por favor introduce un número GRId válido'
            },
            hex: {
                'default': 'Por favor introduce un valor hexadecimal válido'
            },
            iban: {
                'default': 'Por favor introduce un número IBAN válido',
                country: 'Por favor introduce un número IBAN válido en %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratos Árabes Unidos',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaiyán',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benín',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CI: 'Costa de Marfil',
                    CM: 'Camerún',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argelia',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FO: 'Islas Feroe',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croacia',
                    HU: 'Hungría',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazajistán',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Mónaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Malí',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauricio',
                    MZ: 'Mozambique',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Rumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Túnez',
                    TR: 'Turquía',
                    VG: 'Islas Vírgenes Británicas'
                }
            },
            id: {
                'default': 'Por favor introduce un número de identificación válido',
                country: 'Por favor introduce un número válido de identificación en %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    ZA: 'Sudáfrica'
                }
            },
            identical: {
                'default': 'Por favor introduce el mismo valor'
            },
            imei: {
                'default': 'Por favor introduce un número IMEI válido'
            },
            imo: {
                'default': 'Por favor introduce un número IMO válido'
            },
            integer: {
                'default': 'Por favor introduce un número válido'
            },
            ip: {
                'default': 'Por favor introduce una dirección IP válida',
                ipv4: 'Por favor introduce una dirección IPv4 válida',
                ipv6: 'Por favor introduce una dirección IPv6 válida'
            },
            isbn: {
                'default': 'Por favor introduce un número ISBN válido'
            },
            isin: {
                'default': 'Por favor introduce un número ISIN válido'
            },
            ismn: {
                'default': 'Por favor introduce un número ISMN válido'
            },
            issn: {
                'default': 'Por favor introduce un número ISSN válido'
            },
            lessThan: {
                'default': 'Por favor introduce un valor menor o igual a %s',
                notInclusive: 'Por favor introduce un valor menor que %s'
            },
            mac: {
                'default': 'Por favor introduce una dirección MAC válida'
            },
            meid: {
                'default': 'Por favor introduce un número MEID válido'
            },
            notEmpty: {
                'default': 'Por favor introduce un valor'
            },
            numeric: {
                'default': 'Por favor introduce un número decimal válido'
            },
            phone: {
                'default': 'Por favor introduce un número válido de teléfono',
                country: 'Por favor introduce un número válido de teléfono en %s',
                countries: {
                    AE: 'Emiratos Árabes Unidos',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IN: 'India',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PK: 'Pakistán',
                    RO: 'Rumania',
                    RU: 'Rusa',
                    SK: 'Eslovaquia',
                    TH: 'Tailandia',
                    US: 'Estados Unidos',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Por favor introduce un valor que coincida con el patrón'
            },
            remote: {
                'default': 'Por favor introduce un valor válido'
            },
            rtn: {
                'default': 'Por favor introduce un número RTN válido'
            },
            sedol: {
                'default': 'Por favor introduce un número SEDOL válido'
            },
            siren: {
                'default': 'Por favor introduce un número SIREN válido'
            },
            siret: {
                'default': 'Por favor introduce un número SIRET válido'
            },
            step: {
                'default': 'Por favor introduce un paso válido de %s'
            },
            stringCase: {
                'default': 'Por favor introduce sólo caracteres en minúscula',
                upper: 'Por favor introduce sólo caracteres en mayúscula'
            },
            stringLength: {
                'default': 'Por favor introduce un valor con una longitud válida',
                less: 'Por favor introduce menos de %s caracteres',
                more: 'Por favor introduce más de %s caracteres',
                between: 'Por favor introduce un valor con una longitud entre %s y %s caracteres'
            },
            uri: {
                'default': 'Por favor introduce una URI válida'
            },
            uuid: {
                'default': 'Por favor introduce un número UUID válido',
                version: 'Por favor introduce una versión UUID válida para %s'
            },
            vat: {
                'default': 'Por favor introduce un número IVA válido',
                country: 'Por favor introduce un número IVA válido en %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Bélgica',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suiza',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    EE: 'Estonia',
                    ES: 'España',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Hungría',
                    HR: 'Croacia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Países Bajos',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovaquia',
                    VE: 'Venezuela',
                    ZA: 'Sudáfrica'
                }
            },
            vin: {
                'default': 'Por favor introduce un número VIN válido'
            },
            zipCode: {
                'default': 'Por favor introduce un código postal válido',
                country: 'Por favor introduce un código postal válido en %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suiza',
                    CZ: 'República Checa',
                    DE: 'Alemania',
                    DK: 'Dinamarca',
                    ES: 'España',
                    FR: 'Francia',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marruecos',
                    NL: 'Países Bajos',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Rumanía',
                    RU: 'Rusa',
                    SE: 'Suecia',
                    SG: 'Singapur',
                    SK: 'Eslovaquia',
                    US: 'Estados Unidos'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Basque language package
     * Translated by @xabikip
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'eu_ES': {
            base64: {
                'default': 'Mesedez sartu base 64an balore egoki bat'
            },
            between: {
                'default': 'Mesedez sartu %s eta %s artean balore bat',
                notInclusive: 'Mesedez sartu %s eta %s arteko balore bat soilik'
            },
            bic: {
                'default': 'Mesedez sartu BIC zenbaki egoki bat'
            },
            callback: {
                'default': 'Mesedez sartu balore egoki bat'
            },
            choice: {
                'default': 'Mesedez sartu balore egoki bat',
                less: 'Mesedez aukeraru %s aukera gutxienez',
                more: 'Mesedez aukeraru %s aukera gehienez',
                between: 'Mesedez aukeratu %s eta %s arteko aukerak'
            },
            color: {
                'default': 'Mesedezn sartu kolore egoki bat'
            },
            creditCard: {
                'default': 'Mesedez sartu kerditu-txartelaren zenbaki egoki bat'
            },
            cusip: {
                'default': 'Mesedez sartu CUSIP zenbaki egoki bat'
            },
            cvv: {
                'default': 'Mesedez sartu CVV zenbaki egoki bat'
            },
            date: {
                'default': 'Mesedez sartu data egoki bat',
                min: 'Mesedez sartu %s baino geroagoko data bat',
                max: 'Mesedez sartu %s baino lehenagoko data bat',
                range: 'Mesedez sartu %s eta %s arteko data bat'
            },
            different: {
                'default': 'Mesedez sartu balore ezberdin bat'
            },
            digits: {
                'default': 'Mesedez sigituak soilik sartu'
            },
            ean: {
                'default': 'Mesedez EAN zenbaki egoki bat sartu'
            },
            ein: {
                'default': 'Mesedez EIN zenbaki egoki bat sartu'
            },
            emailAddress: {
                'default': 'Mesedez e-posta egoki bat sartu'
            },
            file: {
                'default': 'Mesedez artxibo egoki bat aukeratu'
            },
            greaterThan: {
                'default': 'Mesedez %s baino handiagoa edo berdina den zenbaki bat sartu',
                notInclusive: 'Mesedez %s baino handiagoa den zenbaki bat sartu'
            },
            grid: {
                'default': 'Mesedez GRID zenbaki egoki bat sartu'
            },
            hex: {
                'default': 'Mesedez sartu balore hamaseitar egoki bat'
            },
            iban: {
                'default': 'Mesedez, sartu IBAN zenbaki egoki bat',
                country: 'Mesedez, sartu IBAN zenbaki egoki bat honako: %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Arabiar Emirerri Batuak',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia-Herzegovina',
                    BE: 'Belgika',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Baréin',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CI: 'Boli Kosta',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Cyprus',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    DO: 'Dominikar Errepublika',
                    DZ: 'Aljeria',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    FO: 'Feroe Irlak',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batua',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlandia',
                    GR: 'Grezia',
                    GT: 'Guatemala',
                    HR: 'Kroazia',
                    HU: 'Hungaria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Italia',
                    JO: 'Jordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MC: 'Monako',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Mazedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Maurizio',
                    MZ: 'Mozambike',
                    NL: 'Herbeherak',
                    NO: 'Norvegia',
                    PK: 'Pakistán',
                    PL: 'Poland',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Catar',
                    RO: 'Errumania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudi',
                    SE: 'Suedia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turkia',
                    VG: 'Birjina Uharte Britainiar'
                }
            },
            id: {
                'default': 'Mesedez baliozko identifikazio-zenbakia sartu',
                country: 'Mesedez baliozko identifikazio-zenbakia sartu honako: %s',
                countries: {
                    BA: 'Bosnia Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CL: 'Txile',
                    CN: 'Txina',
                    CZ: 'Txekiar Errepublika',
                    DK: 'Danimarka',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    HR: 'Kroazia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    LT: 'Lituania',
                    LV: 'Letonia',
                    ME: 'Montenegro',
                    MK: 'Mazedonia',
                    NL: 'Herbeherak',
                    PL: 'Poland',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suecia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    SM: 'San Marino',
                    TH: 'Tailandia',
                    ZA: 'Hegoafrika'
                }
            },
            identical: {
                'default': 'Mesedez, balio bera sartu'
            },
            imei: {
                'default': 'Mesedez, IMEI baliozko zenbaki bat sartu'
            },
            imo: {
                'default': 'Mesedez, IMO baliozko zenbaki bat sartu'
            },
            integer: {
                'default': 'Mesedez, baliozko zenbaki bat sartu'
            },
            ip: {
                'default': 'Mesedez, baliozko IP helbide bat sartu',
                ipv4: 'Mesedez, baliozko IPv4 helbide bat sartu',
                ipv6: 'Mesedez, baliozko IPv6 helbide bat sartu'
            },
            isbn: {
                'default': 'Mesedez, ISBN baliozko zenbaki bat sartu'
            },
            isin: {
                'default': 'Mesedez, ISIN baliozko zenbaki bat sartu'
            },
            ismn: {
                'default': 'Mesedez, ISMM baliozko zenbaki bat sartu'
            },
            issn: {
                'default': 'Mesedez, ISSN baliozko zenbaki bat sartu'
            },
            lessThan: {
                'default': 'Mesedez, %s en balio txikiagoa edo berdina sartu',
                notInclusive: 'Mesedez, %s baino balio txikiago sartu'
            },
            mac: {
                'default': 'Mesedez, baliozko MAC helbide bat sartu'
            },
            meid: {
                'default': 'Mesedez, MEID baliozko zenbaki bat sartu'
            },
            notEmpty: {
                'default': 'Mesedez balore bat sartu'
            },
            numeric: {
                'default': 'Mesedez, baliozko zenbaki hamartar bat sartu'
            },
            phone: {
                'default': 'Mesedez baliozko telefono zenbaki bat sartu',
                country: 'Mesedez baliozko telefono zenbaki bat sartu honako: %s',
                countries: {
                    AE: 'Arabiar Emirerri Batua',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'Txina',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    ES: 'Espainia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    IN: 'India',
                    MA: 'Maroko',
                    NL: 'Herbeherak',
                    PK: 'Pakistan',
                    RO: 'Errumania',
                    RU: 'Errusiarra',
                    SK: 'Eslovakia',
                    TH: 'Tailandia',
                    US: 'Estatu Batuak',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Mesedez, patroiarekin bat datorren balio bat sartu'
            },
            remote: {
                'default': 'Mesedez balore egoki bat sartu'
            },
            rtn: {
                'default': 'Mesedez, RTN baliozko zenbaki bat sartu'
            },
            sedol: {
                'default': 'Mesedez, SEDOL baliozko zenbaki bat sartu'
            },
            siren: {
                'default': 'Mesedez, SIREN baliozko zenbaki bat sartu'
            },
            siret: {
                'default': 'Mesedez, SIRET baliozko zenbaki bat sartu'
            },
            step: {
                'default': 'Mesedez %s -ko pausu egoki bat sartu'
            },
            stringCase: {
                'default': 'Mesedez, minuskulazko karaktereak bakarrik sartu',
                upper: 'Mesedez, maiuzkulazko karaktereak bakarrik sartu'
            },
            stringLength: {
                'default': 'Mesedez, luzeera egoki bateko baloreak bakarrik sartu',
                less: 'Mesedez, %s baino karaktere gutxiago sartu',
                more: 'Mesedez, %s baino karaktere gehiago sartu',
                between: 'Mesedez, %s eta %s arteko luzeera duen balore bat sartu'
            },
            uri: {
                'default': 'Mesedez, URI egoki bat sartu.'
            },
            uuid: {
                'default': 'Mesedez, UUID baliozko zenbaki bat sartu',
                version: 'Mesedez, UUID bertsio egoki bat sartu honendako: %s'
            },
            vat: {
                'default': 'Mesedez, BEZ zenbaki egoki bat sartu',
                country: 'Mesedez, BEZ zenbaki egoki bat sartu herrialde hontarako: %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgika',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Suitza',
                    CY: 'Txipre',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    EE: 'Estonia',
                    ES: 'Espainia',
                    FI: 'Finlandia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    GR: 'Grezia',
                    EL: 'Grezia',
                    HU: 'Hungaria',
                    HR: 'Kroazia',
                    IE: 'Irlanda',
                    IS: 'Islandia',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburgo',
                    LV: 'Letonia',
                    MT: 'Malta',
                    NL: 'Herbeherak',
                    NO: 'Noruega',
                    PL: 'Polonia',
                    PT: 'Portugal',
                    RO: 'Errumania',
                    RU: 'Errusia',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Eslovenia',
                    SK: 'Eslovakia',
                    VE: 'Venezuela',
                    ZA: 'Hegoafrika'
                }
            },
            vin: {
                'default': 'Mesedez, baliozko VIN zenbaki bat sartu'
            },
            zipCode: {
                'default': 'Mesedez, baliozko posta kode bat sartu',
                country: 'Mesedez, baliozko posta kode bat sartu herrialde honetarako: %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Kanada',
                    CH: 'Suitza',
                    CZ: 'Txekiar Errepublika',
                    DE: 'Alemania',
                    DK: 'Danimarka',
                    ES: 'Espainia',
                    FR: 'Frantzia',
                    GB: 'Erresuma Batuak',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroko',
                    NL: 'Herbeherak',
                    PL: 'Poland',
                    PT: 'Portugal',
                    RO: 'Errumania',
                    RU: 'Errusia',
                    SE: 'Suedia',
                    SG: 'Singapur',
                    SK: 'Eslovakia',
                    US: 'Estatu Batuak'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Persian (Farsi) Language package.
     * Translated by @i0
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fa_IR': {
            base64: {
                'default': 'لطفا متن کد گذاری شده base 64 صحیح وارد فرمایید'
            },
            between: {
                'default': 'لطفا یک مقدار بین %s و %s وارد فرمایید',
                notInclusive: 'لطفا یک مقدار بین فقط %s و %s وارد فرمایید'
            },
            bic: {
                'default': 'لطفا یک شماره BIC معتبر وارد فرمایید'
            },
            callback: {
                'default': 'لطفا یک مقدار صحیح وارد فرمایید'
            },
            choice: {
                'default': 'لطفا یک مقدار صحیح وارد فرمایید',
                less: 'لطفا حداقل %s گزینه را انتخاب فرمایید',
                more: 'لطفا حداکثر %s گزینه را انتخاب فرمایید',
                between: 'لطفا %s - %s گزینه انتخاب فرمایید'
            },
            color: {
                'default': 'لطفا رنگ صحیح وارد فرمایید'
            },
            creditCard: {
                'default': 'لطفا یک شماره کارت اعتباری معتبر وارد فرمایید'
            },
            cusip: {
                'default': 'لطفا یک شماره CUSIP معتبر وارد فرمایید'
            },
            cvv: {
                'default': 'لطفا یک شماره CVV معتبر وارد فرمایید'
            },
            date: {
                'default': 'لطفا یک تاریخ معتبر وارد فرمایید',
                min: 'لطفا یک تاریخ بعد از %s وارد فرمایید',
                max: 'لطفا یک تاریخ قبل از %s وارد فرمایید',
                range: 'لطفا یک تاریخ در بازه %s - %s وارد فرمایید'
            },
            different: {
                'default': 'لطفا یک مقدار متفاوت وارد فرمایید'
            },
            digits: {
                'default': 'لطفا فقط عدد وارد فرمایید'
            },
            ean: {
                'default': 'لطفا یک شماره EAN معتبر وارد فرمایید'
            },
            ein: {
                'default': 'لطفا یک شماره EIN معتبر وارد فرمایید'
            },
            emailAddress: {
                'default': 'لطفا آدرس ایمیل معتبر وارد فرمایید'
            },
            file: {
                'default': 'لطفا فایل معتبر انتخاب فرمایید'
            },
            greaterThan: {
                'default': 'لطفا مقدار بزرگتر یا مساوی با %s وارد فرمایید',
                notInclusive: 'لطفا مقدار بزرگتر از %s وارد فرمایید'
            },
            grid: {
                'default': 'لطفا شماره GRId معتبر وارد فرمایید'
            },
            hex: {
                'default': 'لطفا عدد هگزادسیمال صحیح وارد فرمایید'
            },
            iban: {
                'default': 'لطفا شماره IBAN معتبر وارد فرمایید',
                country: 'لطفا یک شماره IBAN صحیح در %s وارد فرمایید',
                countries: {
                    AD: 'آندورا',
                    AE: 'امارات متحده عربی',
                    AL: 'آلبانی',
                    AO: 'آنگولا',
                    AT: 'اتریش',
                    AZ: 'آذربایجان',
                    BA: 'بوسنی و هرزگوین',
                    BE: 'بلژیک',
                    BF: 'بورکینا فاسو',
                    BG: 'بلغارستان',
                    BH: 'بحرین',
                    BI: 'بروندی',
                    BJ: 'بنین',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CI: 'ساحل عاج',
                    CM: 'کامرون',
                    CR: 'کاستاریکا',
                    CV: 'کیپ ورد',
                    CY: 'قبرس',
                    CZ: 'جمهوری چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    DO: 'جمهوری دومینیکن',
                    DZ: 'الجزایر',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    FO: 'جزایر فارو',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    GE: 'گرجستان',
                    GI: 'جبل الطارق',
                    GL: 'گرینلند',
                    GR: 'یونان',
                    GT: 'گواتمالا',
                    HR: 'کرواسی',
                    HU: 'مجارستان',
                    IE: 'ایرلند',
                    IL: 'اسرائیل',
                    IR: 'ایران',
                    IS: 'ایسلند',
                    IT: 'ایتالیا',
                    JO: 'اردن',
                    KW: 'کویت',
                    KZ: 'قزاقستان',
                    LB: 'لبنان',
                    LI: 'لیختن اشتاین',
                    LT: 'لیتوانی',
                    LU: 'لوکزامبورگ',
                    LV: 'لتونی',
                    MC: 'موناکو',
                    MD: 'مولدووا',
                    ME: 'مونته نگرو',
                    MG: 'ماداگاسکار',
                    MK: 'مقدونیه',
                    ML: 'مالی',
                    MR: 'موریتانی',
                    MT: 'مالت',
                    MU: 'موریس',
                    MZ: 'موزامبیک',
                    NL: 'هلند',
                    NO: 'نروژ',
                    PK: 'پاکستان',
                    PL: 'لهستان',
                    PS: 'فلسطین',
                    PT: 'پرتغال',
                    QA: 'قطر',
                    RO: 'رومانی',
                    RS: 'صربستان',
                    SA: 'عربستان سعودی',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    SM: 'سان مارینو',
                    SN: 'سنگال',
                    TN: 'تونس',
                    TR: 'ترکیه',
                    VG: 'جزایر ویرجین، بریتانیا'
                }
            },
            id: {
                'default': 'لطفا شماره شناسایی صحیح وارد فرمایید',
                country: 'لطفا یک شماره شناسایی معتبر در %s وارد کنید',
                countries: {
                    BA: 'بوسنی و هرزگوین',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CL: 'شیلی',
                    CN: 'چین',
                    CZ: 'چک',
                    DK: 'دانمارک',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    HR: 'کرواسی',
                    IE: 'ایرلند',
                    IS: 'ایسلند',
                    LT: 'لیتوانی',
                    LV: 'لتونی',
                    ME: 'مونته نگرو',
                    MK: 'مقدونیه',
                    NL: 'هلند',
                    PL: 'لهستان',
                    RO: 'رومانی',
                    RS: 'صربی',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    SM: 'سان مارینو',
                    TH: 'تایلند',
                    ZA: 'آفریقای جنوبی'
                }
            },
            identical: {
                'default': 'لطفا مقدار یکسان وارد فرمایید'
            },
            imei: {
                'default': 'لطفا شماره IMEI معتبر وارد فرمایید'
            },
            imo: {
                'default': 'لطفا شماره IMO معتبر وارد فرمایید'
            },
            integer: {
                'default': 'لطفا یک عدد صحیح وارد فرمایید'
            },
            ip: {
                'default': 'لطفا یک آدرس IP معتبر وارد فرمایید',
                ipv4: 'لطفا یک آدرس IPv4 معتبر وارد فرمایید',
                ipv6: 'لطفا یک آدرس IPv6 معتبر وارد فرمایید'
            },
            isbn: {
                'default': 'لطفا شماره ISBN معتبر وارد فرمایید'
            },
            isin: {
                'default': 'لطفا شماره ISIN معتبر وارد فرمایید'
            },
            ismn: {
                'default': 'لطفا شماره ISMN معتبر وارد فرمایید'
            },
            issn: {
                'default': 'لطفا شماره ISSN معتبر وارد فرمایید'
            },
            lessThan: {
                'default': 'لطفا مقدار کمتر یا مساوی با %s وارد فرمایید',
                notInclusive: 'لطفا مقدار کمتر از %s وارد فرمایید'
            },
            mac: {
                'default': 'لطفا یک MAC address معتبر وارد فرمایید'
            },
            meid: {
                'default': 'لطفا یک شماره MEID معتبر وارد فرمایید'
            },
            notEmpty: {
                'default': 'لطفا یک مقدار وارد فرمایید'
            },
            numeric: {
                'default': 'لطفا یک عدد اعشاری صحیح وارد فرمایید'
            },
            phone: {
                'default': 'لطفا یک شماره تلفن صحیح وارد فرمایید',
                country: 'لطفا یک شماره تلفن معتبر وارد کنید در %s',
                countries: {
                    AE: 'امارات متحده عربی',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CN: 'کشور چین',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    ES: 'اسپانیا',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    IN: 'هندوستان',
                    MA: 'مراکش',
                    NL: 'هلند',
                    PK: 'پاکستان',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    SK: 'اسلواکی',
                    TH: 'تایلند',
                    US: 'ایالات متحده آمریکا',
                    VE: 'ونزوئلا'
                }
            },
            regexp: {
                'default': 'لطفا یک مقدار مطابق با الگو وارد فرمایید'
            },
            remote: {
                'default': 'لطفا یک مقدار معتبر وارد فرمایید'
            },
            rtn: {
                'default': 'لطفا یک شماره RTN صحیح وارد فرمایید'
            },
            sedol: {
                'default': 'لطفا یک شماره SEDOL صحیح وارد فرمایید'
            },
            siren: {
                'default': 'لطفا یک شماره SIREN صحیح وارد فرمایید'
            },
            siret: {
                'default': 'لطفا یک شماره SIRET صحیح وارد فرمایید'
            },
            step: {
                'default': 'لطفا یک گام صحیح از %s وارد فرمایید'
            },
            stringCase: {
                'default': 'لطفا فقط حروف کوچک وارد فرمایید',
                upper: 'لطفا فقط حروف بزرگ وارد فرمایید'
            },
            stringLength: {
                'default': 'لطفا یک مقدار با طول صحیح وارد فرمایید',
                less: 'لطفا کمتر از %s حرف وارد فرمایید',
                more: 'لطفا بیش از %s حرف وارد فرمایید',
                between: 'لطفا مقداری بین %s و %s حرف وارد فرمایید'
            },
            uri: {
                'default': 'لطفا یک آدرس URI صحیح وارد فرمایید'
            },
            uuid: {
                'default': 'لطفا یک شماره UUID معتبر وارد فرمایید',
                version: 'لطفا یک نسخه UUID صحیح %s شماره وارد فرمایید'
            },
            vat: {
                'default': 'لطفا یک شماره VAT صحیح وارد فرمایید',
                country: 'لطفا یک شماره VAT معتبر در %s وارد کنید',
                countries: {
                    AT: 'اتریش',
                    BE: 'بلژیک',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CH: 'سوئیس',
                    CY: 'قبرس',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    EE: 'استونی',
                    ES: 'اسپانیا',
                    FI: 'فنلاند',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    GR: 'یونان',
                    EL: 'یونان',
                    HU: 'مجارستان',
                    HR: 'کرواسی',
                    IE: 'ایرلند',
                    IS: 'ایسلند',
                    IT: 'ایتالیا',
                    LT: 'لیتوانی',
                    LU: 'لوکزامبورگ',
                    LV: 'لتونی',
                    MT: 'مالت',
                    NL: 'هلند',
                    NO: 'نروژ',
                    PL: 'لهستانی',
                    PT: 'پرتغال',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    RS: 'صربستان',
                    SE: 'سوئد',
                    SI: 'اسلوونی',
                    SK: 'اسلواکی',
                    VE: 'ونزوئلا',
                    ZA: 'آفریقای جنوبی'
                }
            },
            vin: {
                'default': 'لطفا یک شماره VIN صحیح وارد فرمایید'
            },
            zipCode: {
                'default': 'لطفا یک کدپستی صحیح وارد فرمایید',
                country: 'لطفا یک کد پستی معتبر در %s وارد کنید',
                countries: {
                    AT: 'اتریش',
                    BG: 'بلغارستان',
                    BR: 'برزیل',
                    CA: 'کانادا',
                    CH: 'سوئیس',
                    CZ: 'چک',
                    DE: 'آلمان',
                    DK: 'دانمارک',
                    ES: 'اسپانیا',
                    FR: 'فرانسه',
                    GB: 'بریتانیا',
                    IE: 'ایرلند',
                    IN: 'هندوستان',
                    IT: 'ایتالیا',
                    MA: 'مراکش',
                    NL: 'هلند',
                    PL: 'لهستان',
                    PT: 'پرتغال',
                    RO: 'رومانی',
                    RU: 'روسیه',
                    SE: 'سوئد',
                    SG: 'سنگاپور',
                    SK: 'اسلواکی',
                    US: 'ایالات متحده'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Finnish language package
     * Translated by @traone
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fi_FI': {
            base64: {
                'default': 'Ole hyvä anna kelvollinen base64 koodattu merkkijono'
            },
            between: {
                'default': 'Ole hyvä anna arvo %s ja %s väliltä',
                notInclusive: 'Ole hyvä anna arvo %s ja %s väliltä'
            },
            bic: {
                'default': 'Ole hyvä anna kelvollinen BIC numero'
            },
            callback: {
                'default': 'Ole hyvä anna kelvollinen arvo'
            },
            choice: {
                'default': 'Ole hyvä anna kelvollinen arvo',
                less: 'Ole hyvä valitse vähintään %s valintaa',
                more: 'Ole hyvä valitse enintään %s valintaa',
                between: 'Ole hyvä valitse %s - %s valintaa'
            },
            color: {
                'default': 'Ole hyvä anna kelvollinen väriarvo'
            },
            creditCard: {
                'default': 'Ole hyvä anna kelvollinen luottokortin numero'
            },
            cusip: {
                'default': 'Ole hyvä anna kelvollinen CUSIP numero'
            },
            cvv: {
                'default': 'Ole hyvä anna kelvollinen CVV numero'
            },
            date: {
                'default': 'Ole hyvä anna kelvollinen päiväys',
                min: 'Ole hyvä anna %s jälkeinen päiväys',
                max: 'Ole hyvä anna %s edeltävä päiväys',
                range: 'Ole hyvä anna päiväys %s - %s väliltä'
            },
            different: {
                'default': 'Ole hyvä anna jokin toinen arvo'
            },
            digits: {
                'default': 'Vain numerot sallittuja'
            },
            ean: {
                'default': 'Ole hyvä anna kelvollinen EAN numero'
            },
            ein: {
                'default': 'Ole hyvä anna kelvollinen EIN numero'
            },
            emailAddress: {
                'default': 'Ole hyvä anna kelvollinen sähköpostiosoite'
            },
            file: {
                'default': 'Ole hyvä valitse kelvollinen tiedosto'
            },
            greaterThan: {
                'default': 'Ole hyvä anna arvoksi yhtä suuri kuin, tai suurempi kuin %s',
                notInclusive: 'Ole hyvä anna arvoksi suurempi kuin %s'
            },
            grid: {
                'default': 'Ole hyvä anna kelvollinen GRId numero'
            },
            hex: {
                'default': 'Ole hyvä anna kelvollinen heksadesimaali luku'
            },
            iban: {
                'default': 'Ole hyvä anna kelvollinen IBAN numero',
                country: 'Ole hyvä anna kelvollinen IBAN numero maassa %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Yhdistyneet arabiemiirikunnat',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Itävalta',
                    AZ: 'Azerbaidžan',
                    BA: 'Bosnia ja Hertsegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CI: 'Norsunluurannikko',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Kypros',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    DO: 'Dominikaaninen tasavalta',
                    DZ: 'Algeria',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    FO: 'Färsaaret',
                    FR: 'Ranska',
                    GB: 'Yhdistynyt kuningaskunta',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Grönlanti',
                    GR: 'Kreikka',
                    GT: 'Guatemala',
                    HR: 'Kroatia',
                    HU: 'Unkari',
                    IE: 'Irlanti',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islanti',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Liettua',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Makedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Hollanti',
                    NO: 'Norja',
                    PK: 'Pakistan',
                    PL: 'Puola',
                    PS: 'Palestiina',
                    PT: 'Portugali',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turkki',
                    VG: 'Neitsytsaaret, Brittien'
                }
            },
            id: {
                'default': 'Ole hyvä anna kelvollinen henkilötunnus',
                country: 'Ole hyvä anna kelvollinen henkilötunnus maassa %s',
                countries: {
                    BA: 'Bosnia ja Hertsegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CL: 'Chile',
                    CN: 'Kiina',
                    CZ: 'Tsekin tasavalta',
                    DK: 'Tanska',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    HR: 'Kroatia',
                    IE: 'Irlanti',
                    IS: 'Islanti',
                    LT: 'Liettua',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Makedonia',
                    NL: 'Hollanti',
                    PL: 'Puola',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thaimaa',
                    ZA: 'Etelä Afrikka'
                }
            },
            identical: {
                'default': 'Ole hyvä anna sama arvo'
            },
            imei: {
                'default': 'Ole hyvä anna kelvollinen IMEI numero'
            },
            imo: {
                'default': 'Ole hyvä anna kelvollinen IMO numero'
            },
            integer: {
                'default': 'Ole hyvä anna kelvollinen kokonaisluku'
            },
            ip: {
                'default': 'Ole hyvä anna kelvollinen IP osoite',
                ipv4: 'Ole hyvä anna kelvollinen IPv4 osoite',
                ipv6: 'Ole hyvä anna kelvollinen IPv6 osoite'
            },
            isbn: {
                'default': 'Ole hyvä anna kelvollinen ISBN numero'
            },
            isin: {
                'default': 'Ole hyvä anna kelvollinen ISIN numero'
            },
            ismn: {
                'default': 'Ole hyvä anna kelvollinen ISMN numero'
            },
            issn: {
                'default': 'Ole hyvä anna kelvollinen ISSN numero'
            },
            lessThan: {
                'default': 'Ole hyvä anna arvo joka on vähemmän kuin tai yhtä suuri kuin %s',
                notInclusive: 'Ole hyvä anna arvo joka on vähemmän kuin %s'
            },
            mac: {
                'default': 'Ole hyvä anna kelvollinen MAC osoite'
            },
            meid: {
                'default': 'Ole hyvä anna kelvollinen MEID numero'
            },
            notEmpty: {
                'default': 'Pakollinen kenttä, anna jokin arvo'
            },
            numeric: {
                'default': 'Ole hyvä anna kelvollinen liukuluku'
            },
            phone: {
                'default': 'Ole hyvä anna kelvollinen puhelinnumero',
                country: 'Ole hyvä anna kelvollinen puhelinnumero maassa %s',
                countries: {
                    AE: 'Yhdistyneet arabiemiirikunnat',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CN: 'Kiina',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    ES: 'Espanja',
                    FR: 'Ranska',
                    GB: 'Yhdistynyt kuningaskunta',
                    IN: 'Intia',
                    MA: 'Marokko',
                    NL: 'Hollanti',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    SK: 'Slovakia',
                    TH: 'Thaimaa',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Ole hyvä anna kaavan mukainen arvo'
            },
            remote: {
                'default': 'Ole hyvä anna kelvollinen arvo'
            },
            rtn: {
                'default': 'Ole hyvä anna kelvollinen RTN numero'
            },
            sedol: {
                'default': 'Ole hyvä anna kelvollinen SEDOL numero'
            },
            siren: {
                'default': 'Ole hyvä anna kelvollinen SIREN numero'
            },
            siret: {
                'default': 'Ole hyvä anna kelvollinen SIRET numero'
            },
            step: {
                'default': 'Ole hyvä anna kelvollinen arvo %s porrastettuna'
            },
            stringCase: {
                'default': 'Ole hyvä anna pelkästään pieniä kirjaimia',
                upper: 'Ole hyvä anna pelkästään isoja kirjaimia'
            },
            stringLength: {
                'default': 'Ole hyvä anna kelvollisen mittainen merkkijono',
                less: 'Ole hyvä anna vähemmän kuin %s merkkiä',
                more: 'Ole hyvä anna vähintään %s merkkiä',
                between: 'Ole hyvä anna arvo joka on vähintään %s ja enintään %s merkkiä pitkä'
            },
            uri: {
                'default': 'Ole hyvä anna kelvollinen URI'
            },
            uuid: {
                'default': 'Ole hyvä anna kelvollinen UUID numero',
                version: 'Ole hyvä anna kelvollinen UUID versio %s numero'
            },
            vat: {
                'default': 'Ole hyvä anna kelvollinen VAT numero',
                country: 'Ole hyvä anna kelvollinen VAT numero maahan: %s',
                countries: {
                    AT: 'Itävalta',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CH: 'Sveitsi',
                    CY: 'Kypros',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    EE: 'Viro',
                    ES: 'Espanja',
                    FI: 'Suomi',
                    FR: 'Ranska',
                    GB: 'Yhdistyneet kuningaskunnat',
                    GR: 'Kreikka',
                    EL: 'Kreikka',
                    HU: 'Unkari',
                    HR: 'Kroatia',
                    IE: 'Irlanti',
                    IS: 'Islanti',
                    IT: 'Italia',
                    LT: 'Liettua',
                    LU: 'Luxemburg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Hollanti',
                    NO: 'Norja',
                    PL: 'Puola',
                    PT: 'Portugali',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    RS: 'Serbia',
                    SE: 'Ruotsi',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Etelä Afrikka'
                }
            },
            vin: {
                'default': 'Ole hyvä anna kelvollinen VIN numero'
            },
            zipCode: {
                'default': 'Ole hyvä anna kelvollinen postinumero',
                country: 'Ole hyvä anna kelvollinen postinumero maassa: %s',
                countries: {
                    AT: 'Itävalta',
                    BG: 'Bulgaria',
                    BR: 'Brasilia',
                    CA: 'Kanada',
                    CH: 'Sveitsi',
                    CZ: 'Tsekin tasavalta',
                    DE: 'Saksa',
                    DK: 'Tanska',
                    ES: 'Espanja',
                    FR: 'Ranska',
                    GB: 'Yhdistyneet kuningaskunnat',
                    IE: 'Irlanti',
                    IN: 'Intia',
                    IT: 'Italia',
                    MA: 'Marokko',
                    NL: 'Hollanti',
                    PL: 'Puola',
                    PT: 'Portugali',
                    RO: 'Romania',
                    RU: 'Venäjä',
                    SE: 'Ruotsi',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * French language package
     * Translated by @dlucazeau. Updated by @neilime, @jazzzz
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'fr_FR': {
            base64: {
                'default': 'Veuillez fournir une donnée correctement encodée en Base64'
            },
            between: {
                'default': 'Veuillez fournir une valeur comprise entre %s et %s',
                notInclusive: 'Veuillez fournir une valeur strictement comprise entre %s et %s'
            },
            bic: {
                'default': 'Veuillez fournir un code-barre BIC valide'
            },
            callback: {
                'default': 'Veuillez fournir une valeur valide'
            },
            choice: {
                'default': 'Veuillez fournir une valeur valide',
                less: 'Veuillez choisir au minimum %s options',
                more: 'Veuillez choisir au maximum %s options',
                between: 'Veuillez choisir de %s à %s options'
            },
            color: {
                'default': 'Veuillez fournir une couleur valide'
            },
            creditCard: {
                'default': 'Veuillez fournir un numéro de carte de crédit valide'
            },
            cusip: {
                'default': 'Veuillez fournir un code CUSIP valide'
            },
            cvv: {
                'default': 'Veuillez fournir un code CVV valide'
            },
            date: {
                'default': 'Veuillez fournir une date valide',
                'min': 'Veuillez fournir une date supérieure à %s',
                'max': 'Veuillez fournir une date inférieure à %s',
                'range': 'Veuillez fournir une date comprise entre %s et %s'
            },
            different: {
                'default': 'Veuillez fournir une valeur différente'
            },
            digits: {
                'default': 'Veuillez ne fournir que des chiffres'
            },
            ean: {
                'default': 'Veuillez fournir un code-barre EAN valide'
            },
            ein: {
                'default': 'Veuillez fournir un code-barre EIN valide'
            },
            emailAddress: {
                'default': 'Veuillez fournir une adresse e-mail valide'
            },
            file: {
                'default': 'Veuillez choisir un fichier valide'
            },
            greaterThan: {
                'default': 'Veuillez fournir une valeur supérieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur supérieure à %s'
            },
            grid: {
                'default': 'Veuillez fournir un code GRId valide'
            },
            hex: {
                'default': 'Veuillez fournir un nombre hexadécimal valide'
            },
            iban: {
                'default': 'Veuillez fournir un code IBAN valide',
                country: 'Veuillez fournir un code IBAN valide pour %s',
                countries: {
                    AD: 'Andorre',
                    AE: 'Émirats Arabes Unis',
                    AL: 'Albanie',
                    AO: 'Angola',
                    AT: 'Autriche',
                    AZ: 'Azerbaïdjan',
                    BA: 'Bosnie-Herzégovine',
                    BE: 'Belgique',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarie',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Bénin',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CI: 'Côte d\'ivoire',
                    CM: 'Cameroun',
                    CR: 'Costa Rica',
                    CV: 'Cap Vert',
                    CY: 'Chypre',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    DO: 'République Dominicaine',
                    DZ: 'Algérie',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FO: 'Îles Féroé',
                    FR: 'France',
                    GB: 'Royaume Uni',
                    GE: 'Géorgie',
                    GI: 'Gibraltar',
                    GL: 'Groënland',
                    GR: 'Gréce',
                    GT: 'Guatemala',
                    HR: 'Croatie',
                    HU: 'Hongrie',
                    IE: 'Irlande',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'Islande',
                    IT: 'Italie',
                    JO: 'Jordanie',
                    KW: 'Koweït',
                    KZ: 'Kazakhstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Lithuanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MC: 'Monaco',
                    MD: 'Moldavie',
                    ME: 'Monténégro',
                    MG: 'Madagascar',
                    MK: 'Macédoine',
                    ML: 'Mali',
                    MR: 'Mauritanie',
                    MT: 'Malte',
                    MU: 'Maurice',
                    MZ: 'Mozambique',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PK: 'Pakistan',
                    PL: 'Pologne',
                    PS: 'Palestine',
                    PT: 'Portugal',
                    QA: 'Quatar',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SA: 'Arabie Saoudite',
                    SE: 'Suède',
                    SI: 'Slovènie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    SN: 'Sénégal',
                    TN: 'Tunisie',
                    TR: 'Turquie',
                    VG: 'Îles Vierges britanniques'
                }
            },
            id: {
                'default': 'Veuillez fournir un numéro d\'identification valide',
                country: 'Veuillez fournir un numéro d\'identification valide pour %s',
                countries: {
                    BA: 'Bosnie-Herzégovine',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CL: 'Chili',
                    CN: 'Chine',
                    CZ: 'République Tchèque',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    LT: 'Lituanie',
                    LV: 'Lettonie',
                    ME: 'Monténégro',
                    MK: 'Macédoine',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    RO: 'Roumanie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    SM: 'Saint-Marin',
                    TH: 'Thaïlande',
                    ZA: 'Afrique du Sud'
                }
            },
            identical: {
                'default': 'Veuillez fournir la même valeur'
            },
            imei: {
                'default': 'Veuillez fournir un code IMEI valide'
            },
            imo: {
                'default': 'Veuillez fournir un code IMO valide'
            },
            integer: {
                'default': 'Veuillez fournir un nombre valide'
            },
            ip: {
                'default': 'Veuillez fournir une adresse IP valide',
                ipv4: 'Veuillez fournir une adresse IPv4 valide',
                ipv6: 'Veuillez fournir une adresse IPv6 valide'
            },
            isbn: {
                'default': 'Veuillez fournir un code ISBN valide'
            },
            isin: {
                'default': 'Veuillez fournir un code ISIN valide'
            },
            ismn: {
                'default': 'Veuillez fournir un code ISMN valide'
            },
            issn: {
                'default': 'Veuillez fournir un code ISSN valide'
            },
            lessThan: {
                'default': 'Veuillez fournir une valeur inférieure ou égale à %s',
                notInclusive: 'Veuillez fournir une valeur inférieure à %s'
            },
            mac: {
                'default': 'Veuillez fournir une adresse MAC valide'
            },
            meid: {
                'default': 'Veuillez fournir un code MEID valide'
            },
            notEmpty: {
                'default': 'Veuillez fournir une valeur'
            },
            numeric: {
                'default': 'Veuillez fournir une valeur décimale valide'
            },
            phone: {
                'default': 'Veuillez fournir un numéro de téléphone valide',
                country: 'Veuillez fournir un numéro de téléphone valide pour %s',
                countries: {
                    AE: 'Émirats Arabes Unis',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CN: 'Chine',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IN: 'Inde',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PK: 'Pakistan',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SK: 'Slovaquie',
                    TH: 'Thaïlande',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Veuillez fournir une valeur correspondant au modèle'
            },
            remote: {
                'default': 'Veuillez fournir une valeur valide'
            },
            rtn: {
                'default': 'Veuillez fournir un code RTN valide'
            },
            sedol: {
                'default': 'Veuillez fournir a valid SEDOL number'
            },
            siren: {
                'default': 'Veuillez fournir un numéro SIREN valide'
            },
            siret: {
                'default': 'Veuillez fournir un numéro SIRET valide'
            },
            step: {
                'default': 'Veuillez fournir un écart valide de %s'
            },
            stringCase: {
                'default': 'Veuillez ne fournir que des caractères minuscules',
                upper: 'Veuillez ne fournir que des caractères majuscules'
            },
            stringLength: {
                'default': 'Veuillez fournir une valeur de longueur valide',
                less: 'Veuillez fournir moins de %s caractères',
                more: 'Veuillez fournir plus de %s caractères',
                between: 'Veuillez fournir entre %s et %s caractères'
            },
            uri: {
                'default': 'Veuillez fournir un URI valide'
            },
            uuid: {
                'default': 'Veuillez fournir un UUID valide',
                version: 'Veuillez fournir un UUID version %s number'
            },
            vat: {
                'default': 'Veuillez fournir un code VAT valide',
                country: 'Veuillez fournir un code VAT valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BE: 'Belgique',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CH: 'Suisse',
                    CY: 'Chypre',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    EE: 'Estonie',
                    ES: 'Espagne',
                    FI: 'Finlande',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    GR: 'Grèce',
                    EL: 'Grèce',
                    HU: 'Hongrie',
                    HR: 'Croatie',
                    IE: 'Irlande',
                    IS: 'Islande',
                    IT: 'Italie',
                    LT: 'Lituanie',
                    LU: 'Luxembourg',
                    LV: 'Lettonie',
                    MT: 'Malte',
                    NL: 'Pays-Bas',
                    NO: 'Norvège',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    RS: 'Serbie',
                    SE: 'Suède',
                    SI: 'Slovénie',
                    SK: 'Slovaquie',
                    VE: 'Venezuela',
                    ZA: 'Afrique du Sud'
                }
            },
            vin: {
                'default': 'Veuillez fournir un code VIN valide'
            },
            zipCode: {
                'default': 'Veuillez fournir un code postal valide',
                country: 'Veuillez fournir un code postal valide pour %s',
                countries: {
                    AT: 'Autriche',
                    BG: 'Bulgarie',
                    BR: 'Brésil',
                    CA: 'Canada',
                    CH: 'Suisse',
                    CZ: 'République Tchèque',
                    DE: 'Allemagne',
                    DK: 'Danemark',
                    ES: 'Espagne',
                    FR: 'France',
                    GB: 'Royaume-Uni',
                    IE: 'Irlande',
                    IN: 'Inde',
                    IT: 'Italie',
                    MA: 'Maroc',
                    NL: 'Pays-Bas',
                    PL: 'Pologne',
                    PT: 'Portugal',
                    RO: 'Roumanie',
                    RU: 'Russie',
                    SE: 'Suède',
                    SG: 'Singapour',
                    SK: 'Slovaquie',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Greek language package
     * Translated by @pRieStaKos
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'gr_EL': {
            base64: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη κωδικοποίηση base 64'
            },
            between: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μεταξύ %s και %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μεταξύ %s και %s αυστηρά'
            },
            bic: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό BIC'
            },
            callback: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη τιμή'
            },
            choice: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη τιμή',
                less: 'Παρακαλώ επιλέξτε %s επιλογές στο ελάχιστο',
                more: 'Παρακαλώ επιλέξτε %s επιλογές στο μέγιστο',
                between: 'Παρακαλώ επιλέξτε %s - %s επιλογές'
            },
            color: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο χρώμα'
            },
            creditCard: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό πιστωτικής κάρτας'
            },
            cusip: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό CUSIP'
            },
            cvv: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό CVV'
            },
            date: {
                'default': 'Παρακαλώ εισάγετε μια έγκυρη ημερομηνία',
                min: 'Παρακαλώ εισάγετε ημερομηνία μετά από %s',
                max: 'Παρακαλώ εισάγετε ημερομηνία πριν από %s',
                range: 'Παρακαλώ εισάγετε ημερομηνία μεταξύ %s - %s'
            },
            different: {
                'default': 'Παρακαλώ εισάγετε μια διαφορετική τιμή'
            },
            digits: {
                'default': 'Παρακαλώ εισάγετε μόνο ψηφία'
            },
            ean: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό EAN'
            },
            ein: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό EIN'
            },
            emailAddress: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο email'
            },
            file: {
                'default': 'Παρακαλώ επιλέξτε ένα έγκυρο αρχείο'
            },
            greaterThan: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μεγαλύτερη ή ίση με %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μεγαλύτερη από %s'
            },
            grid: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό GRId'
            },
            hex: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο δεκαεξαδικό αριθμό'
            },
            iban: {
                'default': 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό IBAN',
                country: 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό IBAN στην %s',
                countries: {
                    AD: 'Ανδόρα',
                    AE: 'Ηνωμένα Αραβικά Εμιράτα',
                    AL: 'Αλβανία',
                    AO: 'Αγκόλα',
                    AT: 'Αυστρία',
                    AZ: 'Αζερμπαϊτζάν',
                    BA: 'Βοσνία και Ερζεγοβίνη',
                    BE: 'Βέλγιο',
                    BF: 'Μπουρκίνα Φάσο',
                    BG: 'Βουλγαρία',
                    BH: 'Μπαχρέιν',
                    BI: 'Μπουρούντι',
                    BJ: 'Μπενίν',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CI: 'Ακτή Ελεφαντοστού',
                    CM: 'Καμερούν',
                    CR: 'Κόστα Ρίκα',
                    CV: 'Cape Verde',
                    CY: 'Κύπρος',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    DO: 'Δομινικανή Δημοκρατία',
                    DZ: 'Αλγερία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    FO: 'Νησιά Φερόε',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    GE: 'Γεωργία',
                    GI: 'Γιβραλτάρ',
                    GL: 'Γροιλανδία',
                    GR: 'Ελλάδα',
                    GT: 'Γουατεμάλα',
                    HR: 'Κροατία',
                    HU: 'Ουγγαρία',
                    IE: 'Ιρλανδία',
                    IL: 'Ισραήλ',
                    IR: 'Ιράν',
                    IS: 'Ισλανδία',
                    IT: 'Ιταλία',
                    JO: 'Ιορδανία',
                    KW: 'Κουβέιτ',
                    KZ: 'Καζακστάν',
                    LB: 'Λίβανος',
                    LI: 'Λιχτενστάιν',
                    LT: 'Λιθουανία',
                    LU: 'Λουξεμβούργο',
                    LV: 'Λετονία',
                    MC: 'Μονακό',
                    MD: 'Μολδαβία',
                    ME: 'Μαυροβούνιο',
                    MG: 'Μαδαγασκάρη',
                    MK: 'πΓΔΜ',
                    ML: 'Μάλι',
                    MR: 'Μαυριτανία',
                    MT: 'Μάλτα',
                    MU: 'Μαυρίκιος',
                    MZ: 'Μοζαμβίκη',
                    NL: 'Ολλανδία',
                    NO: 'Νορβηγία',
                    PK: 'Πακιστάν',
                    PL: 'Πολωνία',
                    PS: 'Παλαιστίνη',
                    PT: 'Πορτογαλία',
                    QA: 'Κατάρ',
                    RO: 'Ρουμανία',
                    RS: 'Σερβία',
                    SA: 'Σαουδική Αραβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    SM: 'Σαν Μαρίνο',
                    SN: 'Σενεγάλη',
                    TN: 'Τυνησία',
                    TR: 'Τουρκία',
                    VG: 'Βρετανικές Παρθένοι Νήσοι'
                }
            },
            id: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ταυτότητας',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ταυτότητας στην %s',
                countries: {
                    BA: 'Βοσνία και Ερζεγοβίνη',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CL: 'Χιλή',
                    CN: 'Κίνα',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DK: 'Δανία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    HR: 'Κροατία',
                    IE: 'Ιρλανδία',
                    IS: 'Ισλανδία',
                    LT: 'Λιθουανία',
                    LV: 'Λετονία',
                    ME: 'Μαυροβούνιο',
                    MK: 'Μακεδονία',
                    NL: 'Ολλανδία',
                    PL: 'Πολωνία',
                    RO: 'Ρουμανία',
                    RS: 'Σερβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    SM: 'Σαν Μαρίνο',
                    TH: 'Ταϊλάνδη',
                    ZA: 'Νότια Αφρική'
                }
            },
            identical: {
                'default': 'Παρακαλώ εισάγετε την ίδια τιμή'
            },
            imei: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό IMEI'
            },
            imo: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό IMO'
            },
            integer: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό'
            },
            ip: {
                'default': 'Παρακαλώ εισάγετε μία έγκυρη IP διεύθυνση',
                ipv4: 'Παρακαλώ εισάγετε μία έγκυρη διεύθυνση IPv4',
                ipv6: 'Παρακαλώ εισάγετε μία έγκυρη διεύθυνση IPv6'
            },
            isbn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISBN'
            },
            isin: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISIN'
            },
            ismn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISMN'
            },
            issn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ISSN'
            },
            lessThan: {
                'default': 'Παρακαλώ εισάγετε μια τιμή μικρότερη ή ίση με %s',
                notInclusive: 'Παρακαλώ εισάγετε μια τιμή μικρότερη από %s'
            },
            mac: {
                'default': 'Παρακαλώ εισάγετε μία έγκυρη MAC διεύθυνση'
            },
            meid: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό MEID'
            },
            notEmpty: {
                'default': 'Παρακαλώ εισάγετε μια τιμή'
            },
            numeric: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο δεκαδικό αριθμό'
            },
            phone: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό τηλεφώνου',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό τηλεφώνου στην %s',
                countries: {
                    AE: 'Ηνωμένα Αραβικά Εμιράτα',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CN: 'Κίνα',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    ES: 'Ισπανία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    IN: 'Ινδία',
                    MA: 'Μαρόκο',
                    NL: 'Ολλανδία',
                    PK: 'Πακιστάν',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    SK: 'Σλοβακία',
                    TH: 'Ταϊλάνδη',
                    US: 'ΗΠΑ',
                    VE: 'Βενεζουέλα'
                }
            },
            regexp: {
                'default': 'Παρακαλώ εισάγετε μια τιμή όπου ταιριάζει στο υπόδειγμα'
            },
            remote: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό'
            },
            rtn: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό RTN'
            },
            sedol: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SEDOL'
            },
            siren: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SIREN'
            },
            siret: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό SIRET'
            },
            step: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο βήμα από %s'
            },
            stringCase: {
                'default': 'Παρακαλώ εισάγετε μόνο πεζούς χαρακτήρες',
                upper: 'Παρακαλώ εισάγετε μόνο κεφαλαία γράμματα'
            },
            stringLength: {
                'default': 'Παρακαλώ εισάγετε μια τιμή με έγκυρο μήκος',
                less: 'Παρακαλούμε εισάγετε λιγότερο από %s χαρακτήρες',
                more: 'Παρακαλούμε εισάγετε περισσότερο από %s χαρακτήρες',
                between: 'Παρακαλούμε, εισάγετε τιμή μεταξύ %s και %s μήκος χαρακτήρων'
            },
            uri: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο URI'
            },
            uuid: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό UUID',
                version: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό έκδοσης %s'
            },
            vat: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ΦΠΑ',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό ΦΠΑ στην %s',
                countries: {
                    AT: 'Αυστρία',
                    BE: 'Βέλγιο',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CH: 'Ελβετία',
                    CY: 'Κύπρος',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    EE: 'Εσθονία',
                    ES: 'Ισπανία',
                    FI: 'Φινλανδία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    GR: 'Ελλάδα',
                    EL: 'Ελλάδα',
                    HU: 'Ουγγαρία',
                    HR: 'Κροατία',
                    IE: 'Ιρλανδία',
                    IS: 'Ισλανδία',
                    IT: 'Ιταλία',
                    LT: 'Λιθουανία',
                    LU: 'Λουξεμβούργο',
                    LV: 'Λετονία',
                    MT: 'Μάλτα',
                    NL: 'Ολλανδία',
                    NO: 'Νορβηγία',
                    PL: 'Πολωνία',
                    PT: 'Πορτογαλία',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    RS: 'Σερβία',
                    SE: 'Σουηδία',
                    SI: 'Σλοβενία',
                    SK: 'Σλοβακία',
                    VE: 'Βενεζουέλα',
                    ZA: 'Νότια Αφρική'
                }
            },
            vin: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο αριθμό VIN'
            },
            zipCode: {
                'default': 'Παρακαλώ εισάγετε ένα έγκυρο ταχυδρομικό κώδικα',
                country: 'Παρακαλώ εισάγετε ένα έγκυρο ταχυδρομικό κώδικα στην %s',
                countries: {
                    AT: 'Αυστρία',
                    BG: 'Βουλγαρία',
                    BR: 'Βραζιλία',
                    CA: 'Καναδάς',
                    CH: 'Ελβετία',
                    CZ: 'Δημοκρατία της Τσεχίας',
                    DE: 'Γερμανία',
                    DK: 'Δανία',
                    ES: 'Ισπανία',
                    FR: 'Γαλλία',
                    GB: 'Ηνωμένο Βασίλειο',
                    IE: 'Ιρλανδία',
                    IN: 'Ινδία',
                    IT: 'Ιταλία',
                    MA: 'Μαρόκο',
                    NL: 'Ολλανδία',
                    PL: 'Πολωνία',
                    PT: 'Πορτογαλία',
                    RO: 'Ρουμανία',
                    RU: 'Ρωσία',
                    SE: 'Σουηδία',
                    SG: 'Σιγκαπούρη',
                    SK: 'Σλοβακία',
                    US: 'ΗΠΑ'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Hebrew language package
     * Translated by @yakidahan
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'he_IL': {
            base64: {
                'default': 'נא להזין ערך המקודד בבסיס 64'
            },
            between: {
                'default': 'נא להזין ערך בין %s ל-%s',
                notInclusive: 'נא להזין ערך בין %s ל-%s בדיוק'
            },
            bic: {
                'default': 'נא להזין מספר BIC תקין'
            },
            callback: {
                'default': 'נא להזין ערך תקין'
            },
            choice: {
                'default': 'נא להזין ערך תקין',
                less: 'נא לבחור מינימום %s אפשרויות',
                more: 'נא לבחור מקסימום %s אפשרויות',
                between: 'נא לבחור  %s-%s אפשרויות'
            },
            color: {
                'default': 'נא להזין קוד צבע תקין'
            },
            creditCard: {
                'default': 'נא להזין מספר כרטיס אשראי תקין'
            },
            cusip: {
                'default': 'נא להזין מספר CUSIP תקין'
            },
            cvv: {
                'default': 'נא להזין מספר CVV תקין'
            },
            date: {
                'default': 'נא להזין תאריך תקין',
                min: 'נא להזין תאריך אחרי %s',
                max: 'נא להזין תאריך לפני %s',
                range: 'נא להזין תאריך בטווח %s - %s'
            },
            different: {
                'default': 'נא להזין ערך שונה'
            },
            digits: {
                'default': 'נא להזין ספרות בלבד'
            },
            ean: {
                'default': 'נא להזין מספר EAN תקין'
            },
            ein: {
                'default': 'נא להזין מספר EIN תקין'
            },
            emailAddress: {
                'default': 'נא להזין כתובת דוא"ל תקינה'
            },
            file: {
                'default': 'נא לבחור קובץ חוקי'
            },
            greaterThan: {
                'default': 'נא להזין ערך גדול או שווה ל-%s',
                notInclusive: 'נא להזין ערך גדול מ-%s'
            },
            grid: {
                'default': 'נא להזין מספר GRId תקין'
            },
            hex: {
                'default': 'נא להזין מספר הקסדצימלי תקין'
            },
            iban: {
                'default': 'נא להזין מספר IBAN תקין',
                country: 'נא להזין מספר IBAN תקני ב%s',
                countries: {
                    AD: 'אנדורה',
                    AE: 'איחוד האמירויות הערבי',
                    AL: 'אלבניה',
                    AO: 'אנגולה',
                    AT: 'אוסטריה',
                    AZ: 'אזרבייגאן',
                    BA: 'בוסניה והרצגובינה',
                    BE: 'בלגיה',
                    BF: 'בורקינה פאסו',
                    BG: 'בולגריה',
                    BH: 'בחריין',
                    BI: 'בורונדי',
                    BJ: 'בנין',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CI: 'חוף השנהב',
                    CM: 'קמרון',
                    CR: 'קוסטה ריקה',
                    CV: 'קייפ ורדה',
                    CY: 'קפריסין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    DO: 'דומיניקה',
                    DZ: 'אלגיריה',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    FO: 'איי פארו',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    GE: 'גאורגיה',
                    GI: 'גיברלטר',
                    GL: 'גרינלנד',
                    GR: 'יוון',
                    GT: 'גואטמלה',
                    HR: 'קרואטיה',
                    HU: 'הונגריה',
                    IE: 'אירלנד',
                    IL: 'ישראל',
                    IR: 'איראן',
                    IS: 'איסלנד',
                    IT: 'איטליה',
                    JO: 'ירדן',
                    KW: 'כווית',
                    KZ: 'קזחסטן',
                    LB: 'לבנון',
                    LI: 'ליכטנשטיין',
                    LT: 'ליטא',
                    LU: 'לוקסמבורג',
                    LV: 'לטביה',
                    MC: 'מונקו',
                    MD: 'מולדובה',
                    ME: 'מונטנגרו',
                    MG: 'מדגסקר',
                    MK: 'מקדוניה',
                    ML: 'מאלי',
                    MR: 'מאוריטניה',
                    MT: 'מלטה',
                    MU: 'מאוריציוס',
                    MZ: 'מוזמביק',
                    NL: 'הולנד',
                    NO: 'נורווגיה',
                    PK: 'פקיסטן',
                    PL: 'פולין',
                    PS: 'פלסטין',
                    PT: 'פורטוגל',
                    QA: 'קטאר',
                    RO: 'רומניה',
                    RS: 'סרביה',
                    SA: 'ערב הסעודית',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    SM: 'סן מרינו',
                    SN: 'סנגל',
                    TN: 'תוניסיה',
                    TR: 'טורקיה',
                    VG: 'איי הבתולה, בריטניה'
                }
            },
            id: {
                'default': 'נא להזין מספר זהות תקין',
                country: 'נא להזין מספר זהות תקני ב%s',
                countries: {
                    BA: 'בוסניה והרצגובינה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CL: 'צילה',
                    CN: 'סין',
                    CZ: 'צכיה',
                    DK: 'דנמרק',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    HR: 'קרואטיה',
                    IE: 'אירלנד',
                    IS: 'איסלנד',
                    LT: 'ליטא',
                    LV: 'לטביה',
                    ME: 'מונטנגרו',
                    MK: 'מקדוניה',
                    NL: 'הולנד',
                    PL: 'פולין',
                    RO: 'רומניה',
                    RS: 'סרביה',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    SM: 'סן מרינו',
                    TH: 'תאילנד',
                    ZA: 'דרום אפריקה'
                }
            },
            identical: {
                'default': 'נא להזין את הערך שנית'
            },
            imei: {
                'default': 'נא להזין מספר IMEI תקין'
            },
            imo: {
                'default': 'נא להזין מספר IMO תקין'
            },
            integer: {
                'default': 'נא להזין מספר תקין'
            },
            ip: {
                'default': 'נא להזין כתובת IP תקינה',
                ipv4: 'נא להזין כתובת IPv4 תקינה',
                ipv6: 'נא להזין כתובת IPv6 תקינה'
            },
            isbn: {
                'default': 'נא להזין מספר ISBN תקין'
            },
            isin: {
                'default': 'נא להזין מספר ISIN תקין'
            },
            ismn: {
                'default': 'נא להזין מספר ISMN תקין'
            },
            issn: {
                'default': 'נא להזין מספר ISSN תקין'
            },
            lessThan: {
                'default': 'נא להזין ערך קטן או שווה ל-%s',
                notInclusive: 'נא להזין ערך קטן מ-%s'
            },
            mac: {
                'default': 'נא להזין מספר MAC תקין'
            },
            meid: {
                'default': 'נא להזין מספר MEID תקין'
            },
            notEmpty: {
                'default': 'נא להזין ערך'
            },
            numeric: {
                'default': 'נא להזין מספר עשרוני חוקי'
            },
            phone: {
                'default': 'נא להין מספר טלפון תקין',
                country: 'נא להזין מספר טלפון תקין ב%s',
                countries: {
                    AE: 'איחוד האמירויות הערבי',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CN: 'סין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    ES: 'ספרד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    IN: 'הודו',
                    MA: 'מרוקו',
                    NL: 'הולנד',
                    PK: 'פקיסטן',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    SK: 'סלובקיה',
                    TH: 'תאילנד',
                    US: 'ארצות הברית',
                    VE: 'ונצואלה'
                }
            },
            regexp: {
                'default': 'נא להזין ערך תואם לתבנית'
            },
            remote: {
                'default': 'נא להזין ערך תקין'
            },
            rtn: {
                'default': 'נא להזין מספר RTN תקין'
            },
            sedol: {
                'default': 'נא להזין מספר SEDOL תקין'
            },
            siren: {
                'default': 'נא להזין מספר SIREN תקין'
            },
            siret: {
                'default': 'נא להזין מספר SIRET תקין'
            },
            step: {
                'default': 'נא להזין שלב תקין מתוך %s'
            },
            stringCase: {
                'default': 'נא להזין אותיות קטנות בלבד',
                upper: 'נא להזין אותיות גדולות בלבד'
            },
            stringLength: {
                'default': 'נא להזין ערך באורך חוקי',
                less: 'נא להזין ערך קטן מ-%s תווים',
                more: 'נא להזין ערך גדול מ- %s תווים',
                between: 'נא להזין ערך בין %s עד %s תווים'
            },
            uri: {
                'default': 'נא להזין URI תקין'
            },
            uuid: {
                'default': 'נא להזין מספר UUID תקין',
                version: 'נא להזין מספר UUID גרסה %s תקין'
            },
            vat: {
                'default': 'נא להזין מספר VAT תקין',
                country: 'נא להזין מספר VAT תקין ב%s',
                countries: {
                    AT: 'אוסטריה',
                    BE: 'בלגיה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CH: 'שווייץ',
                    CY: 'קפריסין',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    EE: 'אסטוניה',
                    ES: 'ספרד',
                    FI: 'פינלנד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    GR: 'יוון',
                    EL: 'יוון',
                    HU: 'הונגריה',
                    HR: 'קרואטיה',
                    IE: 'אירלנד',
                    IS: 'איסלנד',
                    IT: 'איטליה',
                    LT: 'ליטא',
                    LU: 'לוקסמבורג',
                    LV: 'לטביה',
                    MT: 'מלטה',
                    NL: 'הולנד',
                    NO: 'נורווגיה',
                    PL: 'פולין',
                    PT: 'פורטוגל',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    RS: 'סרביה',
                    SE: 'שוודיה',
                    SI: 'סלובניה',
                    SK: 'סלובקיה',
                    VE: 'ונצואלה',
                    ZA: 'דרום אפריקה'
                }
            },
            vin: {
                'default': 'נא להזין מספר VIN תקין'
            },
            zipCode: {
                'default': 'נא להזין מיקוד תקין',
                country: 'נא להזין מיקוד תקין ב%s',
                countries: {
                    AT: 'אוסטריה',
                    BG: 'בולגריה',
                    BR: 'ברזיל',
                    CA: 'קנדה',
                    CH: 'שווייץ',
                    CZ: 'צכיה',
                    DE: 'גרמניה',
                    DK: 'דנמרק',
                    ES: 'ספרד',
                    FR: 'צרפת',
                    GB: 'בריטניה',
                    IE: 'אירלנד',
                    IN: 'הודו',
                    IT: 'איטליה',
                    MA: 'מרוקו',
                    NL: 'הולנד',
                    PL: 'פולין',
                    PT: 'פורטוגל',
                    RO: 'רומניה',
                    RU: 'רוסיה',
                    SE: 'שוודיה',
                    SG: 'סינגפור',
                    SK: 'סלובקיה',
                    US: 'ארצות הברית'
                }
            }
        }
    });
}(jQuery));

(function ($) {
    /**
     * Hindi (India) language package
     * Translated by @gladiatorAsh
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'hi_IN': {
            base64: {
                'default': 'कृपया एक वैध 64 इनकोडिंग मूल्यांक प्रविष्ट करें'
            },
            between: {
                'default': 'कृपया %s और %s के बीच एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया सिर्फ़ %s और %s के बीच मूल्यांक प्रविष्ट करें'
            },
            bic: {
                'default': 'कृपया एक वैध BIC संख्या प्रविष्ट करें'
            },
            callback: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें'
            },
            choice: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें',
                less: 'कृपया कम से कम %s विकल्पों का चयन करें',
                more: 'कृपया अधिकतम %s विकल्पों का चयन करें',
                between: 'कृपया %s और %s के बीच विकल्पों का चयन करें'
            },
            color: {
                'default': 'कृपया एक वैध रंग प्रविष्ट करें'
            },
            creditCard: {
                'default': 'कृपया एक वैध क्रेडिट कार्ड संख्या प्रविष्ट करें'
            },
            cusip: {
                'default': 'कृपया एक वैध CUSIP संख्या प्रविष्ट करें'
            },
            cvv: {
                'default': 'कृपया एक वैध CVV संख्या प्रविष्ट करें'
            },
            date: {
                'default': 'कृपया एक वैध दिनांक प्रविष्ट करें',
                min: 'कृपया %s के बाद एक वैध दिनांक प्रविष्ट करें',
                max: 'कृपया %s के पहले एक वैध दिनांक प्रविष्ट करें',
                range: 'कृपया %s से %s के बीच एक वैध दिनांक प्रविष्ट करें'
            },
            different: {
                'default': 'कृपया एक अलग मूल्यांक प्रविष्ट करें'
            },
            digits: {
                'default': 'कृपया केवल अंक प्रविष्ट करें'
            },
            ean: {
                'default': 'कृपया एक वैध EAN संख्या प्रविष्ट करें'
            },
            ein: {
                'default': 'कृपया एक वैध EIN संख्या प्रविष्ट करें'
            },
            emailAddress: {
                'default': 'कृपया एक वैध ईमेल पता प्रविष्ट करें'
            },
            file: {
                'default': 'कृपया एक वैध फ़ाइल का चयन करें'
            },
            greaterThan: {
                'default': 'कृपया %s से अधिक या बराबर एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया %s से अधिक एक मूल्यांक प्रविष्ट करें'
            },
            grid: {
                'default': 'कृपया एक वैध GRID संख्या प्रविष्ट करें'
            },
            hex: {
                'default': 'कृपया एक वैध हेक्साडेसिमल संख्या प्रविष्ट करें'
            },
            iban: {
                'default': 'कृपया एक वैध IBAN संख्या प्रविष्ट करें',
                country: 'कृपया %s में एक वैध IBAN संख्या प्रविष्ट करें',
                countries: {
                    AD: 'अंडोरा',
                    AE: 'संयुक्त अरब अमीरात',
                    AL: 'अल्बानिया',
                    AO: 'अंगोला',
                    AT: 'ऑस्ट्रिया',
                    AZ: 'अज़रबैजान',
                    BA: 'बोस्निया और हर्जेगोविना',
                    BE: 'बेल्जियम',
                    BF: 'बुर्किना फासो',
                    BG: 'बुल्गारिया',
                    BH: 'बहरीन',
                    BI: 'बुस्र्न्दी',
                    BJ: 'बेनिन',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CI: 'आइवरी कोस्ट',
                    CM: 'कैमरून',
                    CR: 'कोस्टा रिका',
                    CV: 'केप वर्डे',
                    CY: 'साइप्रस',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    DO: 'डोमिनिकन गणराज्य',
                    DZ: 'एलजीरिया',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    FO: 'फरो आइलैंड्स',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    GE: 'जॉर्जिया',
                    GI: 'जिब्राल्टर',
                    GL: 'ग्रीनलैंड',
                    GR: 'ग्रीस',
                    GT: 'ग्वाटेमाला',
                    HR: 'क्रोएशिया',
                    HU: 'हंगरी',
                    IE: 'आयरलैंड',
                    IL: 'इज़राइल',
                    IR: 'ईरान',
                    IS: 'आइसलैंड',
                    IT: 'इटली',
                    JO: 'जॉर्डन',
                    KW: 'कुवैत',
                    KZ: 'कजाखस्तान',
                    LB: 'लेबनान',
                    LI: 'लिकटेंस्टीन',
                    LT: 'लिथुआनिया',
                    LU: 'लक्समबर्ग',
                    LV: 'लाटविया',
                    MC: 'मोनाको',
                    MD: 'माल्डोवा',
                    ME: 'मॉन्टेंगरो',
                    MG: 'मेडागास्कर',
                    MK: 'मैसेडोनिया',
                    ML: 'माली',
                    MR: 'मॉरिटानिया',
                    MT: 'माल्टा',
                    MU: 'मॉरीशस',
                    MZ: 'मोज़ाम्बिक',
                    NL: 'नीदरलैंड',
                    NO: 'नॉर्वे',
                    PK: 'पाकिस्तान',
                    PL: 'पोलैंड',
                    PS: 'फिलिस्तीन',
                    PT: 'पुर्तगाल',
                    QA: 'क़तर',
                    RO: 'रोमानिया',
                    RS: 'सर्बिया',
                    SA: 'सऊदी अरब',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    SM: 'सैन मैरिनो',
                    SN: 'सेनेगल',
                    TN: 'ट्यूनीशिया',
                    TR: 'तुर्की',
                    VG: 'वर्जिन आइलैंड्स, ब्रिटिश'
                }
            },
            id: {
                'default': 'कृपया एक वैध पहचान संख्या प्रविष्ट करें',
                country: 'कृपया %s में एक वैध पहचान संख्या प्रविष्ट करें',
                countries: {
                    BA: 'बोस्निया और हर्जेगोविना',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CL: 'चिली',
                    CN: 'चीन',
                    CZ: 'चेक रिपब्लिक',
                    DK: 'डेनमार्क',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    HR: 'क्रोएशिया',
                    IE: 'आयरलैंड',
                    IS: 'आइसलैंड',
                    LT: 'लिथुआनिया',
                    LV: 'लाटविया',
                    ME: 'मोंटेनेग्रो',
                    MK: 'मैसेडोनिया',
                    NL: 'नीदरलैंड',
                    PL: 'पोलैंड',
                    RO: 'रोमानिया',
                    RS: 'सर्बिया',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    SM: 'सैन मैरिनो',
                    TH: 'थाईलैंड',
                    ZA: 'दक्षिण अफ्रीका'
                }
            },
            identical: {
                'default': 'कृपया वही मूल्यांक दोबारा प्रविष्ट करें'
            },
            imei: {
                'default': 'कृपया एक वैध IMEI संख्या प्रविष्ट करें'
            },
            imo: {
                'default': 'कृपया एक वैध IMO संख्या प्रविष्ट करें'
            },
            integer: {
                'default': 'कृपया एक वैध संख्या प्रविष्ट करें'
            },
            ip: {
                'default': 'कृपया एक वैध IP पता प्रविष्ट करें',
                ipv4: 'कृपया एक वैध IPv4 पता प्रविष्ट करें',
                ipv6: 'कृपया एक वैध IPv6 पता प्रविष्ट करें'
            },
            isbn: {
                'default': 'कृपया एक वैध ISBN संख्या दर्ज करें'
            },
            isin: {
                'default': 'कृपया एक वैध ISIN संख्या दर्ज करें'
            },
            ismn: {
                'default': 'कृपया एक वैध ISMN संख्या दर्ज करें'
            },
            issn: {
                'default': 'कृपया एक वैध ISSN संख्या दर्ज करें'
            },
            lessThan: {
                'default': 'कृपया %s से कम या बराबर एक मूल्यांक प्रविष्ट करें',
                notInclusive: 'कृपया %s से कम एक मूल्यांक प्रविष्ट करें'
            },
            mac: {
                'default': 'कृपया एक वैध MAC पता प्रविष्ट करें'
            },
            meid: {
                'default': 'कृपया एक वैध MEID संख्या प्रविष्ट करें'
            },
            notEmpty: {
                'default': 'कृपया एक मूल्यांक प्रविष्ट करें'
            },
            numeric: {
                'default': 'कृपया एक वैध दशमलव संख्या प्रविष्ट करें'
            },
            phone: {
                'default': 'कृपया एक वैध फ़ोन नंबर प्रविष्ट करें',
                country: 'कृपया %s में एक वैध फ़ोन नंबर प्रविष्ट करें',
                countries: {
                    AE: 'संयुक्त अरब अमीरात',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CN: 'चीन',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    ES: 'स्पेन',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    IN: 'भारत',
                    MA: 'मोरक्को',
                    NL: 'नीदरलैंड',
                    PK: 'पाकिस्तान',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    SK: 'स्लोवाकिया',
                    TH: 'थाईलैंड',
                    US: 'अमेरीका',
                    VE: 'वेनेजुएला'
                }
            },
            regexp: {
                'default': 'कृपया पैटर्न से मेल खाते एक मूल्यांक प्रविष्ट करें'
            },
            remote: {
                'default': 'कृपया एक वैध मूल्यांक प्रविष्ट करें'
            },
            rtn: {
                'default': 'कृपया एक वैध RTN संख्या प्रविष्ट करें'
            },
            sedol: {
                'default': 'कृपया एक वैध SEDOL संख्या प्रविष्ट करें'
            },
            siren: {
                'default': 'कृपया एक वैध SIREN संख्या प्रविष्ट करें'
            },
            siret: {
                'default': 'कृपया एक वैध SIRET संख्या प्रविष्ट करें'
            },
            step: {
                'default': '%s के एक गुणज मूल्यांक प्रविष्ट करें'
            },
            stringCase: {
                'default': 'कृपया केवल छोटे पात्रों का प्रविष्ट करें',
                upper: 'कृपया केवल बड़े पात्रों का प्रविष्ट करें'
            },
            stringLength: {
                'default': 'कृपया वैध लंबाई का एक मूल्यांक प्रविष्ट करें',
                less: 'कृपया %s से कम पात्रों को प्रविष्ट करें',
                more: 'कृपया %s से अधिक पात्रों को प्रविष्ट करें',
                between: 'कृपया %s से %s के बीच लंबाई का एक मूल्यांक प्रविष्ट करें'
            },
            uri: {
                'default': 'कृपया एक वैध URI प्रविष्ट करें'
            },
            uuid: {
                'default': 'कृपया एक वैध UUID संख्या प्रविष्ट करें',
                version: 'कृपया एक वैध UUID संस्करण %s संख्या प्रविष्ट करें'
            },
            vat: {
                'default': 'कृपया एक वैध VAT संख्या प्रविष्ट करें',
                country: 'कृपया एक वैध VAT संख्या %s मे प्रविष्ट करें',
                countries: {
                    AT: 'ऑस्ट्रिया',
                    BE: 'बेल्जियम',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CH: 'स्विट्जरलैंड',
                    CY: 'साइप्रस',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    EE: 'एस्तोनिया',
                    ES: 'स्पेन',
                    FI: 'फिनलैंड',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    GR: 'ग्रीस',
                    EL: 'ग्रीस',
                    HU: 'हंगरी',
                    HR: 'क्रोएशिया',
                    IE: 'आयरलैंड',
                    IS: 'आइसलैंड',
                    IT: 'इटली',
                    LT: 'लिथुआनिया',
                    LU: 'लक्समबर्ग',
                    LV: 'लाटविया',
                    MT: 'माल्टा',
                    NL: 'नीदरलैंड',
                    NO: 'नॉर्वे',
                    PL: 'पोलैंड',
                    PT: 'पुर्तगाल',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    RS: 'सर्बिया',
                    SE: 'स्वीडन',
                    SI: 'स्लोवेनिया',
                    SK: 'स्लोवाकिया',
                    VE: 'वेनेजुएला',
                    ZA: 'दक्षिण अफ्रीका'
                }
            },
            vin: {
                'default': 'कृपया एक वैध VIN संख्या प्रविष्ट करें'
            },
            zipCode: {
                'default': 'कृपया एक वैध डाक कोड प्रविष्ट करें',
                country: 'कृपया एक वैध डाक कोड %s मे प्रविष्ट करें',
                countries: {
                    AT: 'ऑस्ट्रिया',
                    BG: 'बुल्गारिया',
                    BR: 'ब्राज़िल',
                    CA: 'कनाडा',
                    CH: 'स्विट्जरलैंड',
                    CZ: 'चेक रिपब्लिक',
                    DE: 'जर्मनी',
                    DK: 'डेनमार्क',
                    ES: 'स्पेन',
                    FR: 'फ्रांस',
                    GB: 'यूनाइटेड किंगडम',
                    IE: 'आयरलैंड',
                    IN: 'भारत',
                    IT: 'इटली',
                    MA: 'मोरक्को',
                    NL: 'नीदरलैंड',
                    PL: 'पोलैंड',
                    PT: 'पुर्तगाल',
                    RO: 'रोमानिया',
                    RU: 'रुस',
                    SE: 'स्वीडन',
                    SG: 'सिंगापुर',
                    SK: 'स्लोवाकिया',
                    US: 'अमेरीका'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Hungarian language package
     * Translated by @blackfyre
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'hu_HU': {
            base64: {
                'default': 'Kérlek, hogy érvényes base 64 karakter láncot adj meg'
            },
            between: {
                'default': 'Kérlek, hogy %s és %s között adj meg értéket',
                notInclusive: 'Kérlek, hogy %s és %s között adj meg értéket'
            },
            bic: {
                'default': 'Kérlek, hogy érvényes BIC számot adj meg'
            },
            callback: {
                'default': 'Kérlek, hogy érvényes értéket adj meg'
            },
            choice: {
                'default': 'Kérlek, hogy érvényes értéket adj meg',
                less: 'Kérlek, hogy legalább %s lehetőséget válassz ki',
                more: 'Kérlek, hogy maximum %s lehetőséget válassz ki',
                between: 'Kérlek, hogy válassz %s - %s lehetőséget'
            },
            color: {
                'default': 'Kérlek, hogy érvényes színt adj meg'
            },
            creditCard: {
                'default': 'Kérlek, hogy érvényes bankkártya számot adj meg'
            },
            cusip: {
                'default': 'Kérlek, hogy érvényes CUSIP számot adj meg'
            },
            cvv: {
                'default': 'Kérlek, hogy érvényes CVV számot adj meg'
            },
            date: {
                'default': 'Kérlek, hogy érvényes dátumot adj meg',
                min: 'Kérlek, hogy %s -nál későbbi dátumot adj meg',
                max: 'Kérlek, hogy %s -nál korábbi dátumot adj meg',
                range: 'Kérlek, hogy %s - %s között adj meg dátumot'
            },
            different: {
                'default': 'Kérlek, hogy egy másik értéket adj meg'
            },
            digits: {
                'default': 'Kérlek, hogy csak számot adj meg'
            },
            ean: {
                'default': 'Kérlek, hogy érvényes EAN számot adj meg'
            },
            ein: {
                'default': 'Kérlek, hogy érvényes EIN számot adj meg'
            },
            emailAddress: {
                'default': 'Kérlek, hogy érvényes email címet adj meg'
            },
            file: {
                'default': 'Kérlek, hogy érvényes fájlt válassz'
            },
            greaterThan: {
                'default': 'Kérlek, hogy ezzel (%s) egyenlő vagy nagyobb számot adj meg',
                notInclusive: 'Kérlek, hogy ennél (%s) nagyobb számot adj meg'
            },
            grid: {
                'default': 'Kérlek, hogy érvényes GRId számot adj meg'
            },
            hex: {
                'default': 'Kérlek, hogy érvényes hexadecimális számot adj meg'
            },
            iban: {
                'default': 'Kérlek, hogy érvényes IBAN számot adj meg',
                country: 'Kérlek, hogy %s érvényes  IBAN számot adj meg',
                countries: {
                    AD: 'az Andorrai Fejedelemségben', /* Special case */
                    AE: 'az Egyesült Arab Emírségekben', /* Special case */
                    AL: 'Albániában',
                    AO: 'Angolában',
                    AT: 'Ausztriában',
                    AZ: 'Azerbadjzsánban',
                    BA: 'Bosznia-Hercegovinában', /* Special case */
                    BE: 'Belgiumban',
                    BF: 'Burkina Fasoban',
                    BG: 'Bulgáriában',
                    BH: 'Bahreinben',
                    BI: 'Burundiban',
                    BJ: 'Beninben',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CI: 'az Elefántcsontparton', /* Special case */
                    CM: 'Kamerunban',
                    CR: 'Costa Ricán', /* Special case */
                    CV: 'Zöld-foki Köztársaságban',
                    CY: 'Cypruson',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    DO: 'Dominikán', /* Special case */
                    DZ: 'Algériában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    FO: 'a Feröer-szigeteken', /* Special case */
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban', /* Special case */
                    GE: 'Grúziában',
                    GI: 'Gibraltáron', /* Special case */
                    GL: 'Grönlandon', /* Special case */
                    GR: 'Görögországban',
                    GT: 'Guatemalában',
                    HR: 'Horvátországban',
                    HU: 'Magyarországon',
                    IE: 'Írországban', /* Special case */
                    IL: 'Izraelben',
                    IR: 'Iránban', /* Special case */
                    IS: 'Izlandon',
                    IT: 'Olaszországban',
                    JO: 'Jordániában',
                    KW: 'Kuvaitban', /* Special case */
                    KZ: 'Kazahsztánban',
                    LB: 'Libanonban',
                    LI: 'Liechtensteinben',
                    LT: 'Litvániában',
                    LU: 'Luxemburgban',
                    LV: 'Lettországban',
                    MC: 'Monacóban', /* Special case */
                    MD: 'Moldovában', /* Special case */
                    ME: 'Montenegróban',
                    MG: 'Madagaszkáron',
                    MK: 'Macedóniában',
                    ML: 'Malin',
                    MR: 'Mauritániában',
                    MT: 'Máltán',
                    MU: 'Mauritiuson',
                    MZ: 'Mozambikban',
                    NL: 'Hollandiában',
                    NO: 'Norvégiában',
                    PK: 'Pakisztánban',
                    PL: 'Lengyelországban',
                    PS: 'Palesztinában',
                    PT: 'Portugáliában',
                    QA: 'Katarban', /* Special case */
                    RO: 'Romániában',
                    RS: 'Szerbiában',
                    SA: 'Szaúd-Arábiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    SM: 'San Marinoban',
                    SN: 'Szenegálban', /* Special case */
                    TN: 'Tunéziában', /* Special case */
                    TR: 'Törökországban',
                    VG: 'Britt Virgin szigeteken' /* Special case */
                }
            },
            id: {
                'default': 'Kérlek, hogy érvényes személy azonosító számot adj meg',
                country: 'Kérlek, hogy %s érvényes személy azonosító számot adj meg',
                countries: {
                    BA: 'Bosznia-Hercegovinában',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CL: 'Chilében',
                    CN: 'Kínában',
                    CZ: 'Csehországban',
                    DK: 'Dániában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    HR: 'Horvátországban',
                    IE: 'Írországban',
                    IS: 'Izlandon',
                    LT: 'Litvániában',
                    LV: 'Lettországban',
                    ME: 'Montenegróban',
                    MK: 'Macedóniában',
                    NL: 'Hollandiában',
                    PL: 'Lengyelországban',
                    RO: 'Romániában',
                    RS: 'Szerbiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    SM: 'San Marinoban',
                    TH: 'Thaiföldön',
                    ZA: 'Dél-Afrikában'
                }
            },
            identical: {
                'default': 'Kérlek, hogy ugyan azt az értéket add meg'
            },
            imei: {
                'default': 'Kérlek, hogy érvényes IMEI számot adj meg'
            },
            imo: {
                'default': 'Kérlek, hogy érvényes IMO számot adj meg'
            },
            integer: {
                'default': 'Kérlek, hogy számot adj meg'
            },
            ip: {
                'default': 'Kérlek, hogy IP címet adj meg',
                ipv4: 'Kérlek, hogy érvényes IPv4 címet adj meg',
                ipv6: 'Kérlek, hogy érvényes IPv6 címet adj meg'
            },
            isbn: {
                'default': 'Kérlek, hogy érvényes ISBN számot adj meg'
            },
            isin: {
                'default': 'Kérlek, hogy érvényes ISIN számot adj meg'
            },
            ismn: {
                'default': 'Kérlek, hogy érvényes ISMN számot adj meg'
            },
            issn: {
                'default': 'Kérlek, hogy érvényes ISSN számot adj meg'
            },
            lessThan: {
                'default': 'Kérlek, hogy adj meg egy számot ami kisebb vagy egyenlő mint %s',
                notInclusive: 'Kérlek, hogy adj meg egy számot ami kisebb mint %s'
            },
            mac: {
                'default': 'Kérlek, hogy érvényes MAC címet adj meg'
            },
            meid: {
                'default': 'Kérlek, hogy érvényes MEID számot adj meg'
            },
            notEmpty: {
                'default': 'Kérlek, hogy adj értéket a mezőnek'
            },
            numeric: {
                'default': 'Please enter a valid float number'
            },
            phone: {
                'default': 'Kérlek, hogy érvényes telefonszámot adj meg',
                country: 'Kérlek, hogy %s érvényes telefonszámot adj meg',
                countries: {
                    AE: 'az Egyesült Arab Emírségekben', /* Special case */
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CN: 'Kínában',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    ES: 'Spanyolországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    IN: 'India',
                    MA: 'Marokkóban',
                    NL: 'Hollandiában',
                    PK: 'Pakisztánban',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    SK: 'Szlovákiában',
                    TH: 'Thaiföldön',
                    US: 'az Egyesült Államokban',
                    VE: 'Venezuelában' /* Sepcial case */
                }
            },
            regexp: {
                'default': 'Kérlek, hogy a mintának megfelelő értéket adj meg'
            },
            remote: {
                'default': 'Kérlek, hogy érvényes értéket adj meg'
            },
            rtn: {
                'default': 'Kérlek, hogy érvényes RTN számot adj meg'
            },
            sedol: {
                'default': 'Kérlek, hogy érvényes SEDOL számot adj meg'
            },
            siren: {
                'default': 'Kérlek, hogy érvényes SIREN számot adj meg'
            },
            siret: {
                'default': 'Kérlek, hogy érvényes SIRET számot adj meg'
            },
            step: {
                'default': 'Kérlek, hogy érvényes lépteket adj meg (%s)'
            },
            stringCase: {
                'default': 'Kérlek, hogy csak kisbetüket adj meg',
                upper: 'Kérlek, hogy csak nagy betüket adj meg'
            },
            stringLength: {
                'default': 'Kérlek, hogy érvényes karakter hosszúsággal adj meg értéket',
                less: 'Kérlek, hogy kevesebb mint %s karaktert adj meg',
                more: 'Kérlek, hogy több mint %s karaktert adj meg',
                between: 'Kérlek, hogy legalább %s, de maximum %s karaktert adj meg'
            },
            uri: {
                'default': 'Kérlek, hogy helyes URI -t adj meg'
            },
            uuid: {
                'default': 'Kérlek, hogy érvényes UUID számot adj meg',
                version: 'Kérlek, hogy érvényes UUID verzió %s számot adj meg'
            },
            vat: {
                'default': 'Kérlek, hogy helyes adó számot adj meg',
                country: 'Kérlek, hogy %s helyes  adószámot adj meg',
                countries: {
                    AT: 'Ausztriában',
                    BE: 'Belgiumban',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CH: 'Svájcban',
                    CY: 'Cipruson',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    EE: 'Észtországban',
                    ES: 'Spanyolországban',
                    FI: 'Finnországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    GR: 'Görögországban',
                    EL: 'Görögországban',
                    HU: 'Magyarországon',
                    HR: 'Horvátországban',
                    IE: 'Írországban',
                    IS: 'Izlandon',
                    IT: 'Olaszországban',
                    LT: 'Litvániában',
                    LU: 'Luxemburgban',
                    LV: 'Lettországban',
                    MT: 'Máltán',
                    NL: 'Hollandiában',
                    NO: 'Norvégiában',
                    PL: 'Lengyelországban',
                    PT: 'Portugáliában',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    RS: 'Szerbiában',
                    SE: 'Svédországban',
                    SI: 'Szlovéniában',
                    SK: 'Szlovákiában',
                    VE: 'Venezuelában',
                    ZA: 'Dél-Afrikában'
                }
            },
            vin: {
                'default': 'Kérlek, hogy érvényes VIN számot adj meg'
            },
            zipCode: {
                'default': 'Kérlek, hogy érvényes irányítószámot adj meg',
                country: 'Kérlek, hogy %s érvényes irányítószámot adj meg',
                countries: {
                    AT: 'Ausztriában',
                    BG: 'Bulgáriában',
                    BR: 'Brazíliában',
                    CA: 'Kanadában',
                    CH: 'Svájcban',
                    CZ: 'Csehországban',
                    DE: 'Németországban',
                    DK: 'Dániában',
                    ES: 'Spanyolországban',
                    FR: 'Franciaországban',
                    GB: 'az Egyesült Királyságban',
                    IE: 'Írországban',
                    IN: 'India',
                    IT: 'Olaszországban',
                    MA: 'Marokkóban',
                    NL: 'Hollandiában',
                    PL: 'Lengyelországban',
                    PT: 'Portugáliában',
                    RO: 'Romániában',
                    RU: 'Oroszországban',
                    SE: 'Svájcban',
                    SG: 'Szingapúrban',
                    SK: 'Szlovákiában',
                    US: 'Egyesült Államok beli'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Indonesian language package
     * Translated by @egig
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'id_ID': {
            base64: {
                'default': 'Silahkan isi karakter base 64 tersandi yang valid'
            },
            between: {
                'default': 'Silahkan isi nilai antara %s dan %s',
                notInclusive: 'Silahkan isi nilai antara %s dan %s, strictly'
            },
            bic: {
                'default': 'Silahkan isi nomor BIC yang valid'
            },
            callback: {
                'default': 'Silahkan isi nilai yang valid'
            },
            choice: {
                'default': 'Silahkan isi nilai yang valid',
                less: 'Silahkan pilih pilihan %s pada minimum',
                more: 'Silahkan pilih pilihan %s pada maksimum',
                between: 'Silahkan pilih pilihan %s - %s'
            },
            color: {
                'default': 'Silahkan isi karakter warna yang valid'
            },
            creditCard: {
                'default': 'Silahkan isi nomor kartu kredit yang valid'
            },
            cusip: {
                'default': 'Silahkan isi nomor CUSIP yang valid'
            },
            cvv: {
                'default': 'Silahkan isi nomor CVV yang valid'
            },
            date: {
                'default': 'Silahkan isi tanggal yang benar',
                min: 'Silahkan isi tanggal setelah tanggal %s',
                max: 'Silahkan isi tanggal sebelum tanggal %s',
                range: 'Silahkan isi tanggal antara %s - %s'
            },
            different: {
                'default': 'Silahkan isi nilai yang berbeda'
            },
            digits: {
                'default': 'Silahkan isi dengan hanya digit'
            },
            ean: {
                'default': 'Silahkan isi nomor EAN yang valid'
            },
            ein: {
                'default': 'Silahkan isi nomor EIN yang valid'
            },
            emailAddress: {
                'default': 'Silahkan isi alamat email yang valid'
            },
            file: {
                'default': 'Silahkan pilih file yang valid'
            },
            greaterThan: {
                'default': 'Silahkan isi nilai yang lebih besar atau sama dengan %s',
                notInclusive: 'Silahkan is nilai yang lebih besar dari %s'
            },
            grid: {
                'default': 'Silahkan nomor GRId yang valid'
            },
            hex: {
                'default': 'Silahkan isi karakter hexadecimal yang valid'
            },
            iban: {
                'default': 'silahkan isi nomor IBAN yang valid',
                country: 'Silahkan isi nomor IBAN yang valid dalam %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Uni Emirat Arab',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia and Herzegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CI: 'Pantai Gading',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    DO: 'Republik Dominika',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    FO: 'Faroe Islands',
                    FR: 'Francis',
                    GB: 'Inggris',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Yunani',
                    GT: 'Guatemala',
                    HR: 'Kroasia',
                    HU: 'Hungary',
                    IE: 'Irlandia',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Netherlands',
                    NO: 'Norway',
                    PK: 'Pakistan',
                    PL: 'Polandia',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi Arabia',
                    SE: 'Swedia',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turki',
                    VG: 'Virgin Islands, British'
                }
            },
            id: {
                'default': 'Silahkan isi nomor identitas yang valid',
                country: 'Silahkan isi nomor identitas yang valid dalam %s',
                countries: {
                    BA: 'Bosnia and Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CL: 'Chile',
                    CN: 'Cina',
                    CZ: 'Czech',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    HR: 'Kroasia',
                    IE: 'Irlandia',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Netherlands',
                    PL: 'Polandia',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Africa Selatan'
                }
            },
            identical: {
                'default': 'Silahkan isi nilai yang sama'
            },
            imei: {
                'default': 'Silahkan isi nomor IMEI yang valid'
            },
            imo: {
                'default': 'Silahkan isi nomor IMO yang valid'
            },
            integer: {
                'default': 'Silahkan isi angka yang valid'
            },
            ip: {
                'default': 'Silahkan isi alamat IP yang valid',
                ipv4: 'Silahkan isi alamat IPv4 yang valid',
                ipv6: 'Silahkan isi alamat IPv6 yang valid'
            },
            isbn: {
                'default': 'Slilahkan isi nomor ISBN yang valid'
            },
            isin: {
                'default': 'Silahkan isi ISIN yang valid'
            },
            ismn: {
                'default': 'Silahkan isi nomor ISMN yang valid'
            },
            issn: {
                'default': 'Silahkan isi nomor ISSN yang valid'
            },
            lessThan: {
                'default': 'Silahkan isi nilai kurang dari atau sama dengan %s',
                notInclusive: 'Silahkan isi nilai kurang dari %s'
            },
            mac: {
                'default': 'Silahkan isi MAC address yang valid'
            },
            meid: {
                'default': 'Silahkan isi nomor MEID yang valid'
            },
            notEmpty: {
                'default': 'Silahkan isi'
            },
            numeric: {
                'default': 'Silahkan isi nomor yang valid'
            },
            phone: {
                'default': 'Silahkan isi nomor telepon yang valid',
                country: 'Silahkan isi nomor telepon yang valid dalam %s',
                countries: {
                    AE: 'Uni Emirat Arab',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'Cina',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    ES: 'Spanyol',
                    FR: 'Francis',
                    GB: 'Inggris',
                    IN: 'India',
                    MA: 'Maroko',
                    NL: 'Netherlands',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'Amerika Serikat',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Silahkan isi nilai yang cocok dengan pola'
            },
            remote: {
                'default': 'Silahkan isi nilai yang valid'
            },
            rtn: {
                'default': 'Silahkan isi nomor RTN yang valid'
            },
            sedol: {
                'default': 'Silahkan isi nomor SEDOL yang valid'
            },
            siren: {
                'default': 'Silahkan isi nomor SIREN yang valid'
            },
            siret: {
                'default': 'Silahkan isi nomor SIRET yang valid'
            },
            step: {
                'default': 'Silahkan isi langkah yang benar pada %s'
            },
            stringCase: {
                'default': 'Silahkan isi hanya huruf kecil',
                upper: 'Silahkan isi hanya huruf besar'
            },
            stringLength: {
                'default': 'Silahkan isi nilai dengan panjang karakter yang benar',
                less: 'Silahkan isi kurang dari %s karakter',
                more: 'Silahkan isi lebih dari %s karakter',
                between: 'Silahkan isi antara %s dan %s panjang karakter'
            },
            uri: {
                'default': 'Silahkan isi URI yang valid'
            },
            uuid: {
                'default': 'Silahkan isi nomor UUID yang valid',
                version: 'Silahkan si nomor versi %s UUID yang valid'
            },
            vat: {
                'default': 'Silahkan isi nomor VAT yang valid',
                country: 'Silahkan nomor VAT yang valid dalam %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgium',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Switzerland',
                    CY: 'Cyprus',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    EE: 'Estonia',
                    ES: 'Spanyol',
                    FI: 'Finlandia',
                    FR: 'Francis',
                    GB: 'Inggris',
                    GR: 'Yunani',
                    EL: 'Yunani',
                    HU: 'Hungaria',
                    HR: 'Kroasia',
                    IE: 'Irlandia',
                    IS: 'Iceland',
                    IT: 'Italy',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Belanda',
                    NO: 'Norway',
                    PL: 'Polandia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Sweden',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Afrika Selatan'
                }
            },
            vin: {
                'default': 'Silahkan isi nomor VIN yang valid'
            },
            zipCode: {
                'default': 'Silahkan isi kode pos yang valid',
                country: 'Silahkan isi kode pos yang valid di %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Kanada',
                    CH: 'Switzerland',
                    CZ: 'Czech',
                    DE: 'Jerman',
                    DK: 'Denmark',
                    ES: 'Spanyol',
                    FR: 'Francis',
                    GB: 'Inggris',
                    IE: 'Irlandia',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroko',
                    NL: 'Belanda',
                    PL: 'Polandia',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Sweden',
                    SG: 'Singapura',
                    SK: 'Slovakia',
                    US: 'Amerika Serikat'
                }
            }
        }
    });
}(jQuery));

(function ($) {
    /**
     * Italian language package
     * Translated by @maramazza
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'it_IT': {
            base64: {
                'default': 'Si prega di inserire un valore codificato in Base 64'
            },
            between: {
                'default': 'Si prega di inserire un valore tra %s e %s',
                notInclusive: 'Si prega di scegliere rigorosamente un valore tra %s e %s'
            },
            bic: {
                'default': 'Si prega di inserire un numero BIC valido'
            },
            callback: {
                'default': 'Si prega di inserire un valore valido'
            },
            choice: {
                'default': 'Si prega di inserire un valore valido',
                less: 'Si prega di scegliere come minimo l\'opzione %s',
                more: 'Si prega di scegliere al massimo l\'opzione %s',
                between: 'Si prega di scegliere l\'opzione tra %s e %s'
            },
            color: {
                'default': 'Si prega di inserire un colore valido'
            },
            creditCard: {
                'default': 'Si prega di inserire un numero di carta di credito valido'
            },
            cusip: {
                'default': 'Si prega di inserire un numero CUSIP valido'
            },
            cvv: {
                'default': 'Si prega di inserire un numero CVV valido'
            },
            date: {
                'default': 'Si prega di inserire una data valida',
                min: 'Si prega di inserire una data successiva al %s',
                max: 'Si prega di inserire una data antecedente il %s',
                range: 'Si prega di inserire una data compresa tra %s - %s'
            },
            different: {
                'default': 'Si prega di inserire un valore differente'
            },
            digits: {
                'default': 'Si prega di inserire solo numeri'
            },
            ean: {
                'default': 'Si prega di inserire un numero EAN valido'
            },
            ein: {
                'default': 'Si prega di inserire un numero EIN valido'
            },
            emailAddress: {
                'default': 'Si prega di inserire un indirizzo email valido'
            },
            file: {
                'default': 'Si prega di scegliere un file valido'
            },
            greaterThan: {
                'default': 'Si prega di inserire un numero maggiore o uguale a %s',
                notInclusive: 'Si prega di inserire un numero maggiore di %s'
            },
            grid: {
                'default': 'Si prega di inserire un numero GRId valido'
            },
            hex: {
                'default': 'Si prega di inserire un numero esadecimale valido'
            },
            iban: {
                'default': 'Si prega di inserire un numero IBAN valido',
                country: 'Si prega di inserire un numero IBAN valido per %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirati Arabi Uniti',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia-Erzegovina',
                    BE: 'Belgio',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasile',
                    CH: 'Svizzera',
                    CI: 'Costa d\'Avorio',
                    CM: 'Cameron',
                    CR: 'Costa Rica',
                    CV: 'Capo Verde',
                    CY: 'Cipro',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    DO: 'Repubblica Domenicana',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    FO: 'Isole Faroe',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    GE: 'Georgia',
                    GI: 'Gibilterra',
                    GL: 'Groenlandia',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croazia',
                    HU: 'Ungheria',
                    IE: 'Irlanda',
                    IL: 'Israele',
                    IR: 'Iran',
                    IS: 'Islanda',
                    IT: 'Italia',
                    JO: 'Giordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Libano',
                    LI: 'Liechtenstein',
                    LT: 'Lituania',
                    LU: 'Lussemburgo',
                    LV: 'Lettonia',
                    MC: 'Monaco',
                    MD: 'Moldavia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambico',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PK: 'Pachistan',
                    PL: 'Polonia',
                    PS: 'Palestina',
                    PT: 'Portogallo',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turchia',
                    VG: 'Isole Vergini, Inghilterra'
                }
            },
            id: {
                'default': 'Si prega di inserire un numero di identificazione valido',
                country: 'Si prega di inserire un numero di identificazione valido per %s',
                countries: {
                    BA: 'Bosnia-Erzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CH: 'Svizzera',
                    CL: 'Chile',
                    CN: 'Cina',
                    CZ: 'Republica Ceca',
                    DK: 'Danimarca',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    HR: 'Croazia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    LT: 'Lituania',
                    LV: 'Lettonia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Paesi Bassi',
                    PL: 'Polonia',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    SM: 'San Marino',
                    TH: 'Thailandia',
                    ZA: 'Sudafrica'
                }
            },
            identical: {
                'default': 'Si prega di inserire un valore identico'
            },
            imei: {
                'default': 'Si prega di inserire un numero IMEI valido'
            },
            imo: {
                'default': 'Si prega di inserire un numero IMO valido'
            },
            integer: {
                'default': 'Si prega di inserire un numero valido'
            },
            ip: {
                'default': 'Please enter a valid IP address',
                ipv4: 'Si prega di inserire un indirizzo IPv4 valido',
                ipv6: 'Si prega di inserire un indirizzo IPv6 valido'
            },
            isbn: {
                'default': 'Si prega di inserire un numero ISBN valido'
            },
            isin: {
                'default': 'Si prega di inserire un numero ISIN valido'
            },
            ismn: {
                'default': 'Si prega di inserire un numero ISMN valido'
            },
            issn: {
                'default': 'Si prega di inserire un numero ISSN valido'
            },
            lessThan: {
                'default': 'Si prega di inserire un valore minore o uguale a %s',
                notInclusive: 'Si prega di inserire un valore minore di %s'
            },
            mac: {
                'default': 'Si prega di inserire un valido MAC address'
            },
            meid: {
                'default': 'Si prega di inserire un numero MEID valido'
            },
            notEmpty: {
                'default': 'Si prega di non lasciare il campo vuoto'
            },
            numeric: {
                'default': 'Si prega di inserire un numero con decimali valido'
            },
            phone: {
                'default': 'Si prega di inserire un numero di telefono valido',
                country: 'Si prega di inserire un numero di telefono valido per %s',
                countries: {
                    AE: 'Emirati Arabi Uniti',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CN: 'Cina',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    ES: 'Spagna',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    IN: 'India',
                    MA: 'Marocco',
                    NL: 'Olanda',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Russia',
                    SK: 'Slovacchia',
                    TH: 'Thailandia',
                    US: 'Stati Uniti d\'America',
                    VE: 'Venezuelano'
                }
            },
            regexp: {
                'default': 'Inserisci un valore che corrisponde al modello'
            },
            remote: {
                'default': 'Si prega di inserire un valore valido'
            },
            rtn: {
                'default': 'Si prega di inserire un numero RTN valido'
            },
            sedol: {
                'default': 'Si prega di inserire un numero SEDOL valido'
            },
            siren: {
                'default': 'Si prega di inserire un numero SIREN valido'
            },
            siret: {
                'default': 'Si prega di inserire un numero SIRET valido'
            },
            step: {
                'default': 'Si prega di inserire uno step valido di %s'
            },
            stringCase: {
                'default': 'Si prega di inserire solo caratteri minuscoli',
                upper: 'Si prega di inserire solo caratteri maiuscoli'
            },
            stringLength: {
                'default': 'Si prega di inserire un valore con lunghezza valida',
                less: 'Si prega di inserire meno di %s caratteri',
                more: 'Si prega di inserire piu di %s caratteri',
                between: 'Si prega di inserire un numero di caratteri compreso tra  %s e %s'
            },
            uri: {
                'default': 'Si prega di inserire un URI valido'
            },
            uuid: {
                'default': 'Si prega di inserire un numero UUID valido',
                version: 'Si prega di inserire un numero di versione UUID %s valido'
            },
            vat: {
                'default': 'Si prega di inserire un valore di IVA valido',
                country: 'Si prega di inserire un valore di IVA valido per %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgio',
                    BG: 'Bulgaria',
                    BR: 'Brasiliano',
                    CH: 'Svizzera',
                    CY: 'Cipro',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    EE: 'Estonia',
                    ES: 'Spagna',
                    FI: 'Finlandia',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Ungheria',
                    HR: 'Croazia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Lussemburgo',
                    LV: 'Lettonia',
                    MT: 'Malta',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PL: 'Polonia',
                    PT: 'Portogallo',
                    RO: 'Romania',
                    RU: 'Russia',
                    RS: 'Serbia',
                    SE: 'Svezia',
                    SI: 'Slovenia',
                    SK: 'Slovacchia',
                    VE: 'Venezuelano',
                    ZA: 'Sud Africano'
                }
            },
            vin: {
                'default': 'Si prega di inserire un numero VIN valido'
            },
            zipCode: {
                'default': 'Si prega di inserire un codice postale valido',
                country: 'Si prega di inserire un codice postale valido per %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brasile',
                    CA: 'Canada',
                    CH: 'Svizzera',
                    CZ: 'Republica Ceca',
                    DE: 'Germania',
                    DK: 'Danimarca',
                    ES: 'Spagna',
                    FR: 'Francia',
                    GB: 'Regno Unito',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marocco',
                    NL: 'Paesi Bassi',
                    PL: 'Polonia',
                    PT: 'Portogallo',
                    RO: 'Romania',
                    RU: 'Russia',
                    SE: 'Svezia',
                    SG: 'Singapore',
                    SK: 'Slovacchia',
                    US: 'Stati Uniti d\'America'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Japanese language package
     * Translated by @tsuyoshifujii
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ja_JP': {
            base64: {
                'default': '有効なBase64エンコードを入力してください'
            },
            between: {
                'default': '%sから%sの間で入力してください',
                notInclusive: '厳密に%sから%sの間で入力してください'
            },
            bic: {
                'default': '有効なBICコードを入力してください'
            },
            callback: {
                'default': '有効な値を入力してください'
            },
            choice: {
                'default': '有効な値を入力してください',
                less: '最低でも%sを選択してください',
                more: '最大でも%sを選択してください',
                between: '%s - %s で選択してください'
            },
            color: {
                'default': '有効なカラーコードを入力してください'
            },
            creditCard: {
                'default': '有効なクレジットカード番号を入力してください'
            },
            cusip: {
                'default': '有効なCUSIP番号を入力してください'
            },
            cvv: {
                'default': '有効なCVV番号を入力してください'
            },
            date: {
                'default': '有効な日付を入力してください',
                min: '%s 後に有効な日付を入力してください',
                max: '%s の前に有効な日付を入力してください',
                range: '%s - %s の間に有効な日付を入力してください'
            },
            different: {
                'default': '異なる値を入力してください'
            },
            digits: {
                'default': '数字のみで入力してください'
            },
            ean: {
                'default': '有効なEANコードを入力してください'
            },
            ein: {
                'default': '有効なEINコードを入力してください'
            },
            emailAddress: {
                'default': '有効なメールアドレスを入力してください'
            },
            file: {
                'default': '有効なファイルを選択してください'
            },
            greaterThan: {
                'default': '%sより大きい値を入力してください',
                notInclusive: '%sより大きい値を入力してください'
            },
            grid: {
                'default': '有効なGRIdコードを入力してください'
            },
            hex: {
                'default': '有効な16進数を入力してください。'
            },
            iban: {
                'default': '有効なIBANコードを入力してください',
                country: '有効な%sのIBANコードを入力してください',
                countries: {
                    AD: 'アンドラ',
                    AE: 'アラブ首長国連邦',
                    AL: 'アルバニア',
                    AO: 'アンゴラ',
                    AT: 'オーストリア',
                    AZ: 'アゼルバイジャン',
                    BA: 'ボスニア·ヘルツェゴビナ',
                    BE: 'ベルギー',
                    BF: 'ブルキナファソ',
                    BG: 'ブルガリア',
                    BH: 'バーレーン',
                    BI: 'ブルンジ',
                    BJ: 'ベナン',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CI: '象牙海岸',
                    CM: 'カメルーン',
                    CR: 'コスタリカ',
                    CV: 'カーボベルデ',
                    CY: 'キプロス',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    DO: 'ドミニカ共和国',
                    DZ: 'アルジェリア',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    FO: 'フェロー諸島',
                    FR: 'フランス',
                    GB: 'イギリス',
                    GE: 'グルジア',
                    GI: 'ジブラルタル',
                    GL: 'グリーンランド',
                    GR: 'ギリシャ',
                    GT: 'グアテマラ',
                    HR: 'クロアチア',
                    HU: 'ハンガリー',
                    IE: 'アイルランド',
                    IL: 'イスラエル',
                    IR: 'イラン',
                    IS: 'アイスランド',
                    IT: 'イタリア',
                    JO: 'ヨルダン',
                    KW: 'クウェート',
                    KZ: 'カザフスタン',
                    LB: 'レバノン',
                    LI: 'リヒテンシュタイン',
                    LT: 'リトアニア',
                    LU: 'ルクセンブルグ',
                    LV: 'ラトビア',
                    MC: 'モナコ',
                    MD: 'モルドバ',
                    ME: 'モンテネグロ',
                    MG: 'マダガスカル',
                    MK: 'マケドニア',
                    ML: 'マリ',
                    MR: 'モーリタニア',
                    MT: 'マルタ',
                    MU: 'モーリシャス',
                    MZ: 'モザンビーク',
                    NL: 'オランダ',
                    NO: 'ノルウェー',
                    PK: 'パキスタン',
                    PL: 'ポーランド',
                    PS: 'パレスチナ',
                    PT: 'ポルトガル',
                    QA: 'カタール',
                    RO: 'ルーマニア',
                    RS: 'セルビア',
                    SA: 'サウジアラビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    SM: 'サン·マリノ',
                    SN: 'セネガル',
                    TN: 'チュニジア',
                    TR: 'トルコ',
                    VG: '英領バージン諸島'
                }
            },
            id: {
                'default': '有効なIDを入力してください',
                country: '有効な%sのIDを入力してください',
                countries: {
                    BA: 'スニア·ヘルツェゴビナ',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CL: 'チリ',
                    CN: 'チャイナ',
                    CZ: 'チェコ共和国',
                    DK: 'デンマーク',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    HR: 'クロアチア',
                    IE: 'アイルランド',
                    IS: 'アイスランド',
                    LT: 'リトアニア',
                    LV: 'ラトビア',
                    ME: 'モンテネグロ',
                    MK: 'マケドニア',
                    NL: 'オランダ',
                    PL: 'ポーランド',
                    RO: 'ルーマニア',
                    RS: 'セルビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    SM: 'サン·マリノ',
                    TH: 'タイ国',
                    ZA: '南アフリカ'
                }
            },
            identical: {
                'default': '同じ値を入力してください'
            },
            imei: {
                'default': '有効なIMEIを入力してください'
            },
            imo: {
                'default': '有効なIMOを入力してください'
            },
            integer: {
                'default': '有効な数値を入力してください'
            },
            ip: {
                'default': '有効なIPアドレスを入力してください',
                ipv4: '有効なIPv4アドレスを入力してください',
                ipv6: '有効なIPv6アドレスを入力してください'
            },
            isbn: {
                'default': '有効なISBN番号を入力してください'
            },
            isin: {
                'default': '有効なISIN番号を入力してください'
            },
            ismn: {
                'default': '有効なISMN番号を入力してください'
            },
            issn: {
                'default': '有効なISSN番号を入力してください'
            },
            lessThan: {
                'default': '%s未満の値を入力してください',
                notInclusive: '%s未満の値を入力してください'
            },
            mac: {
                'default': '有効なMACアドレスを入力してください'
            },
            meid: {
                'default': '有効なMEID番号を入力してください'
            },
            notEmpty: {
                'default': '値を入力してください'
            },
            numeric: {
                'default': '有効な浮動小数点数値を入力してください。'
            },
            phone: {
                'default': '有効な電話番号を入力してください',
                country: '有効な%sの電話番号を入力してください',
                countries: {
                    AE: 'アラブ首長国連邦',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CN: 'チャイナ',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    ES: 'スペイン',
                    FR: 'フランス',
                    GB: 'イギリス',
                    IN: 'インド',
                    MA: 'モロッコ',
                    NL: 'オランダ',
                    PK: 'パキスタン',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    SK: 'スロバキア',
                    TH: 'タイ国',
                    US: 'アメリカ',
                    VE: 'ベネズエラ'
                }
            },
            regexp: {
                'default': '正規表現に一致する値を入力してください'
            },
            remote: {
                'default': '有効な値を入力してください。'
            },
            rtn: {
                'default': '有効なRTN番号を入力してください'
            },
            sedol: {
                'default': '有効なSEDOL番号を入力してください'
            },
            siren: {
                'default': '有効なSIREN番号を入力してください'
            },
            siret: {
                'default': '有効なSIRET番号を入力してください'
            },
            step: {
                'default': '%sの有効なステップを入力してください'
            },
            stringCase: {
                'default': '小文字のみで入力してください',
                upper: '大文字のみで入力してください'
            },
            stringLength: {
                'default': '有効な長さの値を入力してください',
                less: '%s文字未満で入力してください',
                more: '%s文字より大きく入力してください',
                between: '%s文字から%s文字の間で入力してください'
            },
            uri: {
                'default': '有効なURIを入力してください。'
            },
            uuid: {
                'default': '有効なUUIDを入力してください',
                version: '有効なバージョン%s UUIDを入力してください'
            },
            vat: {
                'default': '有効なVAT番号を入力してください',
                country: '有効な%sのVAT番号を入力してください',
                countries: {
                    AT: 'オーストリア',
                    BE: 'ベルギー',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CH: 'スイス',
                    CY: 'キプロス等',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    EE: 'エストニア',
                    ES: 'スペイン',
                    FI: 'フィンランド',
                    FR: 'フランス',
                    GB: 'イギリス',
                    GR: 'ギリシャ',
                    EL: 'ギリシャ',
                    HU: 'ハンガリー',
                    HR: 'クロアチア',
                    IE: 'アイルランド',
                    IS: 'アイスランド',
                    IT: 'イタリア',
                    LT: 'リトアニア',
                    LU: 'ルクセンブルグ',
                    LV: 'ラトビア',
                    MT: 'マルタ',
                    NL: 'オランダ',
                    NO: 'ノルウェー',
                    PL: 'ポーランド',
                    PT: 'ポルトガル',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    RS: 'セルビア',
                    SE: 'スウェーデン',
                    SI: 'スロベニア',
                    SK: 'スロバキア',
                    VE: 'ベネズエラ',
                    ZA: '南アフリカ'
                }
            },
            vin: {
                'default': '有効なVIN番号を入力してください'
            },
            zipCode: {
                'default': '有効な郵便番号を入力してください',
                country: '有効な%sの郵便番号を入力してください',
                countries: {
                    AT: 'オーストリア',
                    BG: 'ブルガリア',
                    BR: 'ブラジル',
                    CA: 'カナダ',
                    CH: 'スイス',
                    CZ: 'チェコ共和国',
                    DE: 'ドイツ',
                    DK: 'デンマーク',
                    ES: 'スペイン',
                    FR: 'フランス',
                    GB: 'イギリス',
                    IE: 'アイルランド',
                    IN: 'インド',
                    IT: 'イタリア',
                    MA: 'モロッコ',
                    NL: 'オランダ',
                    PL: 'ポーランド',
                    PT: 'ポルトガル',
                    RO: 'ルーマニア',
                    RU: 'ロシア',
                    SE: 'スウェーデン',
                    SG: 'シンガポール',
                    SK: 'スロバキア',
                    US: 'アメリカ'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * The Dutch language package
     * Translated by @jvanderheide
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'nl_NL': {
            base64: {
                'default': 'Voer een geldige Base64 geëncodeerde tekst in'
            },
            between: {
                'default': 'Voer een waarde in van %s tot en met %s',
                notInclusive: 'Voer een waarde die tussen %s en %s ligt'
            },
            bic: {
                'default': 'Voer een geldige BIC-code in'
            },
            callback: {
                'default': 'Voer een geldige waarde in'
            },
            choice: {
                'default': 'Voer een geldige waarde in',
                less: 'Kies minimaal %s optie(s)',
                more: 'Kies maximaal %s opties',
                between: 'Kies tussen de %s - %s opties'
            },
            color: {
                'default': 'Voer een geldige kleurcode in'
            },
            creditCard: {
                'default': 'Voer een geldig creditcardnummer in'
            },
            cusip: {
                'default': 'Voer een geldig CUSIP-nummer in'
            },
            cvv: {
                'default': 'Voer een geldig CVV-nummer in'
            },
            date: {
                'default': 'Voer een geldige datum in',
                min: 'Voer een datum in die na %s ligt',
                max: 'Voer een datum in die vóór %s ligt',
                range: 'Voer een datum in die tussen %s en %s ligt'
            },
            different: {
                'default': 'Voer een andere waarde in'
            },
            digits: {
                'default': 'Voer enkel cijfers in'
            },
            ean: {
                'default': 'Voer een geldige EAN-code in'
            },
            ein: {
                'default': 'Voer een geldige EIN-code in'
            },
            emailAddress: {
                'default': 'Voer een geldig e-mailadres in'
            },
            file: {
                'default': 'Kies een geldig bestand'
            },
            greaterThan: {
                'default': 'Voer een waarde in die gelijk is aan of groter is dan %s',
                notInclusive: 'Voer een waarde in die is groter dan %s'
            },
            grid: {
                'default': 'Voer een geldig GRId-nummer in'
            },
            hex: {
                'default': 'Voer een geldig hexadecimaal nummer in'
            },
            iban: {
                'default': 'Voer een geldig IBAN nummer in',
                country: 'Voer een geldig IBAN nummer in uit %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Verenigde Arabische Emiraten',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Oostenrijk',
                    AZ: 'Azerbeidzjan',
                    BA: 'Bosnië en Herzegovina',
                    BE: 'België',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarije"',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CI: 'Ivoorkust',
                    CM: 'Kameroen',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    DO: 'Dominicaanse Republiek',
                    DZ: 'Algerije',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FO: 'Faeröer',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenland',
                    GR: 'Griekenland',
                    GT: 'Guatemala',
                    HR: 'Kroatië',
                    HU: 'Hongarije',
                    IE: 'Ierland',
                    IL: 'Israël',
                    IR: 'Iran',
                    IS: 'IJsland',
                    IT: 'Italië',
                    JO: 'Jordan',
                    KW: 'Koeweit',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MC: 'Monaco',
                    MD: 'Moldavië',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonië',
                    ML: 'Mali',
                    MR: 'Mauretanië',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestijnse',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SA: 'Saudi-Arabië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunesië',
                    TR: 'Turkije',
                    VG: 'Britse Maagdeneilanden'
                }
            },
            id: {
                'default': 'Voer een geldig identificatie nummer in',
                country: 'Voer een geldig identificatie nummer in uit %s',
                countries: {
                    BA: 'Bosnië en Herzegovina',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CL: 'Chili',
                    CN: 'China',
                    CZ: 'Tsjechische Republiek',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    LT: 'Litouwen',
                    LV: 'Letland',
                    ME: 'Montenegro',
                    MK: 'Macedonië',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Roemenië',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Zuid-Afrika'
                }
            },
            identical: {
                'default': 'Voer dezelfde waarde in'
            },
            imei: {
                'default': 'Voer een geldig IMEI-nummer in'
            },
            imo: {
                'default': 'Voer een geldig IMO-nummer in'
            },
            integer: {
                'default': 'Voer een geldig getal in'
            },
            ip: {
                'default': 'Voer een geldig IP adres in',
                ipv4: 'Voer een geldig IPv4 adres in',
                ipv6: 'Voer een geldig IPv6 adres in'
            },
            isbn: {
                'default': 'Voer een geldig ISBN-nummer in'
            },
            isin: {
                'default': 'Voer een geldig ISIN-nummer in'
            },
            ismn: {
                'default': 'Voer een geldig ISMN-nummer in'
            },
            issn: {
                'default': 'Voer een geldig ISSN-nummer in'
            },
            lessThan: {
                'default': 'Voer een waarde in gelijk aan of kleiner dan %s',
                notInclusive: 'Voer een waarde in kleiner dan %s'
            },
            mac: {
                'default': 'Voer een geldig MAC adres in'
            },
            meid: {
                'default': 'Voer een geldig MEID-nummer in'
            },
            notEmpty: {
                'default': 'Voer een waarde in'
            },
            numeric: {
                'default': 'Voer een geldig kommagetal in'
            },
            phone: {
                'default': 'Voer een geldig telefoonnummer in',
                country: 'Voer een geldig telefoonnummer in uit %s',
                countries: {
                    AE: 'Verenigde Arabische Emiraten',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CN: 'China',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IN: 'Indië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SK: 'Slowakije',
                    TH: 'Thailand',
                    US: 'VS',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Voer een waarde in die overeenkomt met het patroon'
            },
            remote: {
                'default': 'Voer een geldige waarde in'
            },
            rtn: {
                'default': 'Voer een geldig RTN-nummer in'
            },
            sedol: {
                'default': 'Voer een geldig SEDOL-nummer in'
            },
            siren: {
                'default': 'Voer een geldig SIREN-nummer in'
            },
            siret: {
                'default': 'Voer een geldig SIRET-nummer in'
            },
            step: {
                'default': 'Voer een meervoud van %s in'
            },
            stringCase: {
                'default': 'Voer enkel kleine letters in',
                upper: 'Voer enkel hoofdletters in'
            },
            stringLength: {
                'default': 'Voer een waarde met de juiste lengte in',
                less: 'Voer minder dan %s karakters in',
                more: 'Voer meer dan %s karakters in',
                between: 'Voer tussen tussen %s en %s karakters in'
            },
            uri: {
                'default': 'Voer een geldige link in'
            },
            uuid: {
                'default': 'Voer een geldige UUID in',
                version: 'Voer een geldige UUID (versie %s) in'
            },
            vat: {
                'default': 'Voer een geldig BTW-nummer in',
                country: 'Voer een geldig BTW-nummer in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BE: 'België',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CH: 'Zwitserland',
                    CY: 'Cyprus',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    EE: 'Estland',
                    ES: 'Spanje',
                    FI: 'Finland',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    GR: 'Griekenland',
                    EL: 'Griekenland',
                    HU: 'Hongarije',
                    HR: 'Kroatië',
                    IE: 'Ierland',
                    IS: 'IJsland',
                    IT: 'Italië',
                    LT: 'Litouwen',
                    LU: 'Luxemburg',
                    LV: 'Letland',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Noorwegen',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    RS: 'Servië',
                    SE: 'Zweden',
                    SI: 'Slovenië',
                    SK: 'Slowakije',
                    VE: 'Venezuela',
                    ZA: 'Zuid-Afrika'
                }
            },
            vin: {
                'default': 'Voer een geldig VIN-nummer in'
            },
            zipCode: {
                'default': 'Voer een geldige postcode in',
                country: 'Voer een geldige postcode in uit %s',
                countries: {
                    AT: 'Oostenrijk',
                    BG: 'Bulgarije',
                    BR: 'Brazilië',
                    CA: 'Canada',
                    CH: 'Zwitserland',
                    CZ: 'Tsjechische Republiek',
                    DE: 'Duitsland',
                    DK: 'Denemarken',
                    ES: 'Spanje',
                    FR: 'Frankrijk',
                    GB: 'Verenigd Koninkrijk',
                    IE: 'Ierland',
                    IN: 'Indië',
                    IT: 'Italië',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Roemenië',
                    RU: 'Rusland',
                    SE: 'Zweden',
                    SG: 'Singapore',
                    SK: 'Slowakije',
                    US: 'VS'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Norwegian language package
     * Translated by @trondulseth
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'no_NO': {
            base64: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig base64-kodet verdi'
            },
            between: {
                'default': 'Vennligst fyll ut dette feltet med en verdi mellom %s og %s',
                notInclusive: 'Vennligst tast inn kun en verdi mellom %s og %s'
            },
            bic: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig BIC-nummer'
            },
            callback: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi'
            },
            choice: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi',
                less: 'Vennligst velg minst %s valgmuligheter',
                more: 'Vennligst velg maks %s valgmuligheter',
                between: 'Vennligst velg %s - %s valgmuligheter'
            },
            color: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig'
            },
            creditCard: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig kreditkortnummer'
            },
            cusip: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig CUSIP-nummer'
            },
            cvv: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig CVV-nummer'
            },
            date: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig dato',
                min: 'Vennligst fyll ut dette feltet med en gyldig dato etter %s',
                max: 'Vennligst fyll ut dette feltet med en gyldig dato før %s',
                range: 'Vennligst fyll ut dette feltet med en gyldig dato mellom %s - %s'
            },
            different: {
                'default': 'Vennligst fyll ut dette feltet med en annen verdi'
            },
            digits: {
                'default': 'Vennligst tast inn kun sifre'
            },
            ean: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig EAN-nummer'
            },
            ein: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig EIN-nummer'
            },
            emailAddress: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig epostadresse'
            },
            file: {
                'default': 'Velg vennligst en gyldig fil'
            },
            greaterThan: {
                'default': 'Vennligst fyll ut dette feltet med en verdi større eller lik %s',
                notInclusive: 'Vennligst fyll ut dette feltet med en verdi større enn %s'
            },
            grid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig GRIDnummer'
            },
            hex: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig hexadecimalt nummer'
            },
            iban: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IBAN-nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'De Forente Arabiske Emirater',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Østerrike',
                    AZ: 'Aserbajdsjan',
                    BA: 'Bosnia-Hercegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Sveits',
                    CI: 'Elfenbenskysten',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Kapp Verde',
                    CY: 'Kypros',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Den dominikanske republikk',
                    DZ: 'Algerie',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    FO: 'Færøyene',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Grønland',
                    GR: 'Hellas',
                    GT: 'Guatemala',
                    HR: 'Kroatia',
                    HU: 'Ungarn',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italia',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kasakhstan',
                    LB: 'Libanon',
                    LI: 'Liechtenstein',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Nederland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Saudi-Arabia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Tyrkia',
                    VG: 'De Britiske Jomfruøyene'
                }
            },
            id: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig identifikasjons-nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig identifikasjons-nummer i %s',
                countries: {
                    BA: 'Bosnien-Hercegovina',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Sveits',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tsjekkia',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    HR: 'Kroatia',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Makedonia',
                    NL: 'Nederland',
                    PL: 'Polen',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Sør-Afrika'
                }
            },
            identical: {
                'default': 'Vennligst fyll ut dette feltet med den samme verdi'
            },
            imei: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IMEI-nummer'
            },
            imo: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig IMO-nummer'
            },
            integer: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig tall'
            },
            ip: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig IP adresse',
                ipv4: 'Vennligst fyll ut dette feltet med en gyldig IPv4 adresse',
                ipv6: 'Vennligst fyll ut dette feltet med en gyldig IPv6 adresse'
            },
            isbn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISBN-nummer'
            },
            isin: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISIN-nummer'
            },
            ismn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISMN-nummer'
            },
            issn: {
                'default': 'Vennligst fyll ut dette feltet med ett gyldig ISSN-nummer'
            },
            lessThan: {
                'default': 'Vennligst fyll ut dette feltet med en verdi mindre eller lik %s',
                notInclusive: 'Vennligst fyll ut dette feltet med en verdi mindre enn %s'
            },
            mac: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig MAC adresse'
            },
            meid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig MEID-nummer'
            },
            notEmpty: {
                'default': 'Vennligst fyll ut dette feltet'
            },
            numeric: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig flydende desimaltal'
            },
            phone: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig telefonnummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig telefonnummer i %s',
                countries: {
                    AE: 'De Forente Arabiske Emirater',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CN: 'Kina',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spania',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    IN: 'India',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PK: 'Pakistan',
                    RO: 'Rumenia',
                    RU: 'Russland',
                    SK: 'Slovakia',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Vennligst fyll ut dette feltet med en verdi som matcher mønsteret'
            },
            remote: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig verdi'
            },
            rtn: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig RTN-nummer'
            },
            sedol: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SEDOL-nummer'
            },
            siren: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SIREN-nummer'
            },
            siret: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig SIRET-nummer'
            },
            step: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig trin af %s'
            },
            stringCase: {
                'default': 'Venligst fyll inn dette feltet kun med små bokstaver',
                upper: 'Venligst fyll inn dette feltet kun med store bokstaver'
            },
            stringLength: {
                'default': 'Vennligst fyll ut dette feltet med en verdi af gyldig længde',
                less: 'Vennligst fyll ut dette feltet med mindre enn %s tegn',
                more: 'Vennligst fyll ut dette feltet med mer enn %s tegn',
                between: 'Vennligst fyll ut dette feltet med en verdi mellom %s og %s tegn'
            },
            uri: {
                'default': 'Vennligst fyll ut dette feltet med en gyldig URI'
            },
            uuid: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig UUID-nummer',
                version: 'Vennligst fyll ut dette feltet med en gyldig UUID version %s-nummer'
            },
            vat: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig MVA nummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig MVA nummer i %s',
                countries: {
                    AT: 'Østerrike',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spania',
                    FI: 'Finland',
                    FR: 'Frankrike',
                    GB: 'Storbritania',
                    GR: 'Hellas',
                    EL: 'Hellas',
                    HU: 'Ungarn',
                    HR: 'Kroatia',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italia',
                    LT: 'Litauen',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Nederland',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russland',
                    RS: 'Serbia',
                    SE: 'Sverige',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Sør-Afrika'
                }
            },
            vin: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig VIN-nummer'
            },
            zipCode: {
                'default': 'Vennligst fyll ut dette feltet med et gyldig postnummer',
                country: 'Vennligst fyll ut dette feltet med et gyldig postnummer i %s',
                countries: {
                    AT: 'Østerrike',
                    BG: 'Bulgaria',
                    BR: 'Brasil',
                    CA: 'Canada',
                    CH: 'Schweiz',
                    CZ: 'Tsjekkia',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spania',
                    FR: 'Frankrike',
                    GB: 'Storbritannia',
                    IE: 'Irland',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Marokko',
                    NL: 'Nederland',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Romania',
                    RU: 'Russland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Polish language package
     * Translated by @grzesiek
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pl_PL': {
            base64: {
                'default': 'Wpisz poprawny ciąg znaków zakodowany w base 64'
            },
            between: {
                'default': 'Wprowadź wartość pomiędzy %s i %s',
                notInclusive: 'Wprowadź wartość pomiędzy %s i %s (zbiór otwarty)'
            },
            bic: {
                'default': 'Wprowadź poprawny numer BIC'
            },
            callback: {
                'default': 'Wprowadź poprawną wartość'
            },
            choice: {
                'default': 'Wprowadź poprawną wartość',
                less: 'Wybierz przynajmniej %s opcji',
                more: 'Wybierz maksymalnie %s opcji',
                between: 'Wybierz przynajmniej %s i maksymalnie %s opcji'
            },
            color: {
                'default': 'Wprowadź poprawny kolor w formacie'
            },
            creditCard: {
                'default': 'Wprowadź poprawny numer karty kredytowej'
            },
            cusip: {
                'default': 'Wprowadź poprawny numer CUSIP'
            },
            cvv: {
                'default': 'Wprowadź poprawny numer CVV'
            },
            date: {
                'default': 'Wprowadź poprawną datę',
                min: 'Wprowadź datę po %s',
                max: 'Wprowadź datę przed  %s',
                range: 'Wprowadź datę pomiędzy %s i %s'
            },
            different: {
                'default': 'Wprowadź inną wartość'
            },
            digits: {
                'default': 'Wprowadź tylko cyfry'
            },
            ean: {
                'default': 'Wprowadź poprawny numer EAN'
            },
            ein: {
                'default': 'Wprowadź poprawny numer EIN'
            },
            emailAddress: {
                'default': 'Wprowadź poprawny adres e-mail'
            },
            file: {
                'default': 'Wybierz prawidłowy plik'
            },
            greaterThan: {
                'default': 'Wprowadź wartość większą bądź równą %s',
                notInclusive: 'Wprowadź wartość większą niż %s'
            },
            grid: {
                'default': 'Wprowadź poprawny numer GRId'
            },
            hex: {
                'default': 'Wprowadź poprawną liczbę w formacie heksadecymalnym'
            },
            iban: {
                'default': 'Wprowadź poprawny numer IBAN',
                country: 'Wprowadź poprawny numer IBAN w kraju %s',
                countries: {
                    AD: 'Andora',
                    AE: 'Zjednoczone Emiraty Arabskie',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbejdżan',
                    BA: 'Bośnia i Hercegowina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bułgaria',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CI: 'Wybrzeże Kości Słoniowej',
                    CM: 'Kamerun',
                    CR: 'Kostaryka',
                    CV: 'Republika Zielonego Przylądka',
                    CY: 'Cypr',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    DO: 'Dominikana',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    FO: 'Wyspy Owcze',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    GE: 'Gruzja',
                    GI: 'Gibraltar',
                    GL: 'Grenlandia',
                    GR: 'Grecja',
                    GT: 'Gwatemala',
                    HR: 'Chorwacja',
                    HU: 'Węgry',
                    IE: 'Irlandia',
                    IL: 'Izrael',
                    IR: 'Iran',
                    IS: 'Islandia',
                    IT: 'Włochy',
                    JO: 'Jordania',
                    KW: 'Kuwejt',
                    KZ: 'Kazahstan',
                    LB: 'Liban',
                    LI: 'Liechtenstein',
                    LT: 'Litwa',
                    LU: 'Luksemburg',
                    LV: 'Łotwa',
                    MC: 'Monako',
                    MD: 'Mołdawia',
                    ME: 'Czarnogóra',
                    MG: 'Madagaskar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauretania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Holandia',
                    NO: 'Norwegia',
                    PK: 'Pakistan',
                    PL: 'Polska',
                    PS: 'Palestyna',
                    PT: 'Portugalia',
                    QA: 'Katar',
                    RO: 'Rumunia',
                    RS: 'Serbia',
                    SA: 'Arabia Saudyjska',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunezja',
                    TR: 'Turcja',
                    VG: 'Brytyjskie Wyspy Dziewicze'
                }
            },
            id: {
                'default': 'Wprowadź poprawny numer identyfikacyjny',
                country: 'Wprowadź poprawny numer identyfikacyjny w kraju %s',
                countries: {
                    BA: 'Bośnia i Hercegowina',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CL: 'Chile',
                    CN: 'Chiny',
                    CZ: 'Czechy',
                    DK: 'Dania',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    HR: 'Chorwacja',
                    IE: 'Irlandia',
                    IS: 'Islandia',
                    LT: 'Litwa',
                    LV: 'Łotwa',
                    ME: 'Czarnogóra',
                    MK: 'Macedonia',
                    NL: 'Holandia',
                    PL: 'Polska',
                    RO: 'Rumunia',
                    RS: 'Serbia',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    SM: 'San Marino',
                    TH: 'Tajlandia',
                    ZA: 'Republika Południowej Afryki'
                }
            },
            identical: {
                'default': 'Wprowadź taką samą wartość'
            },
            imei: {
                'default': 'Wprowadź poprawny numer IMEI'
            },
            imo: {
                'default': 'Wprowadź poprawny numer IMO'
            },
            integer: {
                'default': 'Wprowadź poprawną liczbę całkowitą'
            },
            ip: {
                'default': 'Wprowadź poprawny adres IP',
                ipv4: 'Wprowadź poprawny adres IPv4',
                ipv6: 'Wprowadź poprawny adres IPv6'
            },
            isbn: {
                'default': 'Wprowadź poprawny numer ISBN'
            },
            isin: {
                'default': 'Wprowadź poprawny numer ISIN'
            },
            ismn: {
                'default': 'Wprowadź poprawny numer ISMN'
            },
            issn: {
                'default': 'Wprowadź poprawny numer ISSN'
            },
            lessThan: {
                'default': 'Wprowadź wartość mniejszą bądź równą %s',
                notInclusive: 'Wprowadź wartość mniejszą niż %s'
            },
            mac: {
                'default': 'Wprowadź poprawny adres MAC'
            },
            meid: {
                'default': 'Wprowadź poprawny numer MEID'
            },
            notEmpty: {
                'default': 'Wprowadź wartość, pole nie może być puste'
            },
            numeric: {
                'default': 'Wprowadź poprawną liczbę zmiennoprzecinkową'
            },
            phone: {
                'default': 'Wprowadź poprawny numer telefonu',
                country: 'Wprowadź poprawny numer telefonu w kraju %s',
                countries: {
                    AE: 'Zjednoczone Emiraty Arabskie',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CN: 'Chiny',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    ES: 'Hiszpania',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    IN: 'Indie',
                    MA: 'Maroko',
                    NL: 'Holandia',
                    PK: 'Pakistan',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    SK: 'Słowacja',
                    TH: 'Tajlandia',
                    US: 'USA',
                    VE: 'Wenezuela'
                }
            },
            regexp: {
                'default': 'Wprowadź wartość pasującą do wzoru'
            },
            remote: {
                'default': 'Wprowadź poprawną wartość'
            },
            rtn: {
                'default': 'Wprowadź poprawny numer RTN'
            },
            sedol: {
                'default': 'Wprowadź poprawny numer SEDOL'
            },
            siren: {
                'default': 'Wprowadź poprawny numer SIREN'
            },
            siret: {
                'default': 'Wprowadź poprawny numer SIRET'
            },
            step: {
                'default': 'Wprowadź wielokrotność %s'
            },
            stringCase: {
                'default': 'Wprowadź tekst składającą się tylko z małych liter',
                upper: 'Wprowadź tekst składający się tylko z dużych liter'
            },
            stringLength: {
                'default': 'Wprowadź wartość o poprawnej długości',
                less: 'Wprowadź mniej niż %s znaków',
                more: 'Wprowadź więcej niż %s znaków',
                between: 'Wprowadź wartość składająca się z min %s i max %s znaków'
            },
            uri: {
                'default': 'Wprowadź poprawny URI'
            },
            uuid: {
                'default': 'Wprowadź poprawny numer UUID',
                version: 'Wprowadź poprawny numer UUID w wersji %s'
            },
            vat: {
                'default': 'Wprowadź poprawny numer VAT',
                country: 'Wprowadź poprawny numer VAT w kraju %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgia',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CH: 'Szwajcaria',
                    CY: 'Cypr',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    EE: 'Estonia',
                    ES: 'Hiszpania',
                    FI: 'Finlandia',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    GR: 'Grecja',
                    EL: 'Grecja',
                    HU: 'Węgry',
                    HR: 'Chorwacja',
                    IE: 'Irlandia',
                    IS: 'Islandia',
                    IT: 'Włochy',
                    LT: 'Litwa',
                    LU: 'Luksemburg',
                    LV: 'Łotwa',
                    MT: 'Malta',
                    NL: 'Holandia',
                    NO: 'Norwegia',
                    PL: 'Polska',
                    PT: 'Portugalia',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    RS: 'Serbia',
                    SE: 'Szwecja',
                    SI: 'Słowenia',
                    SK: 'Słowacja',
                    VE: 'Wenezuela',
                    ZA: 'Republika Południowej Afryki'
                }
            },
            vin: {
                'default': 'Wprowadź poprawny numer VIN'
            },
            zipCode: {
                'default': 'Wprowadź poprawny kod pocztowy',
                country: 'Wprowadź poprawny kod pocztowy w kraju %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bułgaria',
                    BR: 'Brazylia',
                    CA: 'Kanada',
                    CH: 'Szwajcaria',
                    CZ: 'Czechy',
                    DE: 'Niemcy',
                    DK: 'Dania',
                    ES: 'Hiszpania',
                    FR: 'Francja',
                    GB: 'Wielka Brytania',
                    IE: 'Irlandia',
                    IN: 'Indie',
                    IT: 'Włochy',
                    MA: 'Maroko',
                    NL: 'Holandia',
                    PL: 'Polska',
                    PT: 'Portugalia',
                    RO: 'Rumunia',
                    RU: 'Rosja',
                    SE: 'Szwecja',
                    SG: 'Singapur',
                    SK: 'Słowacja',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function ($) {
    /**
     * Portuguese (Brazil) language package
     * Translated by @marcuscarvalho6. Improved by @dgmike
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pt_BR': {
            base64: {
                'default': 'Por favor insira um código base 64 válido'
            },
            between: {
                'default': 'Por favor insira um valor entre %s e %s',
                notInclusive: 'Por favor insira um valor estritamente entre %s e %s'
            },
            bic: {
                'default': 'Por favor insira um número BIC válido'
            },
            callback: {
                'default': 'Por favor insira um valor válido'
            },
            choice: {
                'default': 'Por favor insira um valor válido',
                less: 'Por favor escolha %s opções no mínimo',
                more: 'Por favor escolha %s opções no máximo',
                between: 'Por favor escolha de %s a %s opções'
            },
            color: {
                'default': 'Por favor insira uma cor válida'
            },
            creditCard: {
                'default': 'Por favor insira um número de cartão de crédito válido'
            },
            cusip: {
                'default': 'Por favor insira um número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor insira um número CVV válido'
            },
            date: {
                'default': 'Por favor insira uma data válida',
                min: 'Por favor insira uma data posterior a %s',
                max: 'Por favor insira uma data anterior a %s',
                range: 'Por favor insira uma data entre %s e %s'
            },
            different: {
                'default': 'Por favor insira valores diferentes'
            },
            digits: {
                'default': 'Por favor insira somente dígitos'
            },
            ean: {
                'default': 'Por favor insira um número EAN válido'
            },
            ein: {
                'default': 'Por favor insira um número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor insira um email válido'
            },
            file: {
                'default': 'Por favor escolha um arquivo válido'
            },
            greaterThan: {
                'default': 'Por favor insira um valor maior ou igual a %s',
                notInclusive: 'Por favor insira um valor maior do que %s'
            },
            grid: {
                'default': 'Por favor insira uma GRID válida'
            },
            hex: {
                'default': 'Por favor insira um hexadecimal válido'
            },
            iban: {
                'default': 'Por favor insira um número IBAN válido',
                country: 'Por favor insira um número IBAN válido em %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirados Árabes',
                    AL: 'Albânia',
                    AO: 'Angola',
                    AT: 'Áustria',
                    AZ: 'Azerbaijão',
                    BA: 'Bósnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgária',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    IC: 'Costa do Marfim',
                    CM: 'Camarões',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argélia',
                    EE: 'Estónia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FO: 'Ilhas Faroé',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlândia',
                    GR: 'Grécia',
                    GT: 'Guatemala',
                    HR: 'Croácia',
                    HU: 'Hungria',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Irão',
                    IS: 'Islândia',
                    TI: 'Itália',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Cazaquistão',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MC: 'Mônaco',
                    MD: 'Moldávia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedónia',
                    ML: 'Mali',
                    MR: 'Mauritânia',
                    MT: 'Malta',
                    MU: 'Maurício',
                    MZ: 'Moçambique',
                    NL: 'Países Baixos',
                    NO: 'Noruega',
                    PK: 'Paquistão',
                    PL: 'Polônia',
                    PS: 'Palestino',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SA: 'Arábia Saudita',
                    SE: 'Suécia',
                    SI: 'Eslovénia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Ilhas Virgens Britânicas'
                }
            },
            id: {
                'default': 'Por favor insira um código de identificação válido',
                country: 'Por favor insira um número de indentificação válido em %s',
                countries: {
                    BA: 'Bósnia e Herzegovina',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    LT: 'Lituânia',
                    LV: 'Letónia',
                    ME: 'Montenegro',
                    MK: 'Macedónia',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    TH: 'Tailândia',
                    ZA: 'África do Sul'
                }
            },
            identical: {
                'default': 'Por favor, insira o mesmo valor'
            },
            imei: {
                'default': 'Por favor insira um IMEI válido'
            },
            imo: {
                'default': 'Por favor insira um IMO válido'
            },
            integer: {
                'default': 'Por favor insira um número inteiro válido'
            },
            ip: {
                'default': 'Por favor insira um IP válido',
                ipv4: 'Por favor insira um endereço de IPv4 válido',
                ipv6: 'Por favor insira um endereço de IPv6 válido'
            },
            isbn: {
                'default': 'Por favor insira um ISBN válido'
            },
            isin: {
                'default': 'Por favor insira um ISIN válido'
            },
            ismn: {
                'default': 'Por favor insira um ISMN válido'
            },
            issn: {
                'default': 'Por favor insira um ISSN válido'
            },
            lessThan: {
                'default': 'Por favor insira um valor menor ou igual a %s',
                notInclusive: 'Por favor insira um valor menor do que %s'
            },
            mac: {
                'default': 'Por favor insira um endereço MAC válido'
            },
            meid: {
                'default': 'Por favor insira um MEID válido'
            },
            notEmpty: {
                'default': 'Por favor insira um valor'
            },
            numeric: {
                'default': 'Por favor insira um número real válido'
            },
            phone: {
                'default': 'Por favor insira um número de telefone válido',
                country: 'Por favor insira um número de telefone válido em %s',
                countries: {
                    AE: 'Emirados Árabes',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IN: 'Índia',
                    MA: 'Marrocos',
                    NL: 'Países Baixos',
                    PK: 'Paquistão',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SK: 'Eslováquia',
                    TH: 'Tailândia',
                    US: 'EUA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Por favor insira um valor correspondente ao padrão'
            },
            remote: {
                'default': 'Por favor insira um valor válido'
            },
            rtn: {
                'default': 'Por favor insira um número válido RTN'
            },
            sedol: {
                'default': 'Por favor insira um número válido SEDOL'
            },
            siren: {
                'default': 'Por favor insira um número válido SIREN'
            },
            siret: {
                'default': 'Por favor insira um número válido SIRET'
            },
            step: {
                'default': 'Por favor insira um passo válido %s'
            },
            stringCase: {
                'default': 'Por favor, digite apenas caracteres minúsculos',
                upper: 'Por favor, digite apenas caracteres maiúsculos'
            },
            stringLength: {
                'default': 'Por favor insira um valor com comprimento válido',
                less: 'Por favor insira menos de %s caracteres',
                more: 'Por favor insira mais de %s caracteres',
                between: 'Por favor insira um valor entre %s e %s caracteres'
            },
            uri: {
                'default': 'Por favor insira um URI válido'
            },
            uuid: {
                'default': 'Por favor insira um número válido UUID',
                version: 'Por favor insira uma versão %s  UUID válida'
            },
            vat: {
                'default': 'Por favor insira um VAT válido',
                country: 'Por favor insira um número VAT válido em %s',
                countries: {
                    AT: 'Áustria',
                    BE: 'Bélgica',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GR: 'Grécia',
                    EL: 'Grécia',
                    HU: 'Hungria',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    IT: 'Itália',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MT: 'Malta',
                    NL: 'Holanda',
                    NO: 'Norway',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    VE: 'Venezuela',
                    ZA: 'África do Sul'
                }
            },
            vin: {
                'default': 'Por favor insira um VIN válido'
            },
            zipCode: {
                'default': 'Por favor insira um código postal válido',
                country: 'Por favor insira um código postal válido em %s',
                countries: {
                    AT: 'Áustria',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suíça',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itália',
                    MA: 'Marrocos',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SE: 'Suécia',
                    SG: 'Cingapura',
                    SK: 'Eslováquia',
                    US: 'EUA'
                }
            }
        }
    });
}(jQuery));

(function ($) {
    /**
     * Portuguese (Portugal) language package
     * Translated by @rtbfreitas
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'pt_PT': {
            base64: {
                'default': 'Por favor insira um código base 64 válido'
            },
            between: {
                'default': 'Por favor insira um valor entre %s e %s',
                notInclusive: 'Por favor insira um valor estritamente entre %s e %s'
            },
            bic: {
                'default': 'Por favor insira um número BIC válido'
            },
            callback: {
                'default': 'Por favor insira um valor válido'
            },
            choice: {
                'default': 'Por favor insira um valor válido',
                less: 'Por favor escolha %s opções no mínimo',
                more: 'Por favor escolha %s opções no máximo',
                between: 'Por favor escolha de %s a %s opções'
            },
            color: {
                'default': 'Por favor insira uma cor válida'
            },
            creditCard: {
                'default': 'Por favor insira um número de cartão de crédito válido'
            },
            cusip: {
                'default': 'Por favor insira um número CUSIP válido'
            },
            cvv: {
                'default': 'Por favor insira um número CVV válido'
            },
            date: {
                'default': 'Por favor insira uma data válida',
                min: 'Por favor insira uma data posterior a %s',
                max: 'Por favor insira uma data anterior a %s',
                range: 'Por favor insira uma data entre %s e %s'
            },
            different: {
                'default': 'Por favor insira valores diferentes'
            },
            digits: {
                'default': 'Por favor insira somente dígitos'
            },
            ean: {
                'default': 'Por favor insira um número EAN válido'
            },
            ein: {
                'default': 'Por favor insira um número EIN válido'
            },
            emailAddress: {
                'default': 'Por favor insira um email válido'
            },
            file: {
                'default': 'Por favor escolha um arquivo válido'
            },
            greaterThan: {
                'default': 'Por favor insira um valor maior ou igual a %s',
                notInclusive: 'Por favor insira um valor maior do que %s'
            },
            grid: {
                'default': 'Por favor insira uma GRID válida'
            },
            hex: {
                'default': 'Por favor insira um hexadecimal válido'
            },
            iban: {
                'default': 'Por favor insira um número IBAN válido',
                country: 'Por favor insira um número IBAN válido em %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emirados Árabes',
                    AL: 'Albânia',
                    AO: 'Angola',
                    AT: 'Áustria',
                    AZ: 'Azerbaijão',
                    BA: 'Bósnia-Herzegovina',
                    BE: 'Bélgica',
                    BF: 'Burkina Faso',
                    BG: 'Bulgária',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    IC: 'Costa do Marfim',
                    CM: 'Camarões',
                    CR: 'Costa Rica',
                    CV: 'Cabo Verde',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    DO: 'República Dominicana',
                    DZ: 'Argélia',
                    EE: 'Estónia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FO: 'Ilhas Faroé',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlândia',
                    GR: 'Grécia',
                    GT: 'Guatemala',
                    HR: 'Croácia',
                    HU: 'Hungria',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Irão',
                    IS: 'Islândia',
                    TI: 'Itália',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Cazaquistão',
                    LB: 'Líbano',
                    LI: 'Liechtenstein',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MC: 'Mônaco',
                    MD: 'Moldávia',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedónia',
                    ML: 'Mali',
                    MR: 'Mauritânia',
                    MT: 'Malta',
                    MU: 'Maurício',
                    MZ: 'Moçambique',
                    NL: 'Países Baixos',
                    NO: 'Noruega',
                    PK: 'Paquistão',
                    PL: 'Polônia',
                    PS: 'Palestino',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SA: 'Arábia Saudita',
                    SE: 'Suécia',
                    SI: 'Eslovénia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunísia',
                    TR: 'Turquia',
                    VG: 'Ilhas Virgens Britânicas'
                }
            },
            id: {
                'default': 'Por favor insira um código de identificação válido',
                country: 'Por favor insira um número de indentificação válido em %s',
                countries: {
                    BA: 'Bósnia e Herzegovina',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'República Checa',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    LT: 'Lituânia',
                    LV: 'Letónia',
                    ME: 'Montenegro',
                    MK: 'Macedónia',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    RO: 'Roménia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    SM: 'San Marino',
                    TH: 'Tailândia',
                    ZA: 'África do Sul'
                }
            },
            identical: {
                'default': 'Por favor, insira o mesmo valor'
            },
            imei: {
                'default': 'Por favor insira um IMEI válido'
            },
            imo: {
                'default': 'Por favor insira um IMO válido'
            },
            integer: {
                'default': 'Por favor insira um número inteiro válido'
            },
            ip: {
                'default': 'Por favor insira um IP válido',
                ipv4: 'Por favor insira um endereço de IPv4 válido',
                ipv6: 'Por favor insira um endereço de IPv6 válido'
            },
            isbn: {
                'default': 'Por favor insira um ISBN válido'
            },
            isin: {
                'default': 'Por favor insira um ISIN válido'
            },
            ismn: {
                'default': 'Por favor insira um ISMN válido'
            },
            issn: {
                'default': 'Por favor insira um ISSN válido'
            },
            lessThan: {
                'default': 'Por favor insira um valor menor ou igual a %s',
                notInclusive: 'Por favor insira um valor menor do que %s'
            },
            mac: {
                'default': 'Por favor insira um endereço MAC válido'
            },
            meid: {
                'default': 'Por favor insira um MEID válido'
            },
            notEmpty: {
                'default': 'Por favor insira um valor'
            },
            numeric: {
                'default': 'Por favor insira um número real válido'
            },
            phone: {
                'default': 'Por favor insira um número de telefone válido',
                country: 'Por favor insira um número de telefone válido em %s',
                countries: {
                    AE: 'Emirados Árabes',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CN: 'China',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IN: 'Índia',
                    MA: 'Marrocos',
                    NL: 'Países Baixos',
                    PK: 'Paquistão',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SK: 'Eslováquia',
                    TH: 'Tailândia',
                    US: 'EUA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Por favor insira um valor correspondente ao padrão'
            },
            remote: {
                'default': 'Por favor insira um valor válido'
            },
            rtn: {
                'default': 'Por favor insira um número válido RTN'
            },
            sedol: {
                'default': 'Por favor insira um número válido SEDOL'
            },
            siren: {
                'default': 'Por favor insira um número válido SIREN'
            },
            siret: {
                'default': 'Por favor insira um número válido SIRET'
            },
            step: {
                'default': 'Por favor insira um passo válido %s'
            },
            stringCase: {
                'default': 'Por favor, digite apenas caracteres minúsculos',
                upper: 'Por favor, digite apenas caracteres maiúsculos'
            },
            stringLength: {
                'default': 'Por favor insira um valor com comprimento válido',
                less: 'Por favor insira menos de %s caracteres',
                more: 'Por favor insira mais de %s caracteres',
                between: 'Por favor insira um valor entre %s e %s caracteres'
            },
            uri: {
                'default': 'Por favor insira um URI válido'
            },
            uuid: {
                'default': 'Por favor insira um número válido UUID',
                version: 'Por favor insira uma versão %s  UUID válida'
            },
            vat: {
                'default': 'Por favor insira um VAT válido',
                country: 'Por favor insira um número VAT válido em %s',
                countries: {
                    AT: 'Áustria',
                    BE: 'Bélgica',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CH: 'Suíça',
                    CY: 'Chipre',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    EE: 'Estônia',
                    ES: 'Espanha',
                    FI: 'Finlândia',
                    FR: 'França',
                    GB: 'Reino Unido',
                    GR: 'Grécia',
                    EL: 'Grécia',
                    HU: 'Hungria',
                    HR: 'Croácia',
                    IE: 'Irlanda',
                    IS: 'Islândia',
                    IT: 'Itália',
                    LT: 'Lituânia',
                    LU: 'Luxemburgo',
                    LV: 'Letónia',
                    MT: 'Malta',
                    NL: 'Holanda',
                    NO: 'Norway',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    RS: 'Sérvia',
                    SE: 'Suécia',
                    SI: 'Eslovênia',
                    SK: 'Eslováquia',
                    VE: 'Venezuela',
                    ZA: 'África do Sul'
                }
            },
            vin: {
                'default': 'Por favor insira um VIN válido'
            },
            zipCode: {
                'default': 'Por favor insira um código postal válido',
                country: 'Por favor insira um código postal válido em %s',
                countries: {
                    AT: 'Áustria',
                    BG: 'Bulgária',
                    BR: 'Brasil',
                    CA: 'Canadá',
                    CH: 'Suíça',
                    CZ: 'República Checa',
                    DE: 'Alemanha',
                    DK: 'Dinamarca',
                    ES: 'Espanha',
                    FR: 'França',
                    GB: 'Reino Unido',
                    IE: 'Irlanda',
                    IN: 'Índia',
                    IT: 'Itália',
                    MA: 'Marrocos',
                    NL: 'Holanda',
                    PL: 'Polônia',
                    PT: 'Portugal',
                    RO: 'Roménia',
                    RU: 'Rússia',
                    SE: 'Suécia',
                    SG: 'Cingapura',
                    SK: 'Eslováquia',
                    US: 'EUA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Romanian language package
     * Translated by @filipac
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ro_RO': {
            base64: {
                'default': 'Te rog introdu un base64 valid'
            },
            between: {
                'default': 'Te rog introdu o valoare intre %s si %s',
                notInclusive: 'Te rog introdu o valoare doar intre %s si %s'
            },
            bic: {
                'default': 'Te rog sa introduci un numar BIC valid'
            },
            callback: {
                'default': 'Te rog introdu o valoare valida'
            },
            choice: {
                'default': 'Te rog introdu o valoare valida',
                less: 'Te rog alege minim %s optiuni',
                more: 'Te rog alege maxim %s optiuni',
                between: 'Te rog alege %s - %s optiuni'
            },
            color: {
                'default': 'Te rog sa introduci o culoare valida'
            },
            creditCard: {
                'default': 'Te rog introdu un numar de card valid'
            },
            cusip: {
                'default': 'Te rog introdu un numar CUSIP valid'
            },
            cvv: {
                'default': 'Te rog introdu un numar CVV valid'
            },
            date: {
                'default': 'Te rog introdu o data valida',
                min: 'Te rog sa introduci o data dupa %s',
                max: 'Te rog sa introduci o data inainte de %s',
                range: 'Te rog sa introduci o data in intervalul %s - %s'
            },
            different: {
                'default': 'Te rog sa introduci o valoare diferita'
            },
            digits: {
                'default': 'Te rog sa introduci doar cifre'
            },
            ean: {
                'default': 'Te rog sa introduci un numar EAN valid'
            },
            ein: {
                'default': 'Te rog sa introduci un numar EIN valid'
            },
            emailAddress: {
                'default': 'Te rog sa introduci o adresa de email valide'
            },
            file: {
                'default': 'Te rog sa introduci un fisier valid'
            },
            greaterThan: {
                'default': 'Te rog sa introduci o valoare mai mare sau egala cu %s',
                notInclusive: 'Te rog sa introduci  o valoare mai mare ca %s'
            },
            grid: {
                'default': 'Te rog sa introduci un numar GRId valid'
            },
            hex: {
                'default': 'Te rog sa introduci un numar hexadecimal valid'
            },
            iban: {
                'default': 'Te rog sa introduci un IBAN valid',
                country: 'Te rog sa introduci un IBAN valid din %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Emiratele Arabe unite',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Austria',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia si Herzegovina',
                    BE: 'Belgia',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CI: 'Coasta de Fildes',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cipru',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    DO: 'Republica Dominicană',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    FO: 'Insulele Faroe',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Groenlanda',
                    GR: 'Grecia',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Ungaria',
                    IE: 'Irlanda',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Islanda',
                    IT: 'Italia',
                    JO: 'Iordania',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Muntenegru',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PK: 'Pakistan',
                    PL: 'Polanda',
                    PS: 'Palestina',
                    PT: 'Portugalia',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Arabia Saudita',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Turkey',
                    VG: 'Insulele Virgin'
                }
            },
            id: {
                'default': 'Te rog sa introduci un numar de identificare valid',
                country: 'Te rog sa introduci un numar de identificare valid din %s',
                countries: {
                    BA: 'Bosnia si Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CL: 'Chile',
                    CN: 'China',
                    CZ: 'Republica Cehia',
                    DK: 'Danemarca',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    HR: 'Croatia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Muntenegru',
                    MK: 'Macedonia',
                    NL: 'Olanda',
                    PL: 'Polanda',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    SM: 'San Marino',
                    TH: 'Thailanda',
                    ZA: 'Africa de Sud'
                }
            },
            identical: {
                'default': 'Te rog sa introduci aceeasi valoare'
            },
            imei: {
                'default': 'Te rog sa introduci un numar IMEI valid'
            },
            imo: {
                'default': 'Te rog sa introduci un numar IMO valid'
            },
            integer: {
                'default': 'Te rog sa introduci un numar valid'
            },
            ip: {
                'default': 'Te rog sa introduci o adresa IP valida',
                ipv4: 'Te rog sa introduci o adresa IPv4 valida',
                ipv6: 'Te rog sa introduci o adresa IPv6 valida'
            },
            isbn: {
                'default': 'Te rog sa introduci un numar ISBN valid'
            },
            isin: {
                'default': 'Te rog sa introduci un numar ISIN valid'
            },
            ismn: {
                'default': 'Te rog sa introduci un numar ISMN valid'
            },
            issn: {
                'default': 'Te rog sa introduci un numar ISSN valid'
            },
            lessThan: {
                'default': 'Te rog sa introduci o valoare mai mica sau egala cu %s',
                notInclusive: 'Te rog sa introduci o valoare mai mica decat %s'
            },
            mac: {
                'default': 'Te rog sa introduci o adresa MAC valida'
            },
            meid: {
                'default': 'Te rog sa introduci un numar MEID valid'
            },
            notEmpty: {
                'default': 'Te rog sa introduci o valoare'
            },
            numeric: {
                'default': 'Te rog sa introduci un numar'
            },
            phone: {
                'default': 'Te rog sa introduci un numar de telefon valid',
                country: 'Te rog sa introduci un numar de telefon valid din %s',
                countries: {
                    AE: 'Emiratele Arabe unite',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CN: 'China',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    ES: 'Spania',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    IN: 'India',
                    MA: 'Maroc',
                    NL: 'Olanda',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Rusia',
                    SK: 'Slovacia',
                    TH: 'Thailanda',
                    US: 'SUA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Te rog sa introduci o valoare in formatul'
            },
            remote: {
                'default': 'Te rog sa introduci o valoare valida'
            },
            rtn: {
                'default': 'Te rog sa introduci un numar RTN valid'
            },
            sedol: {
                'default': 'Te rog sa introduci un numar SEDOL valid'
            },
            siren: {
                'default': 'Te rog sa introduci un numar SIREN valid'
            },
            siret: {
                'default': 'Te rog sa introduci un numar SIRET valid'
            },
            step: {
                'default': 'Te rog introdu un pas de %s'
            },
            stringCase: {
                'default': 'Te rog sa introduci doar litere mici',
                upper: 'Te rog sa introduci doar litere mari'
            },
            stringLength: {
                'default': 'Te rog sa introduci o valoare cu lungimea valida',
                less: 'Te rog sa introduci mai putin de %s caractere',
                more: 'Te rog sa introduci mai mult de %s caractere',
                between: 'Te rog sa introduci o valoare cu lungimea intre %s si %s caractere'
            },
            uri: {
                'default': 'Te rog sa introduci un URI valid'
            },
            uuid: {
                'default': 'Te rog sa introduci un numar UUID valid',
                version: 'Te rog sa introduci un numar UUID versiunea %s valid'
            },
            vat: {
                'default': 'Te rog sa introduci un numar TVA valid',
                country: 'Te rog sa introduci un numar TVA valid din %s',
                countries: {
                    AT: 'Austria',
                    BE: 'Belgia',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CH: 'Elvetia',
                    CY: 'Cipru',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    EE: 'Estonia',
                    ES: 'Spania',
                    FI: 'Finlanda',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    GR: 'Grecia',
                    EL: 'Grecia',
                    HU: 'Ungaria',
                    HR: 'Croatia',
                    IE: 'Irlanda',
                    IS: 'Islanda',
                    IT: 'Italia',
                    LT: 'Lituania',
                    LU: 'Luxemburg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Olanda',
                    NO: 'Norvegia',
                    PL: 'Polanda',
                    PT: 'Portugalia',
                    RO: 'Romania',
                    RU: 'Rusia',
                    RS: 'Serbia',
                    SE: 'Suedia',
                    SI: 'Slovenia',
                    SK: 'Slovacia',
                    VE: 'Venezuela',
                    ZA: 'Africa de Sud'
                }
            },
            vin: {
                'default': 'Te rog sa introduci un numar VIN valid'
            },
            zipCode: {
                'default': 'Te rog sa introduci un cod postal valid',
                country: 'Te rog sa introduci un cod postal valid din %s',
                countries: {
                    AT: 'Austria',
                    BG: 'Bulgaria',
                    BR: 'Brazilia',
                    CA: 'Canada',
                    CH: 'Elvetia',
                    CZ: 'Republica Cehia',
                    DE: 'Germania',
                    DK: 'Danemarca',
                    ES: 'Spania',
                    FR: 'Franta',
                    GB: 'Regatul Unit',
                    IE: 'Irlanda',
                    IN: 'India',
                    IT: 'Italia',
                    MA: 'Maroc',
                    NL: 'Olanda',
                    PL: 'Polanda',
                    PT: 'Portugalia',
                    RO: 'Romania',
                    RU: 'Rusia',
                    SE: 'Suedia',
                    SG: 'Singapore',
                    SK: 'Slovacia',
                    US: 'SUA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Russian language package
     * Translated by @cylon-v. Improved by @stepin, @oleg-voloshyn
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ru_RU': {
            base64: {
                'default': 'Пожалуйста, введите корректную строку base64'
            },
            between: {
                'default': 'Пожалуйста, введите значение от %s до %s',
                notInclusive: 'Пожалуйста, введите значение между %s и %s'
            },
            bic: {
                'default': 'Пожалуйста, введите правильный номер BIC'
            },
            callback: {
                'default': 'Пожалуйста, введите корректное значение'
            },
            choice: {
                'default': 'Пожалуйста, введите корректное значение',
                less: 'Пожалуйста, выберите хотя бы %s опций',
                more: 'Пожалуйста, выберите не больше %s опций',
                between: 'Пожалуйста, выберите %s-%s опций'
            },
            color: {
                'default': 'Пожалуйста, введите правильный номер цвета'
            },
            creditCard: {
                'default': 'Пожалуйста, введите правильный номер кредитной карты'
            },
            cusip: {
                'default': 'Пожалуйста, введите правильный номер CUSIP'
            },
            cvv: {
                'default': 'Пожалуйста, введите правильный номер CVV'
            },
            date: {
                'default': 'Пожалуйста, введите правильную дату',
                min: 'Пожалуйста, введите дату после %s',
                max: 'Пожалуйста, введите дату перед %s',
                range: 'Пожалуйста, введите дату в диапазоне %s - %s'
            },
            different: {
                'default': 'Пожалуйста, введите другое значение'
            },
            digits: {
                'default': 'Пожалуйста, введите только цифры'
            },
            ean: {
                'default': 'Пожалуйста, введите правильный номер EAN'
            },
            ein: {
                'default': 'Пожалуйста, введите правильный номер EIN'
            },
            emailAddress: {
                'default': 'Пожалуйста, введите правильный адрес эл. почты'
            },
            file: {
                'default': 'Пожалуйста, выберите файл'
            },
            greaterThan: {
                'default': 'Пожалуйста, введите значение большее или равное %s',
                notInclusive: 'Пожалуйста, введите значение больше %s'
            },
            grid: {
                'default': 'Пожалуйста, введите правильный номер GRId'
            },
            hex: {
                'default': 'Пожалуйста, введите правильное шестнадцатиричное число'
            },
            iban: {
                'default': 'Пожалуйста, введите правильный номер IBAN',
                country: 'Пожалуйста, введите правильный номер IBAN в %s',
                countries: {
                    AD: 'Андорре',
                    AE: 'Объединённых Арабских Эмиратах',
                    AL: 'Албании',
                    AO: 'Анголе',
                    AT: 'Австрии',
                    AZ: 'Азербайджане',
                    BA: 'Боснии и Герцеговине',
                    BE: 'Бельгии',
                    BF: 'Буркина-Фасо',
                    BG: 'Болгарии',
                    BH: 'Бахрейне',
                    BI: 'Бурунди',
                    BJ: 'Бенине',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CI: "Кот-д'Ивуаре",
                    CM: 'Камеруне',
                    CR: 'Коста-Рике',
                    CV: 'Кабо-Верде',
                    CY: 'Кипре',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    DO: 'Доминикане Республика',
                    DZ: 'Алжире',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    FO: 'Фарерских островах',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    GE: 'Грузии',
                    GI: 'Гибралтаре',
                    GL: 'Гренландии',
                    GR: 'Греции',
                    GT: 'Гватемале',
                    HR: 'Хорватии',
                    HU: 'Венгрии',
                    IE: 'Ирландии',
                    IL: 'Израиле',
                    IR: 'Иране',
                    IS: 'Исландии',
                    IT: 'Италии',
                    JO: 'Иордании',
                    KW: 'Кувейте',
                    KZ: 'Казахстане',
                    LB: 'Ливане',
                    LI: 'Лихтенштейне',
                    LT: 'Литве',
                    LU: 'Люксембурге',
                    LV: 'Латвии',
                    MC: 'Монако',
                    MD: 'Молдове',
                    ME: 'Черногории',
                    MG: 'Мадагаскаре',
                    MK: 'Македонии',
                    ML: 'Мали',
                    MR: 'Мавритании',
                    MT: 'Мальте',
                    MU: 'Маврикии',
                    MZ: 'Мозамбике',
                    NL: 'Нидерландах',
                    NO: 'Норвегии',
                    PK: 'Пакистане',
                    PL: 'Польше',
                    PS: 'Палестине',
                    PT: 'Португалии',
                    QA: 'Катаре',
                    RO: 'Румынии',
                    RS: 'Сербии',
                    SA: 'Саудовской Аравии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    SM: 'Сан-Марино',
                    SN: 'Сенегале',
                    TN: 'Тунисе',
                    TR: 'Турции',
                    VG: 'Британских Виргинских островах'
                }
            },
            id: {
                'default': 'Пожалуйста, введите правильный идентификационный номер',
                country: 'Пожалуйста, введите правильный идентификационный номер в %s',
                countries: {
                    BA: 'Боснии и Герцеговине',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CL: 'Чили',
                    CN: 'Китае',
                    CZ: 'Чешская республика',
                    DK: 'Дании',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    HR: 'Хорватии',
                    IE: 'Ирландии',
                    IS: 'Исландии',
                    LT: 'Литве',
                    LV: 'Латвии',
                    ME: 'Черногории',
                    MK: 'Македонии',
                    NL: 'Нидерландах',
                    PL: 'Польше',
                    RO: 'Румынии',
                    RS: 'Сербии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    SM: 'Сан-Марино',
                    TH: 'Тайланде',
                    ZA: 'ЮАР'
                }
            },
            identical: {
                'default': 'Пожалуйста, введите такое же значение'
            },
            imei: {
                'default': 'Пожалуйста, введите правильный номер IMEI'
            },
            imo: {
                'default': 'Пожалуйста, введите правильный номер IMO'
            },
            integer: {
                'default': 'Пожалуйста, введите правильное целое число'
            },
            ip: {
                'default': 'Пожалуйста, введите правильный IP-адрес',
                ipv4: 'Пожалуйста, введите правильный IPv4-адрес',
                ipv6: 'Пожалуйста, введите правильный IPv6-адрес'
            },
            isbn: {
                'default': 'Пожалуйста, введите правильный номер ISBN'
            },
            isin: {
                'default': 'Пожалуйста, введите правильный номер ISIN'
            },
            ismn: {
                'default': 'Пожалуйста, введите правильный номер ISMN'
            },
            issn: {
                'default': 'Пожалуйста, введите правильный номер ISSN'
            },
            lessThan: {
                'default': 'Пожалуйста, введите значение меньшее или равное %s',
                notInclusive: 'Пожалуйста, введите значение меньше %s'
            },
            mac: {
                'default': 'Пожалуйста, введите правильный MAC-адрес'
            },
            meid: {
                'default': 'Пожалуйста, введите правильный номер MEID'
            },
            notEmpty: {
                'default': 'Пожалуйста, введите значение'
            },
            numeric: {
                'default': 'Пожалуйста, введите корректное действительное число'
            },
            phone: {
                'default': 'Пожалуйста, введите правильный номер телефона',
                country: 'Пожалуйста, введите правильный номер телефона в %s',
                countries: {
                    AE: 'Объединённых Арабских Эмиратах',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CN: 'Китае',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    ES: 'Испании',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    IN: 'Индия',
                    MA: 'Марокко',
                    NL: 'Нидерландах',
                    PK: 'Пакистане',
                    RO: 'Румынии',
                    RU: 'России',
                    SK: 'Словакии',
                    TH: 'Тайланде',
                    US: 'США',
                    VE: 'Венесуэле'
                }
            },
            regexp: {
                'default': 'Пожалуйста, введите значение соответствующее шаблону'
            },
            remote: {
                'default': 'Пожалуйста, введите правильное значение'
            },
            rtn: {
                'default': 'Пожалуйста, введите правильный номер RTN'
            },
            sedol: {
                'default': 'Пожалуйста, введите правильный номер SEDOL'
            },
            siren: {
                'default': 'Пожалуйста, введите правильный номер SIREN'
            },
            siret: {
                'default': 'Пожалуйста, введите правильный номер SIRET'
            },
            step: {
                'default': 'Пожалуйста, введите правильный шаг %s'
            },
            stringCase: {
                'default': 'Пожалуйста, вводите только строчные буквы',
                upper: 'Пожалуйста, вводите только заглавные буквы'
            },
            stringLength: {
                'default': 'Пожалуйста, введите значение корректной длины',
                less: 'Пожалуйста, введите не больше %s символов',
                more: 'Пожалуйста, введите не меньше %s символов',
                between: 'Пожалуйста, введите строку длиной от %s до %s символов'
            },
            uri: {
                'default': 'Пожалуйста, введите правильный URI'
            },
            uuid: {
                'default': 'Пожалуйста, введите правильный номер UUID',
                version: 'Пожалуйста, введите правильный номер UUID версии %s'
            },
            vat: {
                'default': 'Пожалуйста, введите правильный номер ИНН',
                country: 'Пожалуйста, введите правильный номер ИНН (VAT) в %s',
                countries: {
                    AT: 'Австрии',
                    BE: 'Бельгии',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CH: 'Швейцарии',
                    CY: 'Кипре',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    EE: 'Эстонии',
                    ES: 'Испании',
                    FI: 'Финляндии',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    GR: 'Греции',
                    EL: 'Греции',
                    HU: 'Венгрии',
                    HR: 'Хорватии',
                    IE: 'Ирландии',
                    IS: 'Исландии',
                    IT: 'Италии',
                    LT: 'Литве',
                    LU: 'Люксембурге',
                    LV: 'Латвии',
                    MT: 'Мальте',
                    NL: 'Нидерландах',
                    NO: 'Норвегии',
                    PL: 'Польше',
                    PT: 'Португалии',
                    RO: 'Румынии',
                    RU: 'России',
                    RS: 'Сербии',
                    SE: 'Швеции',
                    SI: 'Словении',
                    SK: 'Словакии',
                    VE: 'Венесуэле',
                    ZA: 'ЮАР'
                }
            },
            vin: {
                'default': 'Пожалуйста, введите правильный номер VIN'
            },
            zipCode: {
                'default': 'Пожалуйста, введите правильный почтовый индекс',
                country: 'Пожалуйста, введите правильный почтовый индекс в %s',
                countries: {
                    AT: 'Австрии',
                    BG: 'Болгарии',
                    BR: 'Бразилии',
                    CA: 'Канаде',
                    CH: 'Швейцарии',
                    CZ: 'Чешская республика',
                    DE: 'Германии',
                    DK: 'Дании',
                    ES: 'Испании',
                    FR: 'Франции',
                    GB: 'Великобритании',
                    IE: 'Ирландии',
                    IN: 'Индия',
                    IT: 'Италии',
                    MA: 'Марокко',
                    NL: 'Нидерландах',
                    PL: 'Польше',
                    PT: 'Португалии',
                    RO: 'Румынии',
                    RU: 'России',
                    SE: 'Швеции',
                    SG: 'Сингапуре',
                    SK: 'Словакии',
                    US: 'США'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Slovak language package
     * Translated by @budik21. Improved by @PatrikGallik
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sk_SK': {
            base64: {
                'default': 'Prosím zadajte správny base64'
            },
            between: {
                'default': 'Prosím zadajte hodnotu medzi %s a %s',
                notInclusive: 'Prosím zadajte hodnotu medzi %s a %s (vrátane týchto čísel)'
            },
            bic: {
                'default': 'Prosím zadajte správne BIC číslo'
            },
            callback: {
                'default': 'Prosím zadajte správnu hodnotu'
            },
            choice: {
                'default': 'Prosím vyberte správnu hodnotu',
                less: 'Hodnota musí byť minimálne %s',
                more: 'Hodnota nesmie byť viac ako %s',
                between: 'Prosím vyberte medzi %s a %s'
            },
            color: {
                'default': 'Prosím zadajte správnu farbu'
            },
            creditCard: {
                'default': 'Prosím zadajte správne číslo kreditnej karty'
            },
            cusip: {
                'default': 'Prosím zadajte správne CUSIP číslo'
            },
            cvv: {
                'default': 'Prosím zadajte správne CVV číslo'
            },
            date: {
                'default': 'Prosím zadajte správny dátum',
                min: 'Prosím zadajte dátum pred %s',
                max: 'Prosím zadajte dátum po %s',
                range: 'Prosím zadajte dátum v rozmedzí %s až %s'
            },
            different: {
                'default': 'Prosím zadajte inú hodnotu'
            },
            digits: {
                'default': 'Toto pole môže obsahovať len čísla'
            },
            ean: {
                'default': 'Prosím zadajte správne EAN číslo'
            },
            ein: {
                'default': 'Prosím zadajte správne EIN číslo'
            },
            emailAddress: {
                'default': 'Prosím zadajte správnu emailovú adresu'
            },
            file: {
                'default': 'Prosím vyberte súbor'
            },
            greaterThan: {
                'default': 'Prosím zadajte hodnotu väčšiu alebo rovnú %s',
                notInclusive: 'Prosím zadajte hodnotu väčšiu ako %s'
            },
            grid: {
                'default': 'Prosím zadajte správné GRId číslo'
            },
            hex: {
                'default': 'Prosím zadajte správne hexadecimálne číslo'
            },
            iban: {
                'default': 'Prosím zadajte správne IBAN číslo',
                country: 'Prosím zadajte správne IBAN číslo pre %s',
                countries: {
                    AD: 'Andorru',
                    AE: 'Spojené arabské emiráty',
                    AL: 'Albánsko',
                    AO: 'Angolu',
                    AT: 'Rakúsko',
                    AZ: 'Ázerbajdžán',
                    BA: 'Bosnu a Herzegovinu',
                    BE: 'Belgicko',
                    BF: 'Burkina Faso',
                    BG: 'Bulharsko',
                    BH: 'Bahrajn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CI: 'Pobrežie Slonoviny',
                    CM: 'Kamerun',
                    CR: 'Kostariku',
                    CV: 'Cape Verde',
                    CY: 'Cyprus',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    DO: 'Dominikánsku republiku',
                    DZ: 'Alžírsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    FO: 'Faerské ostrovy',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    GE: 'Gruzínsko',
                    GI: 'Gibraltár',
                    GL: 'Grónsko',
                    GR: 'Grécko',
                    GT: 'Guatemalu',
                    HR: 'Chorvátsko',
                    HU: 'Maďarsko',
                    IE: 'Írsko',
                    IL: 'Izrael',
                    IR: 'Irán',
                    IS: 'Island',
                    IT: 'Taliansko',
                    JO: 'Jordánsko',
                    KW: 'Kuwait',
                    KZ: 'Kazachstan',
                    LB: 'Libanon',
                    LI: 'Lichtenštajnsko',
                    LT: 'Litvu',
                    LU: 'Luxemburgsko',
                    LV: 'Lotyšsko',
                    MC: 'Monako',
                    MD: 'Moldavsko',
                    ME: 'Čiernu horu',
                    MG: 'Madagaskar',
                    MK: 'Macedónsko',
                    ML: 'Mali',
                    MR: 'Mauritániu',
                    MT: 'Maltu',
                    MU: 'Mauritius',
                    MZ: 'Mosambik',
                    NL: 'Holandsko',
                    NO: 'Nórsko',
                    PK: 'Pakistan',
                    PL: 'Poľsko',
                    PS: 'Palestínu',
                    PT: 'Portugalsko',
                    QA: 'Katar',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SA: 'Saudskú Arábiu',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisko',
                    TR: 'Turecko',
                    VG: 'Britské Panenské ostrovy'
                }
            },
            id: {
                'default': 'Prosím zadajte správne rodné číslo',
                country: 'Prosím zadajte správne rodné číslo pre %s',
                countries: {
                    BA: 'Bosnu a Hercegovinu',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CL: 'Chile',
                    CN: 'Čínu',
                    CZ: 'Českú Republiku',
                    DK: 'Dánsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    HR: 'Chorvátsko',
                    IE: 'Írsko',
                    IS: 'Island',
                    LT: 'Litvu',
                    LV: 'Lotyšsko',
                    ME: 'Čiernu horu',
                    MK: 'Macedónsko',
                    NL: 'Holandsko',
                    PL: 'Poľsko',
                    RO: 'Rumunsko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    SM: 'San Marino',
                    TH: 'Thajsko',
                    ZA: 'Južnú Afriku'
                }
            },
            identical: {
                'default': 'Prosím zadajte rovnakú hodnotu'
            },
            imei: {
                'default': 'Prosím zadajte správne IMEI číslo'
            },
            imo: {
                'default': 'Prosím zadajte správne IMO číslo'
            },
            integer: {
                'default': 'Prosím zadajte celé číslo'
            },
            ip: {
                'default': 'Prosím zadajte správnu IP adresu',
                ipv4: 'Prosím zadajte správnu IPv4 adresu',
                ipv6: 'Prosím zadajte správnu IPv6 adresu'
            },
            isbn: {
                'default': 'Prosím zadajte správne ISBN číslo'
            },
            isin: {
                'default': 'Prosím zadajte správne ISIN číslo'
            },
            ismn: {
                'default': 'Prosím zadajte správne ISMN číslo'
            },
            issn: {
                'default': 'Prosím zadajte správne ISSN číslo'
            },
            lessThan: {
                'default': 'Prosím zadajte hodnotu menšiu alebo rovnú %s',
                notInclusive: 'Prosím zadajte hodnotu menšiu ako %s'
            },
            mac: {
                'default': 'Prosím zadajte správnu MAC adresu'
            },
            meid: {
                'default': 'Prosím zadajte správne MEID číslo'
            },
            notEmpty: {
                'default': 'Toto pole nesmie byť prázdne'
            },
            numeric: {
                'default': 'Prosím zadajte číselnú hodnotu'
            },
            phone: {
                'default': 'Prosím zadajte správne telefónne číslo',
                country: 'Prosím zadajte správne telefónne číslo pre %s',
                countries: {
                    AE: 'Spojené arabské emiráty',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CN: 'Čínu',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    ES: 'Španielsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    IN: 'Indiu',
                    MA: 'Maroko',
                    NL: 'Holandsko',
                    PK: 'Pakistan',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SK: 'Slovensko',
                    TH: 'Thajsko',
                    US: 'Spojené Štáty Americké',
                    VE: 'Venezuelu'
                }
            },
            regexp: {
                'default': 'Prosím zadajte hodnotu spĺňajúcu zadanie'
            },
            remote: {
                'default': 'Prosím zadajte správnu hodnotu'
            },
            rtn: {
                'default': 'Prosím zadajte správne RTN číslo'
            },
            sedol: {
                'default': 'Prosím zadajte správne SEDOL číslo'
            },
            siren: {
                'default': 'Prosím zadajte správne SIREN číslo'
            },
            siret: {
                'default': 'Prosím zadajte správne SIRET číslo'
            },
            step: {
                'default': 'Prosím zadajte správny krok %s'
            },
            stringCase: {
                'default': 'Len malé písmená sú povolené v tomto poli',
                upper: 'Len veľké písmená sú povolené v tomto poli'
            },
            stringLength: {
                'default': 'Toto pole nesmie byť prázdne',
                less: 'Prosím zadajte hodnotu kratšiu ako %s znakov',
                more: 'Prosím zadajte hodnotu dlhú %s znakov a viacej',
                between: 'Prosím zadajte hodnotu medzi %s a %s znakov'
            },
            uri: {
                'default': 'Prosím zadajte správnu URI'
            },
            uuid: {
                'default': 'Prosím zadajte správne UUID číslo',
                version: 'Prosím zadajte správne UUID vo verzii %s'
            },
            vat: {
                'default': 'Prosím zadajte správne VAT číslo',
                country: 'Prosím zadajte správne VAT číslo pre %s',
                countries: {
                    AT: 'Rakúsko',
                    BE: 'Belgicko',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CH: 'Švajčiarsko',
                    CY: 'Cyprus',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    EE: 'Estónsko',
                    ES: 'Španielsko',
                    FI: 'Fínsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    GR: 'Grécko',
                    EL: 'Grécko',
                    HU: 'Maďarsko',
                    HR: 'Chorvátsko',
                    IE: 'Írsko',
                    IS: 'Island',
                    IT: 'Taliansko',
                    LT: 'Litvu',
                    LU: 'Luxemburgsko',
                    LV: 'Lotyšsko',
                    MT: 'Maltu',
                    NL: 'Holandsko',
                    NO: 'Norsko',
                    PL: 'Poľsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    RS: 'Srbsko',
                    SE: 'Švédsko',
                    SI: 'Slovinsko',
                    SK: 'Slovensko',
                    VE: 'Venezuelu',
                    ZA: 'Južnú Afriku'
                }
            },
            vin: {
                'default': 'Prosím zadajte správne VIN číslo'
            },
            zipCode: {
                'default': 'Prosím zadajte správne PSČ',
                country: 'Prosím zadajte správne PSČ pre %s',
                countries: {
                    AT: 'Rakúsko',
                    BG: 'Bulharsko',
                    BR: 'Brazíliu',
                    CA: 'Kanadu',
                    CH: 'Švajčiarsko',
                    CZ: 'Českú Republiku',
                    DE: 'Nemecko',
                    DK: 'Dánsko',
                    ES: 'Španielsko',
                    FR: 'Francúzsko',
                    GB: 'Veľkú Britániu',
                    IE: 'Írsko',
                    IN: 'Indiu',
                    IT: 'Taliansko',
                    MA: 'Maroko',
                    NL: 'Holandsko',
                    PL: 'Poľsko',
                    PT: 'Portugalsko',
                    RO: 'Rumunsko',
                    RU: 'Rusko',
                    SE: 'Švédsko',
                    SG: 'Singapur',
                    SK: 'Slovensko',
                    US: 'Spojené Štáty Americké'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Albanian language package
     * Translated by @desaretiuss
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sq_AL': {
            base64: {
                'default': 'Ju lutem përdorni sistemin e kodimit Base64'
            },
            between: {
                'default': 'Ju lutem vendosni një vlerë midis %s dhe %s',
                notInclusive: 'Ju lutem vendosni një vlerë rreptësisht midis %s dhe %s'
            },
            bic: {
                'default': 'Ju lutem vendosni një numër BIC të vlefshëm'
            },
            callback: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme'
            },
            choice: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme',
                less: 'Ju lutem përzgjidhni së paku %s mundësi',
                more: 'Ju lutem përzgjidhni së shumti %s mundësi ',
                between: 'Ju lutem përzgjidhni %s - %s mundësi'
            },
            color: {
                'default': 'Ju lutem vendosni një ngjyrë të vlefshme'
            },
            creditCard: {
                'default': 'Ju lutem vendosni një numër karte krediti të vlefshëm'
            },
            cusip: {
                'default': 'Ju lutem vendosni një numër CUSIP të vlefshëm'
            },
            cvv: {
                'default': 'Ju lutem vendosni një numër CVV të vlefshëm'
            },
            date: {
                'default': 'Ju lutem vendosni një datë të saktë',
                min: 'Ju lutem vendosni një datë pas %s',
                max: 'Ju lutem vendosni një datë para %s',
                range: 'Ju lutem vendosni një datë midis %s - %s'
            },
            different: {
                'default': 'Ju lutem vendosni një vlerë tjetër'
            },
            digits: {
                'default': 'Ju lutem vendosni vetëm numra'
            },
            ean: {
                'default': 'Ju lutem vendosni një numër EAN të vlefshëm'
            },
            ein: {
                'default': 'Ju lutem vendosni një numër EIN të vlefshëm'
            },
            emailAddress: {
                'default': 'Ju lutem vendosni një adresë email të vlefshme'
            },
            file: {
                'default': 'Ju lutem përzgjidhni një skedar të vlefshëm'
            },
            greaterThan: {
                'default': 'Ju lutem vendosni një vlerë më të madhe ose të barabartë me %s',
                notInclusive: 'Ju lutem vendosni një vlerë më të madhe se %s'
            },
            grid: {
                'default': 'Ju lutem vendosni një numër GRId të vlefshëm'
            },
            hex: {
                'default': 'Ju lutem vendosni një numër të saktë heksadecimal'
            },
            iban: {
                'default': 'Ju lutem vendosni një numër IBAN të vlefshëm',
                country: 'Ju lutem vendosni një numër IBAN të vlefshëm në %s',
                countries: {
                    AD: 'Andora',
                    AE: 'Emiratet e Bashkuara Arabe',
                    AL: 'Shqipëri',
                    AO: 'Angola',
                    AT: 'Austri',
                    AZ: 'Azerbajxhan',
                    BA: 'Bosnjë dhe Hercegovinë',
                    BE: 'Belgjikë',
                    BF: 'Burkina Faso',
                    BG: 'Bullgari',
                    BH: 'Bahrein',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CI: 'Bregu i fildishtë',
                    CM: 'Kamerun',
                    CR: 'Kosta Rika',
                    CV: 'Kepi i Gjelbër',
                    CY: 'Qipro',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    DO: 'Dominika',
                    DZ: 'Algjeri',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    FO: 'Ishujt Faroe',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    GE: 'Gjeorgji',
                    GI: 'Gjibraltar',
                    GL: 'Groenlandë',
                    GR: 'Greqi',
                    GT: 'Guatemalë',
                    HR: 'Kroaci',
                    HU: 'Hungari',
                    IE: 'Irlandë',
                    IL: 'Izrael',
                    IR: 'Iran',
                    IS: 'Islandë',
                    IT: 'Itali',
                    JO: 'Jordani',
                    KW: 'Kuvajt',
                    KZ: 'Kazakistan',
                    LB: 'Liban',
                    LI: 'Lihtenshtejn',
                    LT: 'Lituani',
                    LU: 'Luksemburg',
                    LV: 'Letoni',
                    MC: 'Monako',
                    MD: 'Moldavi',
                    ME: 'Mal i Zi',
                    MG: 'Madagaskar',
                    MK: 'Maqedoni',
                    ML: 'Mali',
                    MR: 'Mauritani',
                    MT: 'Maltë',
                    MU: 'Mauricius',
                    MZ: 'Mozambik',
                    NL: 'Hollandë',
                    NO: 'Norvegji',
                    PK: 'Pakistan',
                    PL: 'Poloni',
                    PS: 'Palestinë',
                    PT: 'Portugali',
                    QA: 'Katar',
                    RO: 'Rumani',
                    RS: 'Serbi',
                    SA: 'Arabi Saudite',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Sllovaki',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunizi',
                    TR: 'Turqi',
                    VG: 'Ishujt Virxhin Britanikë'
                }
            },
            id: {
                'default': 'Ju lutem vendosni një numër identifikimi të vlefshëm ',
                country: 'Ju lutem vendosni një numër identifikimi të vlefshëm në %s',
                countries: {
                    BA: 'Bosnjë dhe Hercegovinë',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CL: 'Kili',
                    CN: 'Kinë',
                    CZ: 'Republika Çeke',
                    DK: 'Danimarkë',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    HR: 'Kroaci',
                    IE: 'Irlandë',
                    IS: 'Islandë',
                    LT: 'Lituani',
                    LV: 'Letoni',
                    ME: 'Mal i Zi',
                    MK: 'Maqedoni',
                    NL: 'Hollandë',
                    PL: 'Poloni',
                    RO: 'Rumani',
                    RS: 'Serbi',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Slovaki',
                    SM: 'San Marino',
                    TH: 'Tajlandë',
                    ZA: 'Afrikë e Jugut'
                }
            },
            identical: {
                'default': 'Ju lutem vendosni të njëjtën vlerë'
            },
            imei: {
                'default': 'Ju lutem vendosni numër IMEI të njëjtë'
            },
            imo: {
                'default': 'Ju lutem vendosni numër IMO të vlefshëm'
            },
            integer: {
                'default': 'Ju lutem vendosni një numër të vlefshëm'
            },
            ip: {
                'default': 'Ju lutem vendosni një adresë IP të vlefshme',
                ipv4: 'Ju lutem vendosni një adresë IPv4 të vlefshme',
                ipv6: 'Ju lutem vendosni një adresë IPv6 të vlefshme'
            },
            isbn: {
                'default': 'Ju lutem vendosni një numër ISBN të vlefshëm'
            },
            isin: {
                'default': 'Ju lutem vendosni një numër ISIN të vlefshëm'
            },
            ismn: {
                'default': 'Ju lutem vendosni një numër ISMN të vlefshëm'
            },
            issn: {
                'default': 'Ju lutem vendosni një numër ISSN të vlefshëm'
            },
            lessThan: {
                'default': 'Ju lutem vendosni një vlerë më të madhe ose të barabartë me %s',
                notInclusive: 'Ju lutem vendosni një vlerë më të vogël se %s'
            },
            mac: {
                'default': 'Ju lutem vendosni një adresë MAC të vlefshme'
            },
            meid: {
                'default': 'Ju lutem vendosni një numër MEID të vlefshëm'
            },
            notEmpty: {
                'default': 'Ju lutem vendosni një vlerë'
            },
            numeric: {
                'default': 'Ju lutem vendosni një numër me presje notuese të saktë'
            },
            phone: {
                'default': 'Ju lutem vendosni një numër telefoni të vlefshëm',
                country: 'Ju lutem vendosni një numër telefoni të vlefshëm në %s',
                countries: {
                    AE: 'Emiratet e Bashkuara Arabe',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CN: 'Kinë',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    ES: 'Spanjë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    IN: 'Indi',
                    MA: 'Marok',
                    NL: 'Hollandë',
                    PK: 'Pakistan',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    SK: 'Sllovaki',
                    TH: 'Tajlandë',
                    US: 'SHBA',
                    VE: 'Venezuelë'
                }
            },
            regexp: {
                'default': 'Ju lutem vendosni një vlerë që përputhet me modelin'
            },
            remote: {
                'default': 'Ju lutem vendosni një vlerë të vlefshme'
            },
            rtn: {
                'default': 'Ju lutem vendosni një numër RTN të vlefshëm'
            },
            sedol: {
                'default': 'Ju lutem vendosni një numër SEDOL të vlefshëm'
            },
            siren: {
                'default': 'Ju lutem vendosni një numër SIREN të vlefshëm'
            },
            siret: {
                'default': 'Ju lutem vendosni një numër SIRET të vlefshëm'
            },
            step: {
                'default': 'Ju lutem vendosni një hap të vlefshëm të %s'
            },
            stringCase: {
                'default': 'Ju lutem përdorni vetëm shenja të vogla të shtypit',
                upper: 'Ju lutem përdorni vetëm shenja të mëdha të shtypit'
            },
            stringLength: {
                'default': 'Ju lutem vendosni një vlerë me gjatësinë e duhur',
                less: 'Ju lutem vendosni më pak se %s simbole',
                more: 'Ju lutem vendosni më shumë se %s simbole',
                between: 'Ju lutem vendosni një vlerë me gjatësi midis %s dhe %s simbole'
            },
            uri: {
                'default': 'Ju lutem vendosni një URI të vlefshme'
            },
            uuid: {
                'default': 'Ju lutem vendosni një numër UUID të vlefshëm',
                version: 'Ju lutem vendosni një numër UUID version %s të vlefshëm'
            },
            vat: {
                'default': 'Ju lutem vendosni një numër VAT të vlefshëm',
                country: 'Ju lutem vendosni një numër VAT të vlefshëm në %s',
                countries: {
                    AT: 'Austri',
                    BE: 'Belgjikë',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CH: 'Zvicër',
                    CY: 'Qipro',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    EE: 'Estoni',
                    ES: 'Spanjë',
                    FI: 'Finlandë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    GR: 'Greqi',
                    EL: 'Greqi',
                    HU: 'Hungari',
                    HR: 'Kroaci',
                    IE: 'Irlandë',
                    IS: 'Iclandë',
                    IT: 'Itali',
                    LT: 'Lituani',
                    LU: 'Luksemburg',
                    LV: 'Letoni',
                    MT: 'Maltë',
                    NL: 'Hollandë',
                    NO: 'Norvegji',
                    PL: 'Poloni',
                    PT: 'Portugali',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    RS: 'Serbi',
                    SE: 'Suedi',
                    SI: 'Slloveni',
                    SK: 'Sllovaki',
                    VE: 'Venezuelë',
                    ZA: 'Afrikë e Jugut'
                }
            },
            vin: {
                'default': 'Ju lutem vendosni një numër VIN të vlefshëm'
            },
            zipCode: {
                'default': 'Ju lutem vendosni një kod postar të vlefshëm',
                country: 'Ju lutem vendosni një kod postar të vlefshëm në %s',
                countries: {
                    AT: 'Austri',
                    BG: 'Bullgari',
                    BR: 'Brazil',
                    CA: 'Kanada',
                    CH: 'Zvicër',
                    CZ: 'Republika Çeke',
                    DE: 'Gjermani',
                    DK: 'Danimarkë',
                    ES: 'Spanjë',
                    FR: 'Francë',
                    GB: 'Mbretëria e Bashkuar',
                    IE: 'Irlandë',
                    IN: 'Indi',
                    IT: 'Itali',
                    MA: 'Marok',
                    NL: 'Hollandë',
                    PL: 'Poloni',
                    PT: 'Portugali',
                    RO: 'Rumani',
                    RU: 'Rusi',
                    SE: 'Suedi',
                    SG: 'Singapor',
                    SK: 'Sllovaki',
                    US: 'SHBA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Serbian Latin language package
     * Translated by @markocrni
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sr_RS': {
            base64: {
                'default': 'Molimo da unesete važeći base 64 enkodovan'
            },
            between: {
                'default': 'Molimo da unesete vrednost između %s i %s',
                notInclusive: 'Molimo da unesete vrednost strogo između %s i %s'
            },
            bic: {
                'default': 'Molimo da unesete ispravan BIC broj'
            },
            callback: {
                'default': 'Molimo da unesete važeću vrednost'
            },
            choice: {
                'default': 'Molimo da unesete važeću vrednost',
                less: 'Molimo da odaberete minimalno %s opciju(a)',
                more: 'Molimo da odaberete maksimalno %s opciju(a)',
                between: 'Molimo odaberite %s - %s opcije(a)'
            },
            color: {
                'default': 'Molimo da unesete ispravnu boju'
            },
            creditCard: {
                'default': 'Molimo da unesete ispravan broj kreditne kartice'
            },
            cusip: {
                'default': 'Molimo da unesete ispravan CUSIP broj'
            },
            cvv: {
                'default': 'Molimo da unesete ispravan CVV broj'
            },
            date: {
                'default': 'Molimo da unesete ispravan datum',
                min: 'Molimo da unesete datum posle %s',
                max: 'Molimo da unesete datum pre %s',
                range: 'Molimo da unesete datum od %s do %s'
            },
            different: {
                'default': 'Molimo da unesete drugu vrednost'
            },
            digits: {
                'default': 'Molimo da unesete samo cifre'
            },
            ean: {
                'default': 'Molimo da unesete ispravan EAN broj'
            },
            ein: {
                'default': 'Molimo da unesete ispravan EIN broj'
            },
            emailAddress: {
                'default': 'Molimo da unesete važeću e-mail adresu'
            },
            file: {
                'default': 'Molimo da unesete ispravan fajl'
            },
            greaterThan: {
                'default': 'Molimo da unesete vrednost veću ili jednaku od %s',
                notInclusive: 'Molimo da unesete vrednost veću od %s'
            },
            grid: {
                'default': 'Molimo da unesete ispravan GRId broj'
            },
            hex: {
                'default': 'Molimo da unesete ispravan heksadecimalan broj'
            },
            iban: {
                'default': 'Molimo da unesete ispravan IBAN broj',
                country: 'Molimo da unesete ispravan IBAN broj %s',
                countries: {
                    AD: 'Andore',
                    AE: 'Ujedinjenih Arapskih Emirata',
                    AL: 'Albanije',
                    AO: 'Angole',
                    AT: 'Austrije',
                    AZ: 'Azerbejdžana',
                    BA: 'Bosne i Hercegovine',
                    BE: 'Belgije',
                    BF: 'Burkina Fasa',
                    BG: 'Bugarske',
                    BH: 'Bahraina',
                    BI: 'Burundija',
                    BJ: 'Benina',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CI: 'Obale slonovače',
                    CM: 'Kameruna',
                    CR: 'Kostarike',
                    CV: 'Zelenorotskih Ostrva',
                    CY: 'Kipra',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    DO: 'Dominike',
                    DZ: 'Alžira',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    FO: 'Farskih Ostrva',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    GE: 'Džordžije',
                    GI: 'Giblartara',
                    GL: 'Grenlanda',
                    GR: 'Grčke',
                    GT: 'Gvatemale',
                    HR: 'Hrvatske',
                    HU: 'Mađarske',
                    IE: 'Irske',
                    IL: 'Izraela',
                    IR: 'Irana',
                    IS: 'Islanda',
                    IT: 'Italije',
                    JO: 'Jordana',
                    KW: 'Kuvajta',
                    KZ: 'Kazahstana',
                    LB: 'Libana',
                    LI: 'Lihtenštajna',
                    LT: 'Litvanije',
                    LU: 'Luksemburga',
                    LV: 'Latvije',
                    MC: 'Monaka',
                    MD: 'Moldove',
                    ME: 'Crne Gore',
                    MG: 'Madagaskara',
                    MK: 'Makedonije',
                    ML: 'Malija',
                    MR: 'Mauritanije',
                    MT: 'Malte',
                    MU: 'Mauricijusa',
                    MZ: 'Mozambika',
                    NL: 'Holandije',
                    NO: 'Norveške',
                    PK: 'Pakistana',
                    PL: 'Poljske',
                    PS: 'Palestine',
                    PT: 'Portugala',
                    QA: 'Katara',
                    RO: 'Rumunije',
                    RS: 'Srbije',
                    SA: 'Saudijske Arabije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    SM: 'San Marina',
                    SN: 'Senegala',
                    TN: 'Tunisa',
                    TR: 'Turske',
                    VG: 'Britanskih Devičanskih Ostrva'
                }
            },
            id: {
                'default': 'Molimo da unesete ispravan identifikacioni broj',
                country: 'Molimo da unesete ispravan identifikacioni broj %s',
                countries: {
                    BA: 'Bosne i Herzegovine',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CL: 'Čilea',
                    CN: 'Kine',
                    CZ: 'Češke',
                    DK: 'Danske',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    HR: 'Hrvatske',
                    IE: 'Irske',
                    IS: 'Islanda',
                    LT: 'Litvanije',
                    LV: 'Letonije',
                    ME: 'Crne Gore',
                    MK: 'Makedonije',
                    NL: 'Holandije',
                    PL: 'Poljske',
                    RO: 'Rumunije',
                    RS: 'Srbije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    SM: 'San Marina',
                    TH: 'Tajlanda',
                    ZA: 'Južne Afrike'
                }
            },
            identical: {
                'default': 'Molimo da unesete istu vrednost'
            },
            imei: {
                'default': 'Molimo da unesete ispravan IMEI broj'
            },
            imo: {
                'default': 'Molimo da unesete ispravan IMO broj'
            },
            integer: {
                'default': 'Molimo da unesete ispravan broj'
            },
            ip: {
                'default': 'Molimo da unesete ispravnu IP adresu',
                ipv4: 'Molimo da unesete ispravnu IPv4 adresu',
                ipv6: 'Molimo da unesete ispravnu IPv6 adresu'
            },
            isbn: {
                'default': 'Molimo da unesete ispravan ISBN broj'
            },
            isin: {
                'default': 'Molimo da unesete ispravan ISIN broj'
            },
            ismn: {
                'default': 'Molimo da unesete ispravan ISMN broj'
            },
            issn: {
                'default': 'Molimo da unesete ispravan ISSN broj'
            },
            lessThan: {
                'default': 'Molimo da unesete vrednost manju ili jednaku od %s',
                notInclusive: 'Molimo da unesete vrednost manju od %s'
            },
            mac: {
                'default': 'Molimo da unesete ispravnu MAC adresu'
            },
            meid: {
                'default': 'Molimo da unesete ispravan MEID broj'
            },
            notEmpty: {
                'default': 'Molimo da unesete vrednost'
            },
            numeric: {
                'default': 'Molimo da unesete ispravan decimalni broj'
            },
            phone: {
                'default': 'Molimo da unesete ispravan broj telefona',
                country: 'Molimo da unesete ispravan broj telefona %s',
                countries: {
                    AE: 'Ujedinjenih Arapskih Emirata',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CN: 'Kine',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    ES: 'Španije',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    IN: 'Индија',
                    MA: 'Maroka',
                    NL: 'Holandije',
                    PK: 'Pakistana',
                    RO: 'Rumunije',
                    RU: 'Rusije',
                    SK: 'Slovačke',
                    TH: 'Tajlanda',
                    US: 'Amerike',
                    VE: 'Venecuele'
                }
            },
            regexp: {
                'default': 'Molimo da unesete vrednost koja se poklapa sa paternom'
            },
            remote: {
                'default': 'Molimo da unesete ispravnu vrednost'
            },
            rtn: {
                'default': 'Molimo da unesete ispravan RTN broj'
            },
            sedol: {
                'default': 'Molimo da unesete ispravan SEDOL broj'
            },
            siren: {
                'default': 'Molimo da unesete ispravan SIREN broj'
            },
            siret: {
                'default': 'Molimo da unesete ispravan SIRET broj'
            },
            step: {
                'default': 'Molimo da unesete ispravan korak od %s'
            },
            stringCase: {
                'default': 'Molimo da unesete samo mala slova',
                upper: 'Molimo da unesete samo velika slova'
            },
            stringLength: {
                'default': 'Molimo da unesete vrednost sa ispravnom dužinom',
                less: 'Molimo da unesete manje od %s karaktera',
                more: 'Molimo da unesete više od %s karaktera',
                between: 'Molimo da unesete vrednost dužine između %s i %s karaktera'
            },
            uri: {
                'default': 'Molimo da unesete ispravan URI'
            },
            uuid: {
                'default': 'Molimo da unesete ispravan UUID broj',
                version: 'Molimo da unesete ispravnu verziju UUID %s broja'
            },
            vat: {
                'default': 'Molimo da unesete ispravan VAT broj',
                country: 'Molimo da unesete ispravan VAT broj %s',
                countries: {
                    AT: 'Austrije',
                    BE: 'Belgije',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CH: 'Švajcarske',
                    CY: 'Kipra',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    EE: 'Estonije',
                    ES: 'Španije',
                    FI: 'Finske',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    GR: 'Grčke',
                    EL: 'Grčke',
                    HU: 'Mađarske',
                    HR: 'Hrvatske',
                    IE: 'Irske',
                    IS: 'Islanda',
                    IT: 'Italije',
                    LT: 'Litvanije',
                    LU: 'Luksemburga',
                    LV: 'Letonije',
                    MT: 'Malte',
                    NL: 'Holandije',
                    NO: 'Norveške',
                    PL: 'Poljske',
                    PT: 'Portugala',
                    RO: 'Romunje',
                    RU: 'Rusije',
                    RS: 'Srbije',
                    SE: 'Švedske',
                    SI: 'Slovenije',
                    SK: 'Slovačke',
                    VE: 'Venecuele',
                    ZA: 'Južne Afrike'
                }
            },
            vin: {
                'default': 'Molimo da unesete ispravan VIN broj'
            },
            zipCode: {
                'default': 'Molimo da unesete ispravan poštanski broj',
                country: 'Molimo da unesete ispravan poštanski broj %s',
                countries: {
                    AT: 'Austrije',
                    BG: 'Bugarske',
                    BR: 'Brazila',
                    CA: 'Kanade',
                    CH: 'Švajcarske',
                    CZ: 'Češke',
                    DE: 'Nemačke',
                    DK: 'Danske',
                    ES: 'Španije',
                    FR: 'Francuske',
                    GB: 'Engleske',
                    IE: 'Irske',
                    IN: 'Индија',
                    IT: 'Italije',
                    MA: 'Maroka',
                    NL: 'Holandije',
                    PL: 'Poljske',
                    PT: 'Portugala',
                    RO: 'Rumunije',
                    RU: 'Rusije',
                    SE: 'Švedske',
                    SG: 'Singapura',
                    SK: 'Slovačke',
                    US: 'Amerike'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Swedish language package
     * Translated by @ulsa
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'sv_SE': {
            base64: {
                'default': 'Vänligen mata in ett giltigt Base64-kodat värde'
            },
            between: {
                'default': 'Vänligen mata in ett värde mellan %s och %s',
                notInclusive: 'Vänligen mata in ett värde strikt mellan %s och %s'
            },
            bic: {
                'default': 'Vänligen mata in ett giltigt BIC-nummer'
            },
            callback: {
                'default': 'Vänligen mata in ett giltigt värde'
            },
            choice: {
                'default': 'Vänligen mata in ett giltigt värde',
                less: 'Vänligen välj minst %s alternativ',
                more: 'Vänligen välj max %s alternativ',
                between: 'Vänligen välj %s - %s alternativ'
            },
            color: {
                'default': 'Vänligen mata in en giltig färg'
            },
            creditCard: {
                'default': 'Vänligen mata in ett giltigt kredikortsnummer'
            },
            cusip: {
                'default': 'Vänligen mata in ett giltigt CUSIP-nummer'
            },
            cvv: {
                'default': 'Vänligen mata in ett giltigt CVV-nummer'
            },
            date: {
                'default': 'Vänligen mata in ett giltigt datum',
                min: 'Vänligen mata in ett datum efter %s',
                max: 'Vänligen mata in ett datum före %s',
                range: 'Vänligen mata in ett datum i intervallet %s - %s'
            },
            different: {
                'default': 'Vänligen mata in ett annat värde'
            },
            digits: {
                'default': 'Vänligen mata in endast siffror'
            },
            ean: {
                'default': 'Vänligen mata in ett giltigt EAN-nummer'
            },
            ein: {
                'default': 'Vänligen mata in ett giltigt EIN-nummer'
            },
            emailAddress: {
                'default': 'Vänligen mata in en giltig emailadress'
            },
            file: {
                'default': 'Vänligen välj en giltig fil'
            },
            greaterThan: {
                'default': 'Vänligen mata in ett värde större än eller lika med %s',
                notInclusive: 'Vänligen mata in ett värde större än %s'
            },
            grid: {
                'default': 'Vänligen mata in ett giltigt GRID-nummer'
            },
            hex: {
                'default': 'Vänligen mata in ett giltigt hexadecimalt tal'
            },
            iban: {
                'default': 'Vänligen mata in ett giltigt IBAN-nummer',
                country: 'Vänligen mata in ett giltigt IBAN-nummer i %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Förenade Arabemiraten',
                    AL: 'Albanien',
                    AO: 'Angola',
                    AT: 'Österrike',
                    AZ: 'Azerbadjan',
                    BA: 'Bosnien och Herzegovina',
                    BE: 'Belgien',
                    BF: 'Burkina Faso',
                    BG: 'Bulgarien',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CI: 'Elfenbenskusten',
                    CM: 'Kamerun',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Cypern',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    DO: 'Dominikanska Republiken',
                    DZ: 'Algeriet',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FO: 'Färöarna',
                    FR: 'Frankrike',
                    GB: 'Storbritannien',
                    GE: 'Georgien',
                    GI: 'Gibraltar',
                    GL: 'Grönland',
                    GR: 'Greekland',
                    GT: 'Guatemala',
                    HR: 'Kroatien',
                    HU: 'Ungern',
                    IE: 'Irland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Island',
                    IT: 'Italien',
                    JO: 'Jordanien',
                    KW: 'Kuwait',
                    KZ: 'Kazakstan',
                    LB: 'Libanon',
                    LI: 'Lichtenstein',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MC: 'Monaco',
                    MD: 'Moldovien',
                    ME: 'Montenegro',
                    MG: 'Madagaskar',
                    MK: 'Makedonien',
                    ML: 'Mali',
                    MR: 'Mauretanien',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Holland',
                    NO: 'Norge',
                    PK: 'Pakistan',
                    PL: 'Polen',
                    PS: 'Palestina',
                    PT: 'Portugal',
                    QA: 'Qatar',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SA: 'Saudiarabien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisien',
                    TR: 'Turkiet',
                    VG: 'Brittiska Jungfruöarna'
                }
            },
            id: {
                'default': 'Vänligen mata in ett giltigt identifikationsnummer',
                country: 'Vänligen mata in ett giltigt identifikationsnummer i %s',
                countries: {
                    BA: 'Bosnien och Hercegovina',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CL: 'Chile',
                    CN: 'Kina',
                    CZ: 'Tjeckien',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    LT: 'Litauen',
                    LV: 'Lettland',
                    ME: 'Montenegro',
                    MK: 'Makedonien',
                    NL: 'Nederländerna',
                    PL: 'Polen',
                    RO: 'Rumänien',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    SM: 'San Marino',
                    TH: 'Thailand',
                    ZA: 'Sydafrika'
                }
            },
            identical: {
                'default': 'Vänligen mata in samma värde'
            },
            imei: {
                'default': 'Vänligen mata in ett giltigt IMEI-nummer'
            },
            imo: {
                'default': 'Vänligen mata in ett giltigt IMO-nummer'
            },
            integer: {
                'default': 'Vänligen mata in ett giltigt heltal'
            },
            ip: {
                'default': 'Vänligen mata in en giltig IP-adress',
                ipv4: 'Vänligen mata in en giltig IPv4-adress',
                ipv6: 'Vänligen mata in en giltig IPv6-adress'
            },
            isbn: {
                'default': 'Vänligen mata in ett giltigt ISBN-nummer'
            },
            isin: {
                'default': 'Vänligen mata in ett giltigt ISIN-nummer'
            },
            ismn: {
                'default': 'Vänligen mata in ett giltigt ISMN-nummer'
            },
            issn: {
                'default': 'Vänligen mata in ett giltigt ISSN-nummer'
            },
            lessThan: {
                'default': 'Vänligen mata in ett värde mindre än eller lika med %s',
                notInclusive: 'Vänligen mata in ett värde mindre än %s'
            },
            mac: {
                'default': 'Vänligen mata in en giltig MAC-adress'
            },
            meid: {
                'default': 'Vänligen mata in ett giltigt MEID-nummer'
            },
            notEmpty: {
                'default': 'Vänligen mata in ett värde'
            },
            numeric: {
                'default': 'Vänligen mata in ett giltigt flyttal'
            },
            phone: {
                'default': 'Vänligen mata in ett giltigt telefonnummer',
                country: 'Vänligen mata in ett giltigt telefonnummer i %s',
                countries: {
                    AE: 'Förenade Arabemiraten',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CN: 'Kina',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrike',
                    GB: 'Storbritannien',
                    IN: 'Indien',
                    MA: 'Marocko',
                    NL: 'Holland',
                    PK: 'Pakistan',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    SK: 'Slovakien',
                    TH: 'Thailand',
                    US: 'USA',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Vänligen mata in ett värde som matchar uttrycket'
            },
            remote: {
                'default': 'Vänligen mata in ett giltigt värde'
            },
            rtn: {
                'default': 'Vänligen mata in ett giltigt RTN-nummer'
            },
            sedol: {
                'default': 'Vänligen mata in ett giltigt SEDOL-nummer'
            },
            siren: {
                'default': 'Vänligen mata in ett giltigt SIREN-nummer'
            },
            siret: {
                'default': 'Vänligen mata in ett giltigt SIRET-nummer'
            },
            step: {
                'default': 'Vänligen mata in ett giltigt steg av %s'
            },
            stringCase: {
                'default': 'Vänligen mata in endast små bokstäver',
                upper: 'Vänligen mata in endast stora bokstäver'
            },
            stringLength: {
                'default': 'Vänligen mata in ett värde med giltig längd',
                less: 'Vänligen mata in färre än %s tecken',
                more: 'Vänligen mata in fler än %s tecken',
                between: 'Vänligen mata in ett värde mellan %s och %s tecken långt'
            },
            uri: {
                'default': 'Vänligen mata in en giltig URI'
            },
            uuid: {
                'default': 'Vänligen mata in ett giltigt UUID-nummer',
                version: 'Vänligen mata in ett giltigt UUID-nummer av version %s'
            },
            vat: {
                'default': 'Vänligen mata in ett giltigt momsregistreringsnummer',
                country: 'Vänligen mata in ett giltigt momsregistreringsnummer i %s',
                countries: {
                    AT: 'Österrike',
                    BE: 'Belgien',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CH: 'Schweiz',
                    CY: 'Cypern',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    EE: 'Estland',
                    ES: 'Spanien',
                    FI: 'Finland',
                    FR: 'Frankrike',
                    GB: 'Förenade Kungariket',
                    GR: 'Grekland',
                    EL: 'Grekland',
                    HU: 'Ungern',
                    HR: 'Kroatien',
                    IE: 'Irland',
                    IS: 'Island',
                    IT: 'Italien',
                    LT: 'Litauen',
                    LU: 'Luxemburg',
                    LV: 'Lettland',
                    MT: 'Malta',
                    NL: 'Nederländerna',
                    NO: 'Norge',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    RS: 'Serbien',
                    SE: 'Sverige',
                    SI: 'Slovenien',
                    SK: 'Slovakien',
                    VE: 'Venezuela',
                    ZA: 'Sydafrika'
                }
            },
            vin: {
                'default': 'Vänligen mata in ett giltigt VIN-nummer'
            },
            zipCode: {
                'default': 'Vänligen mata in ett giltigt postnummer',
                country: 'Vänligen mata in ett giltigt postnummer i %s',
                countries: {
                    AT: 'Österrike',
                    BG: 'Bulgarien',
                    BR: 'Brasilien',
                    CA: 'Kanada',
                    CH: 'Schweiz',
                    CZ: 'Tjeckien',
                    DE: 'Tyskland',
                    DK: 'Danmark',
                    ES: 'Spanien',
                    FR: 'Frankrike',
                    GB: 'Förenade Kungariket',
                    IE: 'Irland',
                    IN: 'Indien',
                    IT: 'Italien',
                    MA: 'Marocko',
                    NL: 'Nederländerna',
                    PL: 'Polen',
                    PT: 'Portugal',
                    RO: 'Rumänien',
                    RU: 'Ryssland',
                    SE: 'Sverige',
                    SG: 'Singapore',
                    SK: 'Slovakien',
                    US: 'USA'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Thai language package
     * Translated by @figgaro
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'th_TH': {
            base64: {
                'default': 'กรุณาระบุ base 64 encoded ให้ถูกต้อง'
            },
            between: {
                'default': 'กรุณาระบุค่าระหว่าง %s และ %s',
                notInclusive: 'กรุณาระบุค่าระหว่าง %s และ %s เท่านั้น'
            },
            bic: {
                'default': 'กรุณาระบุหมายเลข BIC ให้ถูกต้อง'
            },
            callback: {
                'default': 'กรุณาระบุค่าให้ถูก'
            },
            choice: {
                'default': 'กรุณาระบุค่าให้ถูกต้อง',
                less: 'โปรดเลือกตัวเลือก %s ที่ต่ำสุด',
                more: 'โปรดเลือกตัวเลือก %s ที่สูงสุด',
                between: 'กรุณาเลือก %s - %s ที่มีอยู่'
            },
            color: {
                'default': 'กรุณาระบุค่าสี color ให้ถูกต้อง'
            },
            creditCard: {
                'default': 'กรุณาระบุเลขที่บัตรเครดิตให้ถูกต้อง'
            },
            cusip: {
                'default': 'กรุณาระบุหมายเลข CUSIP ให้ถูกต้อง'
            },
            cvv: {
                'default': 'กรุณาระบุ CVV ให้ถูกต้อง'
            },
            date: {
                'default': 'กรุณาระบุวันที่ให้ถูกต้อง',
                min: 'ไม่สามารถระบุวันที่ได้ก่อน %s',
                max: 'ไม่สามารถระบุวันที่ได้หลังจาก %s',
                range: 'โปรดระบุวันที่ระหว่าง %s - %s'
            },
            different: {
                'default': 'กรุณาระบุค่าอื่นที่แตกต่าง'
            },
            digits: {
                'default': 'กรุณาระบุตัวเลขเท่านั้น'
            },
            ean: {
                'default': 'กรุณาระบุหมายเลข EAN ให้ถูกต้อง'
            },
            ein: {
                'default': 'กรุณาระบุหมายเลข EIN ให้ถูกต้อง'
            },
            emailAddress: {
                'default': 'กรุณาระบุอีเมล์ให้ถูกต้อง'
            },
            file: {
                'default': 'กรุณาเลือกไฟล์'
            },
            greaterThan: {
                'default': 'กรุณาระบุค่ามากกว่าหรือเท่ากับ %s',
                notInclusive: 'กรุณาระบุค่ามากกว่า %s'
            },
            grid: {
                'default': 'กรุณาระบุหมายลข GRId ให้ถูกต้อง'
            },
            hex: {
                'default': 'กรุณาระบุเลขฐานสิบหกให้ถูกต้อง'
            },
            iban: {
                'default': 'กรุณาระบุหมายเลข IBAN ให้ถูกต้อง',
                country: 'กรุณาระบุหมายเลข IBAN ใน %s',
                countries: {
                    AD: 'อันดอร์รา',
                    AE: 'สหรัฐอาหรับเอมิเรตส์',
                    AL: 'แอลเบเนีย',
                    AO: 'แองโกลา',
                    AT: 'ออสเตรีย',
                    AZ: 'อาเซอร์ไบจาน',
                    BA: 'บอสเนียและเฮอร์เซโก',
                    BE: 'ประเทศเบลเยียม',
                    BF: 'บูร์กินาฟาโซ',
                    BG: 'บัลแกเรีย',
                    BH: 'บาห์เรน',
                    BI: 'บุรุนดี',
                    BJ: 'เบนิน',
                    BR: 'บราซิล',
                    CH: 'สวิตเซอร์แลนด์',
                    CI: 'ไอวอรี่โคสต์',
                    CM: 'แคเมอรูน',
                    CR: 'คอสตาริกา',
                    CV: 'เคปเวิร์ด',
                    CY: 'ไซปรัส',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    DO: 'สาธารณรัฐโดมินิกัน',
                    DZ: 'แอลจีเรีย',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    FO: 'หมู่เกาะแฟโร',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    GE: 'จอร์เจีย',
                    GI: 'ยิบรอลตา',
                    GL: 'กรีนแลนด์',
                    GR: 'กรีซ',
                    GT: 'กัวเตมาลา',
                    HR: 'โครเอเชีย',
                    HU: 'ฮังการี',
                    IE: 'ไอร์แลนด์',
                    IL: 'อิสราเอล',
                    IR: 'อิหร่าน',
                    IS: 'ไอซ์',
                    IT: 'อิตาลี',
                    JO: 'จอร์แดน',
                    KW: 'คูเวต',
                    KZ: 'คาซัคสถาน',
                    LB: 'เลบานอน',
                    LI: 'Liechtenstein',
                    LT: 'ลิทัวเนีย',
                    LU: 'ลักเซมเบิร์ก',
                    LV: 'ลัตเวีย',
                    MC: 'โมนาโก',
                    MD: 'มอลโดวา',
                    ME: 'มอนเตเนโก',
                    MG: 'มาดากัสการ์',
                    MK: 'มาซิโดเนีย',
                    ML: 'มาลี',
                    MR: 'มอริเตเนีย',
                    MT: 'มอลตา',
                    MU: 'มอริเชียส',
                    MZ: 'โมซัมบิก',
                    NL: 'เนเธอร์แลนด์',
                    NO: 'นอร์เวย์',
                    PK: 'ปากีสถาน',
                    PL: 'โปแลนด์',
                    PS: 'ปาเลสไตน์',
                    PT: 'โปรตุเกส',
                    QA: 'กาตาร์',
                    RO: 'โรมาเนีย',
                    RS: 'เซอร์เบีย',
                    SA: 'ซาอุดิอารเบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    SM: 'ซานมาริโน',
                    SN: 'เซเนกัล',
                    TN: 'ตูนิเซีย',
                    TR: 'ตุรกี',
                    VG: 'หมู่เกาะบริติชเวอร์จิน'
                }
            },
            id: {
                'default': 'โปรดระบุเลขบัตรประจำตัวประชาชนให้ถูกต้อง',
                country: 'โปรดระบุเลขบัตรประจำตัวประชาชนใน %s ให้ถูกต้อง',
                countries: {
                    BA: 'บอสเนียและเฮอร์เซโก',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CH: 'วิตเซอร์แลนด์',
                    CL: 'ชิลี',
                    CN: 'จีน',
                    CZ: 'สาธารณรัฐเชค',
                    DK: 'เดนมาร์ก',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    HR: 'โครเอเชีย',
                    IE: 'ไอร์แลนด์',
                    IS: 'ไอซ์',
                    LT: 'ลิทัวเนีย',
                    LV: 'ลัตเวีย',
                    ME: 'มอนเตเนโก',
                    MK: 'มาซิโดเนีย',
                    NL: 'เนเธอร์แลนด์',
                    PL: 'โปแลนด์',
                    RO: 'โรมาเนีย',
                    RS: 'เซอร์เบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    SM: 'ซานมาริโน',
                    TH: 'ไทย',
                    ZA: 'แอฟริกาใต้'
                }
            },
            identical: {
                'default': 'โปรดระบุค่าให้ตรง'
            },
            imei: {
                'default': 'โปรดระบุหมายเลข IMEI ให้ถูกต้อง'
            },
            imo: {
                'default': 'โปรดระบุหมายเลข IMO ให้ถูกต้อง'
            },
            integer: {
                'default': 'โปรดระบุตัวเลขให้ถูกต้อง'
            },
            ip: {
                'default': 'โปรดระบุ IP address ให้ถูกต้อง',
                ipv4: 'โปรดระบุ IPv4 address ให้ถูกต้อง',
                ipv6: 'โปรดระบุ IPv6 address ให้ถูกต้อง'
            },
            isbn: {
                'default': 'โปรดระบุหมายเลข ISBN ให้ถูกต้อง'
            },
            isin: {
                'default': 'โปรดระบุหมายเลข ISIN ให้ถูกต้อง'
            },
            ismn: {
                'default': 'โปรดระบุหมายเลข ISMN ให้ถูกต้อง'
            },
            issn: {
                'default': 'โปรดระบุหมายเลข ISSN ให้ถูกต้อง'
            },
            lessThan: {
                'default': 'โปรดระบุค่าน้อยกว่าหรือเท่ากับ %s',
                notInclusive: 'โปรดระบุค่าน้อยกว่า %s'
            },
            mac: {
                'default': 'โปรดระบุหมายเลข MAC address ให้ถูกต้อง'
            },
            meid: {
                'default': 'โปรดระบุหมายเลข MEID ให้ถูกต้อง'
            },
            notEmpty: {
                'default': 'โปรดระบุค่า'
            },
            numeric: {
                'default': 'โปรดระบุเลขหน่วยหรือจำนวนทศนิยม ให้ถูกต้อง'
            },
            phone: {
                'default': 'โปรดระบุหมายเลขโทรศัพท์ให้ถูกต้อง',
                country: 'โปรดระบุหมายเลขโทรศัพท์ใน %s ให้ถูกต้อง',
                countries: {
                    AE: 'สหรัฐอาหรับเอมิเรตส์',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CN: 'จีน',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    ES: 'สเปน',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    IN: 'อินเดีย',
                    MA: 'โมร็อกโก',
                    NL: 'เนเธอร์แลนด์',
                    PK: 'ปากีสถาน',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    SK: 'สโลวาเกีย',
                    TH: 'ไทย',
                    US: 'สหรัฐอเมริกา',
                    VE: 'เวเนซูเอลา'
                }
            },
            regexp: {
                'default': 'โปรดระบุค่าให้ตรงกับรูปแบบที่กำหนด'
            },
            remote: {
                'default': 'โปรดระบุค่าให้ถูกต้อง'
            },
            rtn: {
                'default': 'โปรดระบุหมายเลข RTN ให้ถูกต้อง'
            },
            sedol: {
                'default': 'โปรดระบุหมายเลข SEDOL ให้ถูกต้อง'
            },
            siren: {
                'default': 'โปรดระบุหมายเลข SIREN ให้ถูกต้อง'
            },
            siret: {
                'default': 'โปรดระบุหมายเลข SIRET ให้ถูกต้อง'
            },
            step: {
                'default': 'โปรดระบุลำดับของ %s'
            },
            stringCase: {
                'default': 'โปรดระบุตัวอักษรพิมพ์เล็กเท่านั้น',
                upper: 'โปรดระบุตัวอักษรพิมพ์ใหญ่เท่านั้น'
            },
            stringLength: {
                'default': 'ค่าที่ระบุยังไม่ครบตามจำนวนที่กำหนด',
                less: 'โปรดระบุค่าตัวอักษรน้อยกว่า %s ตัว',
                more: 'โปรดระบุค่าตัวอักษรมากกว่า %s ตัว',
                between: 'โปรดระบุค่าตัวอักษรระหว่าง %s ถึง %s ตัวอักษร'
            },
            uri: {
                'default': 'โปรดระบุค่า URI ให้ถูกต้อง'
            },
            uuid: {
                'default': 'โปรดระบุหมายเลข UUID ให้ถูกต้อง',
                version: 'โปรดระบุหมายเลข UUID ในเวอร์ชั่น %s'
            },
            vat: {
                'default': 'โปรดระบุจำนวนภาษีมูลค่าเพิ่ม',
                country: 'โปรดระบุจำนวนภาษีมูลค่าเพิ่มใน %s',
                countries: {
                    AT: 'ออสเตรีย',
                    BE: 'เบลเยี่ยม',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CH: 'วิตเซอร์แลนด์',
                    CY: 'ไซปรัส',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมัน',
                    DK: 'เดนมาร์ก',
                    EE: 'เอสโตเนีย',
                    ES: 'สเปน',
                    FI: 'ฟินแลนด์',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    GR: 'กรีซ',
                    EL: 'กรีซ',
                    HU: 'ฮังการี',
                    HR: 'โครเอเชีย',
                    IE: 'ไอร์แลนด์',
                    IS: 'ไอซ์',
                    IT: 'อิตาลี',
                    LT: 'ลิทัวเนีย',
                    LU: 'ลักเซมเบิร์ก',
                    LV: 'ลัตเวีย',
                    MT: 'มอลตา',
                    NL: 'เนเธอร์แลนด์',
                    NO: 'นอร์เวย์',
                    PL: 'โปแลนด์',
                    PT: 'โปรตุเกส',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    RS: 'เซอร์เบีย',
                    SE: 'สวีเดน',
                    SI: 'สโลวีเนีย',
                    SK: 'สโลวาเกีย',
                    VE: 'เวเนซูเอลา',
                    ZA: 'แอฟริกาใต้'
                }
            },
            vin: {
                'default': 'โปรดระบุหมายเลข VIN ให้ถูกต้อง'
            },
            zipCode: {
                'default': 'โปรดระบุรหัสไปรษณีย์ให้ถูกต้อง',
                country: 'โปรดระบุรหัสไปรษณีย์ให้ถูกต้องใน %s',
                countries: {
                    AT: 'ออสเตรีย',
                    BG: 'บัลแกเรีย',
                    BR: 'บราซิล',
                    CA: 'แคนาดา',
                    CH: 'วิตเซอร์แลนด์',
                    CZ: 'สาธารณรัฐเชค',
                    DE: 'เยอรมนี',
                    DK: 'เดนมาร์ก',
                    ES: 'สเปน',
                    FR: 'ฝรั่งเศส',
                    GB: 'สหราชอาณาจักร',
                    IE: 'ไอร์แลนด์',
                    IN: 'อินเดีย',
                    IT: 'อิตาลี',
                    MA: 'โมร็อกโก',
                    NL: 'เนเธอร์แลนด์',
                    PL: 'โปแลนด์',
                    PT: 'โปรตุเกส',
                    RO: 'โรมาเนีย',
                    RU: 'รัสเซีย',
                    SE: 'สวีเดน',
                    SG: 'สิงคโปร์',
                    SK: 'สโลวาเกีย',
                    US: 'สหรัฐอเมริกา'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Turkish language package
     * Translated By @CeRBeR666
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'tr_TR': {
            base64: {
                'default': 'Lütfen 64 bit tabanına uygun bir giriş yapınız'
            },
            between: {
                'default': 'Lütfen %s ile %s arasında bir değer giriniz',
                notInclusive: 'Lütfen sadece %s ile %s arasında bir değer giriniz'
            },
            bic: {
                'default': 'Lütfen geçerli bir BIC numarası giriniz'
            },
            callback: {
                'default': 'Lütfen geçerli bir değer giriniz'
            },
            choice: {
                'default': 'Lütfen geçerli bir değer giriniz',
                less: 'Lütfen minimum %s kadar değer giriniz',
                more: 'Lütfen maksimum %s kadar değer giriniz',
                between: 'Lütfen %s - %s arası seçiniz'
            },
            color: {
                'default': 'Lütfen geçerli bir codu giriniz'
            },
            creditCard: {
                'default': 'Lütfen geçerli bir kredi kartı numarası giriniz'
            },
            cusip: {
                'default': 'Lütfen geçerli bir CUSIP numarası giriniz'
            },
            cvv: {
                'default': 'Lütfen geçerli bir CCV numarası giriniz'
            },
            date: {
                'default': 'Lütfen geçerli bir tarih giriniz',
                min: 'Lütfen %s tarihinden sonra bir tarih giriniz',
                max: 'Lütfen %s tarihinden önce bir tarih giriniz',
                range: 'Lütfen %s - %s aralığında bir tarih giriniz'
            },
            different: {
                'default': 'Lütfen farklı bir değer giriniz'
            },
            digits: {
                'default': 'Lütfen sadece sayı giriniz'
            },
            ean: {
                'default': 'Lütfen geçerli bir EAN numarası giriniz'
            },
            ein: {
                'default': 'Lütfen geçerli bir EIN numarası giriniz'
            },
            emailAddress: {
                'default': 'Lütfen geçerli bir E-Mail adresi giriniz'
            },
            file: {
                'default': 'Lütfen geçerli bir dosya seçiniz'
            },
            greaterThan: {
                'default': 'Lütfen %s ye eşit veya daha büyük bir değer giriniz',
                notInclusive: 'Lütfen %s den büyük bir değer giriniz'
            },
            grid: {
                'default': 'Lütfen geçerli bir GRId numarası giriniz'
            },
            hex: {
                'default': 'Lütfen geçerli bir Hexadecimal sayı giriniz'
            },
            iban: {
                'default': 'Lütfen geçerli bir IBAN numarası giriniz',
                country: 'Lütfen geçerli bir IBAN numarası giriniz içinde %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Birleşik Arap Emirlikleri',
                    AL: 'Arnavutluk',
                    AO: 'Angola',
                    AT: 'Avusturya',
                    AZ: 'Azerbaycan',
                    BA: 'Bosna Hersek',
                    BE: 'Belçika',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaristan',
                    BH: 'Bahreyn',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CI: 'Fildişi Sahili',
                    CM: 'Kamerun',
                    CR: 'Kosta Rika',
                    CV: 'Cape Verde',
                    CY: 'Kıbrıs',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    DO: 'Dominik Cumhuriyeti',
                    DZ: 'Cezayir',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    FO: 'Faroe Adaları',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    GE: 'Georgia',
                    GI: 'Cebelitarık',
                    GL: 'Grönland',
                    GR: 'Yunansitan',
                    GT: 'Guatemala',
                    HR: 'Hırvatistan',
                    HU: 'Macaristan',
                    IE: 'İrlanda',
                    IL: 'İsrail',
                    IR: 'İran',
                    IS: 'İzlanda',
                    IT: 'İtalya',
                    JO: 'Ürdün',
                    KW: 'Kuveit',
                    KZ: 'Kazakistan',
                    LB: 'Lübnan',
                    LI: 'Lihtenştayn',
                    LT: 'Litvanya',
                    LU: 'Lüksemburg',
                    LV: 'Letonya',
                    MC: 'Monako',
                    MD: 'Moldova',
                    ME: 'Karadağ',
                    MG: 'Madagaskar',
                    MK: 'Makedonya',
                    ML: 'Mali',
                    MR: 'Moritanya',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambik',
                    NL: 'Hollanda',
                    NO: 'Norveç',
                    PK: 'Pakistan',
                    PL: 'Polanya',
                    PS: 'Filistin',
                    PT: 'Portekiz',
                    QA: 'Katar',
                    RO: 'Romanya',
                    RS: 'Serbistan',
                    SA: 'Suudi Arabistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunus',
                    TR: 'Turkiye',
                    VG: 'Virgin Adaları, İngiliz'
                }
            },
            id: {
                'default': 'Lütfen geçerli bir tanımlama numarası giriniz',
                country: 'Lütfen geçerli bir kimlik numarası giriniz içinde %s',
                countries: {
                    BA: 'Bosna Hersek',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CL: 'Şili',
                    CN: 'Çin',
                    CZ: 'Çek Cumhuriyeti',
                    DK: 'Danimarka',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    HR: 'Hırvatistan',
                    IE: 'İrlanda',
                    IS: 'İzlanda',
                    LT: 'Litvanya',
                    LV: 'Letonya',
                    ME: 'Karadağ',
                    MK: 'Makedonya',
                    NL: 'Hollanda',
                    PL: 'Polanya',
                    RO: 'Romanya',
                    RS: 'Sırbistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    SM: 'San Marino',
                    TH: 'Tayland',
                    ZA: 'Güney Afrika'
                }
            },
            identical: {
                'default': 'Lütfen aynı değeri giriniz'
            },
            imei: {
                'default': 'Lütfen geçerli bir IMEI numarası giriniz'
            },
            imo: {
                'default': 'Lütfen geçerli bir IMO numarası giriniz'
            },
            integer: {
                'default': 'Lütfen geçerli bir numara giriniz'
            },
            ip: {
                'default': 'Lütfen geçerli bir IP adresi giriniz',
                ipv4: 'Lütfen geçerli bir IPv4 adresi giriniz',
                ipv6: 'Lütfen geçerli bri IPv6 adresi giriniz'
            },
            isbn: {
                'default': 'Lütfen geçerli bir ISBN numarası giriniz'
            },
            isin: {
                'default': 'Lütfen geçerli bir ISIN numarası giriniz'
            },
            ismn: {
                'default': 'Lütfen geçerli bir ISMN numarası giriniz'
            },
            issn: {
                'default': 'Lütfen geçerli bir ISSN numarası giriniz'
            },
            lessThan: {
                'default': 'Lütfen %s den düşük veya eşit bir değer giriniz',
                notInclusive: 'Lütfen %s den büyük bir değer giriniz'
            },
            mac: {
                'default': 'Lütfen geçerli bir MAC Adresi giriniz'
            },
            meid: {
                'default': 'Lütfen geçerli bir MEID numarası giriniz'
            },
            notEmpty: {
                'default': 'Bir değer giriniz'
            },
            numeric: {
                'default': 'Lütfen geçerli bir float değer giriniz'
            },
            phone: {
                'default': 'Lütfen geçerli bir telefon numarası giriniz',
                country: 'Lütfen geçerli bir telefon numarası giriniz içinde %s',
                countries: {
                    AE: 'Birleşik Arap Emirlikleri',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CN: 'Çin',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    ES: 'İspanya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    IN: 'Hindistan',
                    MA: 'Fas',
                    NL: 'Hollanda',
                    PK: 'Pakistan',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    SK: 'Slovakya',
                    TH: 'Tayland',
                    US: 'Amerika',
                    VE: 'Venezüella'
                }
            },
            regexp: {
                'default': 'Lütfen uyumlu bir değer giriniz'
            },
            remote: {
                'default': 'Lütfen geçerli bir numara giriniz'
            },
            rtn: {
                'default': 'Lütfen geçerli bir RTN numarası giriniz'
            },
            sedol: {
                'default': 'Lütfen geçerli bir SEDOL numarası giriniz'
            },
            siren: {
                'default': 'Lütfen geçerli bir SIREN numarası giriniz'
            },
            siret: {
                'default': 'Lütfen geçerli bir SIRET numarası giriniz'
            },
            step: {
                'default': 'Lütfen geçerli bir %s adımı giriniz'
            },
            stringCase: {
                'default': 'Lütfen sadece küçük harf giriniz',
                upper: 'Lütfen sadece büyük harf giriniz'
            },
            stringLength: {
                'default': 'Lütfen geçerli uzunluktaki bir değer giriniz',
                less: 'Lütfen %s karakterden az değer giriniz',
                more: 'Lütfen %s karakterden fazla değer giriniz',
                between: 'Lütfen %s ile %s arası uzunlukta bir değer giriniz'
            },
            uri: {
                'default': 'Lütfen geçerli bir URL giriniz'
            },
            uuid: {
                'default': 'Lütfen geçerli bir UUID numarası giriniz',
                version: 'Lütfen geçerli bir UUID versiyon %s numarası giriniz'
            },
            vat: {
                'default': 'Lütfen geçerli bir VAT kodu giriniz',
                country: 'Lütfen geçerli bir vergi numarası giriniz içinde %s',
                countries: {
                    AT: 'Avustralya',
                    BE: 'Belçika',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CH: 'İsviçre',
                    CY: 'Kıbrıs',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    EE: 'Estonya',
                    ES: 'İspanya',
                    FI: 'Finlandiya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    GR: 'Yunanistan',
                    EL: 'Yunanistan',
                    HU: 'Macaristan',
                    HR: 'Hırvatistan',
                    IE: 'Irlanda',
                    IS: 'İzlanda',
                    IT: 'Italya',
                    LT: 'Litvanya',
                    LU: 'Lüksemburg',
                    LV: 'Letonya',
                    MT: 'Malta',
                    NL: 'Hollanda',
                    NO: 'Norveç',
                    PL: 'Polonya',
                    PT: 'Portekiz',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    RS: 'Sırbistan',
                    SE: 'İsveç',
                    SI: 'Slovenya',
                    SK: 'Slovakya',
                    VE: 'Venezüella',
                    ZA: 'Güney Afrika'
                }
            },
            vin: {
                'default': 'Lütfen geçerli bir VIN numarası giriniz'
            },
            zipCode: {
                'default': 'Lütfen geçerli bir posta kodu giriniz',
                country: 'Lütfen geçerli bir posta kodu giriniz içinde %s',
                countries: {
                    AT: 'Avustralya',
                    BG: 'Bulgaristan',
                    BR: 'Brezilya',
                    CA: 'Kanada',
                    CH: 'İsviçre',
                    CZ: 'Çek Cumhuriyeti',
                    DE: 'Almanya',
                    DK: 'Danimarka',
                    ES: 'İspanya',
                    FR: 'Fransa',
                    GB: 'İngiltere',
                    IE: 'Irlanda',
                    IN: 'Hindistan',
                    IT: 'İtalya',
                    MA: 'Fas',
                    NL: 'Hollanda',
                    PL: 'Polanya',
                    PT: 'Portekiz',
                    RO: 'Romanya',
                    RU: 'Rusya',
                    SE: 'İsveç',
                    SG: 'Singapur',
                    SK: 'Slovakya',
                    US: 'Amerika Birleşik Devletleri'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Ukrainian language package
     * Translated by @oleg-voloshyn
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'ua_UA': {
            base64: {
                'default': 'Будь ласка, введіть коректний рядок base64'
            },
            between: {
                'default': 'Будь ласка, введіть значення від %s до %s',
                notInclusive: 'Будь ласка, введіть значення між %s і %s'
            },
            bic: {
                'default': 'Будь ласка, введіть правильний номер BIC'
            },
            callback: {
                'default': 'Будь ласка, введіть коректне значення'
            },
            choice: {
                'default': 'Будь ласка, введіть коректне значення',
                less: 'Будь ласка, виберіть хоча б %s опцій',
                more: 'Будь ласка, виберіть не більше %s опцій',
                between: 'Будь ласка, виберіть %s - %s опцій'
            },
            color: {
                'default': 'Будь ласка, введіть правильний номер кольору'
            },
            creditCard: {
                'default': 'Будь ласка, введіть правильний номер кредитної картки'
            },
            cusip: {
                'default': 'Будь ласка, введіть правильний номер CUSIP'
            },
            cvv: {
                'default': 'Будь ласка, введіть правильний номер CVV'
            },
            date: {
                'default': 'Будь ласка, введіть правильну дату',
                min: 'Будь ласка, введіть дату після %s',
                max: 'Будь ласка, введіть дату перед %s',
                range: 'Будь ласка, введіть дату у діапазоні %s - %s'
            },
            different: {
                'default': 'Будь ласка, введіть інше значення'
            },
            digits: {
                'default': 'Будь ласка, введіть тільки цифри'
            },
            ean: {
                'default': 'Будь ласка, введіть правильний номер EAN'
            },
            ein: {
                'default': 'Будь ласка, введіть правильний номер EIN'
            },
            emailAddress: {
                'default': 'Будь ласка, введіть правильну адресу e-mail'
            },
            file: {
                'default': 'Будь ласка, виберіть файл'
            },
            greaterThan: {
                'default': 'Будь ласка, введіть значення більше або рівне %s',
                notInclusive: 'Будь ласка, введіть значення більше %s'
            },
            grid: {
                'default': 'Будь ласка, введіть правильний номер GRId'
            },
            hex: {
                'default': 'Будь ласка, введіть правильний шістнадцятковий(16) номер'
            },
            iban: {
                'default': 'Будь ласка, введіть правильний номер IBAN',
                country: 'Будь ласка, введіть правильний номер IBAN в %s',
                countries: {
                    AD: 'Андоррі',
                    AE: 'Об\'єднаних Арабських Еміратах',
                    AL: 'Албанії',
                    AO: 'Анголі',
                    AT: 'Австрії',
                    AZ: 'Азербайджані',
                    BA: 'Боснії і Герцеговині',
                    BE: 'Бельгії',
                    BF: 'Буркіна-Фасо',
                    BG: 'Болгарії',
                    BH: 'Бахрейні',
                    BI: 'Бурунді',
                    BJ: 'Беніні',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CI: 'Кот-д\'Івуарі',
                    CM: 'Камеруні',
                    CR: 'Коста-Ріці',
                    CV: 'Кабо-Верде',
                    CY: 'Кіпрі',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    DO: 'Домінікані',
                    DZ: 'Алжирі',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    FO: 'Фарерських островах',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    GE: 'Грузії',
                    GI: 'Гібралтарі',
                    GL: 'Гренландії',
                    GR: 'Греції',
                    GT: 'Гватемалі',
                    HR: 'Хорватії',
                    HU: 'Венгрії',
                    IE: 'Ірландії',
                    IL: 'Ізраїлі',
                    IR: 'Ірані',
                    IS: 'Ісландії',
                    IT: 'Італії',
                    JO: 'Йорданії',
                    KW: 'Кувейті',
                    KZ: 'Казахстані',
                    LB: 'Лівані',
                    LI: 'Ліхтенштейні',
                    LT: 'Литві',
                    LU: 'Люксембурзі',
                    LV: 'Латвії',
                    MC: 'Монако',
                    MD: 'Молдові',
                    ME: 'Чорногорії',
                    MG: 'Мадагаскарі',
                    MK: 'Македонії',
                    ML: 'Малі',
                    MR: 'Мавританії',
                    MT: 'Мальті',
                    MU: 'Маврикії',
                    MZ: 'Мозамбіку',
                    NL: 'Нідерландах',
                    NO: 'Норвегії',
                    PK: 'Пакистані',
                    PL: 'Польщі',
                    PS: 'Палестині',
                    PT: 'Португалії',
                    QA: 'Катарі',
                    RO: 'Румунії',
                    RS: 'Сербії',
                    SA: 'Саудівської Аравії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    SM: 'Сан-Марино',
                    SN: 'Сенегалі',
                    TN: 'Тунісі',
                    TR: 'Туреччині',
                    VG: 'Британських Віргінських островах'
                }
            },
            id: {
                'default': 'Будь ласка, введіть правильний ідентифікаційний номер',
                country: 'Будь ласка, введіть правильний ідентифікаційний номер в %s',
                countries: {
                    BA: 'Боснії і Герцеговині',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CL: 'Чилі',
                    CN: 'Китаї',
                    CZ: 'Чехії',
                    DK: 'Данії',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    HR: 'Хорватії',
                    IE: 'Ірландії',
                    IS: 'Ісландії',
                    LT: 'Литві',
                    LV: 'Латвії',
                    ME: 'Чорногорії',
                    MK: 'Македонії',
                    NL: 'Нідерландах',
                    PL: 'Польщі',
                    RO: 'Румунії',
                    RS: 'Сербії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    SM: 'Сан-Марино',
                    TH: 'Таїланді',
                    ZA: 'ПАР'
                }
            },
            identical: {
                'default': 'Будь ласка, введіть таке ж значення'
            },
            imei: {
                'default': 'Будь ласка, введіть правильний номер IMEI'
            },
            imo: {
                'default': 'Будь ласка, введіть правильний номер IMO'
            },
            integer: {
                'default': 'Будь ласка, введіть правильне ціле значення'
            },
            ip: {
                'default': 'Будь ласка, введіть правильну IP-адресу',
                ipv4: 'Будь ласка введіть правильну IPv4-адресу',
                ipv6: 'Будь ласка введіть правильну IPv6-адресу'
            },
            isbn: {
                'default': 'Будь ласка, введіть правильний номер ISBN'
            },
            isin: {
                'default': 'Будь ласка, введіть правильний номер ISIN'
            },
            ismn: {
                'default': 'Будь ласка, введіть правильний номер ISMN'
            },
            issn: {
                'default': 'Будь ласка, введіть правильний номер ISSN'
            },
            lessThan: {
                'default': 'Будь ласка, введіть значення менше або рівне %s',
                notInclusive: 'Будь ласка, введіть значення менше ніж %s'
            },
            mac: {
                'default': 'Будь ласка, введіть правильну MAC-адресу'
            },
            meid: {
                'default': 'Будь ласка, введіть правильний номер MEID'
            },
            notEmpty: {
                'default': 'Будь ласка, введіть значення'
            },
            numeric: {
                'default': 'Будь ласка, введіть коректне дійсне число'
            },
            phone: {
                'default': 'Будь ласка, введіть правильний номер телефону',
                country: 'Будь ласка, введіть правильний номер телефону в %s',
                countries: {
                    AE: 'Об\'єднаних Арабських Еміратах',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CN: 'Китаї',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    ES: 'Іспанії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    IN: 'Індія',
                    MA: 'Марокко',
                    NL: 'Нідерландах',
                    PK: 'Пакистані',
                    RO: 'Румунії',
                    RU: 'Росії',
                    SK: 'Словаччині',
                    TH: 'Таїланді',
                    US: 'США',
                    VE: 'Венесуелі'
                }
            },
            regexp: {
                'default': 'Будь ласка, введіть значення відповідне до шаблону'
            },
            remote: {
                'default': 'Будь ласка, введіть правильне значення'
            },
            rtn: {
                'default': 'Будь ласка, введіть правильний номер RTN'
            },
            sedol: {
                'default': 'Будь ласка, введіть правильний номер SEDOL'
            },
            siren: {
                'default': 'Будь ласка, введіть правильний номер SIREN'
            },
            siret: {
                'default': 'Будь ласка, введіть правильний номер SIRET'
            },
            step: {
                'default': 'Будь ласка, введіть правильний крок %s'
            },
            stringCase: {
                'default': 'Будь ласка, вводите тільки малі літери',
                upper: 'Будь ласка, вводите тільки заголовні букви'
            },
            stringLength: {
                'default': 'Будь ласка, введіть значення коректної довжини',
                less: 'Будь ласка, введіть не більше %s символів',
                more: 'Будь ласка, введіть, не менше %s символів',
                between: 'Будь ласка, введіть рядок довжиною від %s до %s символів'
            },
            uri: {
                'default': 'Будь ласка, введіть правильний URI'
            },
            uuid: {
                'default': 'Будь ласка, введіть правильний номер UUID',
                version: 'Будь ласка, введіть правильний номер UUID версії %s'
            },
            vat: {
                'default': 'Будь ласка, введіть правильний номер VAT',
                country: 'Будь ласка, введіть правильний номер VAT в %s',
                countries: {
                    AT: 'Австрії',
                    BE: 'Бельгії',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CH: 'Швейцарії',
                    CY: 'Кіпрі',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    EE: 'Естонії',
                    ES: 'Іспанії',
                    FI: 'Фінляндії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    GR: 'Греції',
                    EL: 'Греції',
                    HU: 'Венгрії',
                    HR: 'Хорватії',
                    IE: 'Ірландії',
                    IS: 'Ісландії',
                    IT: 'Італії',
                    LT: 'Литві',
                    LU: 'Люксембургі',
                    LV: 'Латвії',
                    MT: 'Мальті',
                    NL: 'Нідерландах',
                    NO: 'Норвегії',
                    PL: 'Польщі',
                    PT: 'Португалії',
                    RO: 'Румунії',
                    RU: 'Росії',
                    RS: 'Сербії',
                    SE: 'Швеції',
                    SI: 'Словенії',
                    SK: 'Словаччині',
                    VE: 'Венесуелі',
                    ZA: 'ПАР'
                }
            },
            vin: {
                'default': 'Будь ласка, введіть правильний номер VIN'
            },
            zipCode: {
                'default': 'Будь ласка, введіть правильний поштовий індекс',
                country: 'Будь ласка, введіть правильний поштовий індекс в %s',
                countries: {
                    AT: 'Австрії',
                    BG: 'Болгарії',
                    BR: 'Бразилії',
                    CA: 'Канаді',
                    CH: 'Швейцарії',
                    CZ: 'Чехії',
                    DE: 'Германії',
                    DK: 'Данії',
                    ES: 'Іспанії',
                    FR: 'Франції',
                    GB: 'Великобританії',
                    IE: 'Ірландії',
                    IN: 'Індія',
                    IT: 'Італії',
                    MA: 'Марокко',
                    NL: 'Нідерландах',
                    PL: 'Польщі',
                    PT: 'Португалії',
                    RO: 'Румунії',
                    RU: 'Росії',
                    SE: 'Швеції',
                    SG: 'Сингапурі',
                    SK: 'Словаччині',
                    US: 'США'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Vietnamese language package
     * Translated by @nghuuphuoc
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'vi_VN': {
            base64: {
                'default': 'Vui lòng nhập chuỗi mã hoá base64 hợp lệ'
            },
            between: {
                'default': 'Vui lòng nhập giá trị nằm giữa %s và %s',
                notInclusive: 'Vui lòng nhập giá trị nằm giữa %s và %s'
            },
            bic: {
                'default': 'Vui lòng nhập số BIC hợp lệ'
            },
            callback: {
                'default': 'Vui lòng nhập giá trị hợp lệ'
            },
            choice: {
                'default': 'Vui lòng nhập giá trị hợp lệ',
                less: 'Vui lòng chọn ít nhất %s lựa chọn',
                more: 'Vui lòng chọn nhiều nhất %s lựa chọn',
                between: 'Vui lòng chọn %s - %s lựa chọn'
            },
            color: {
                'default': 'Vui lòng nhập mã màu hợp lệ'
            },
            creditCard: {
                'default': 'Vui lòng nhập số thẻ tín dụng hợp lệ'
            },
            cusip: {
                'default': 'Vui lòng nhập số CUSIP hợp lệ'
            },
            cvv: {
                'default': 'Vui lòng nhập số CVV hợp lệ'
            },
            date: {
                'default': 'Vui lòng nhập ngày hợp lệ',
                min: 'Vui lòng nhập ngày sau %s',
                max: 'Vui lòng nhập ngày trước %s',
                range: 'Vui lòng nhập ngày trong khoảng %s - %s'
            },
            different: {
                'default': 'Vui lòng nhập một giá trị khác'
            },
            digits: {
                'default': 'Vui lòng chỉ nhập số'
            },
            ean: {
                'default': 'Vui lòng nhập số EAN hợp lệ'
            },
            ein: {
                'default': 'Vui lòng nhập số EIN hợp lệ'
            },
            emailAddress: {
                'default': 'Vui lòng nhập địa chỉ email hợp lệ'
            },
            file: {
                'default': 'Vui lòng chọn file hợp lệ'
            },
            greaterThan: {
                'default': 'Vui lòng nhập giá trị lớn hơn hoặc bằng %s',
                notInclusive: 'Vui lòng nhập giá trị lớn hơn %s'
            },
            grid: {
                'default': 'Vui lòng nhập số GRId hợp lệ'
            },
            hex: {
                'default': 'Vui lòng nhập số hexa hợp lệ'
            },
            iban: {
                'default': 'Vui lòng nhập số IBAN hợp lệ',
                country: 'Vui lòng nhập mã IBAN hợp lệ của %s',
                countries: {
                    AD: 'Andorra',
                    AE: 'Tiểu vương quốc Ả Rập thống nhất',
                    AL: 'Albania',
                    AO: 'Angola',
                    AT: 'Áo',
                    AZ: 'Azerbaijan',
                    BA: 'Bosnia và Herzegovina',
                    BE: 'Bỉ',
                    BF: 'Burkina Faso',
                    BG: 'Bulgaria',
                    BH: 'Bahrain',
                    BI: 'Burundi',
                    BJ: 'Benin',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CI: 'Bờ Biển Ngà',
                    CM: 'Cameroon',
                    CR: 'Costa Rica',
                    CV: 'Cape Verde',
                    CY: 'Síp',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    DO: 'Dominican',
                    DZ: 'Algeria',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    FO: 'Đảo Faroe',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    GE: 'Georgia',
                    GI: 'Gibraltar',
                    GL: 'Greenland',
                    GR: 'Hy Lạp',
                    GT: 'Guatemala',
                    HR: 'Croatia',
                    HU: 'Hungary',
                    IE: 'Ireland',
                    IL: 'Israel',
                    IR: 'Iran',
                    IS: 'Iceland',
                    IT: 'Ý',
                    JO: 'Jordan',
                    KW: 'Kuwait',
                    KZ: 'Kazakhstan',
                    LB: 'Lebanon',
                    LI: 'Liechtenstein',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MC: 'Monaco',
                    MD: 'Moldova',
                    ME: 'Montenegro',
                    MG: 'Madagascar',
                    MK: 'Macedonia',
                    ML: 'Mali',
                    MR: 'Mauritania',
                    MT: 'Malta',
                    MU: 'Mauritius',
                    MZ: 'Mozambique',
                    NL: 'Hà Lan',
                    NO: 'Na Uy',
                    PK: 'Pakistan',
                    PL: 'Ba Lan',
                    PS: 'Palestine',
                    PT: 'Bồ Đào Nha',
                    QA: 'Qatar',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SA: 'Ả Rập Xê Út',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    SN: 'Senegal',
                    TN: 'Tunisia',
                    TR: 'Thổ Nhĩ Kỳ',
                    VG: 'Đảo Virgin, Anh quốc'
                }
            },
            id: {
                'default': 'Vui lòng nhập mã ID hợp lệ',
                country: 'Vui lòng nhập mã ID hợp lệ của %s',
                countries: {
                    BA: 'Bosnia và Herzegovina',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CL: 'Chi Lê',
                    CN: 'Trung Quốc',
                    CZ: 'Séc',
                    DK: 'Đan Mạch',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    LT: 'Lithuania',
                    LV: 'Latvia',
                    ME: 'Montenegro',
                    MK: 'Macedonia',
                    NL: 'Hà Lan',
                    PL: 'Ba Lan',
                    RO: 'Romania',
                    RS: 'Serbia',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    SM: 'San Marino',
                    TH: 'Thái Lan',
                    ZA: 'Nam Phi'
                }
            },
            identical: {
                'default': 'Vui lòng nhập cùng giá trị'
            },
            imei: {
                'default': 'Vui lòng nhập số IMEI hợp lệ'
            },
            imo: {
                'default': 'Vui lòng nhập số IMO hợp lệ'
            },
            integer: {
                'default': 'Vui lòng nhập số hợp lệ'
            },
            ip: {
                'default': 'Vui lòng nhập địa chỉ IP hợp lệ',
                ipv4: 'Vui lòng nhập địa chỉ IPv4 hợp lệ',
                ipv6: 'Vui lòng nhập địa chỉ IPv6 hợp lệ'
            },
            isbn: {
                'default': 'Vui lòng nhập số ISBN hợp lệ'
            },
            isin: {
                'default': 'Vui lòng nhập số ISIN hợp lệ'
            },
            ismn: {
                'default': 'Vui lòng nhập số ISMN hợp lệ'
            },
            issn: {
                'default': 'Vui lòng nhập số ISSN hợp lệ'
            },
            lessThan: {
                'default': 'Vui lòng nhập giá trị nhỏ hơn hoặc bằng %s',
                notInclusive: 'Vui lòng nhập giá trị nhỏ hơn %s'
            },
            mac: {
                'default': 'Vui lòng nhập địa chỉ MAC hợp lệ'
            },
            meid: {
                'default': 'Vui lòng nhập số MEID hợp lệ'
            },
            notEmpty: {
                'default': 'Vui lòng nhập giá trị'
            },
            numeric: {
                'default': 'Vui lòng nhập số hợp lệ'
            },
            phone: {
                'default': 'Vui lòng nhập số điện thoại hợp lệ',
                country: 'Vui lòng nhập số điện thoại hợp lệ của %s',
                countries: {
                    AE: 'Tiểu vương quốc Ả Rập thống nhất',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CN: 'Trung Quốc',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    ES: 'Tây Ban Nha',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    IN: 'Ấn Độ',
                    MA: 'Maroc',
                    NL: 'Hà Lan',
                    PK: 'Pakistan',
                    RO: 'Romania',
                    RU: 'Nga',
                    SK: 'Slovakia',
                    TH: 'Thái Lan',
                    US: 'Mỹ',
                    VE: 'Venezuela'
                }
            },
            regexp: {
                'default': 'Vui lòng nhập giá trị thích hợp với biểu mẫu'
            },
            remote: {
                'default': 'Vui lòng nhập giá trị hợp lệ'
            },
            rtn: {
                'default': 'Vui lòng nhập số RTN hợp lệ'
            },
            sedol: {
                'default': 'Vui lòng nhập số SEDOL hợp lệ'
            },
            siren: {
                'default': 'Vui lòng nhập số Siren hợp lệ'
            },
            siret: {
                'default': 'Vui lòng nhập số Siret hợp lệ'
            },
            step: {
                'default': 'Vui lòng nhập bước nhảy của %s'
            },
            stringCase: {
                'default': 'Vui lòng nhập ký tự thường',
                upper: 'Vui lòng nhập ký tự in hoa'
            },
            stringLength: {
                'default': 'Vui lòng nhập giá trị có độ dài hợp lệ',
                less: 'Vui lòng nhập ít hơn %s ký tự',
                more: 'Vui lòng nhập nhiều hơn %s ký tự',
                between: 'Vui lòng nhập giá trị có độ dài trong khoảng %s và %s ký tự'
            },
            uri: {
                'default': 'Vui lòng nhập địa chỉ URI hợp lệ'
            },
            uuid: {
                'default': 'Vui lòng nhập số UUID hợp lệ',
                version: 'Vui lòng nhập số UUID phiên bản %s hợp lệ'
            },
            vat: {
                'default': 'Vui lòng nhập số VAT hợp lệ',
                country: 'Vui lòng nhập số VAT hợp lệ của %s',
                countries: {
                    AT: 'Áo',
                    BE: 'Bỉ',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CH: 'Thuỵ Sĩ',
                    CY: 'Síp',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    EE: 'Estonia',
                    ES: 'Tây Ban Nha',
                    FI: 'Phần Lan',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    GR: 'Hy Lạp',
                    EL: 'Hy Lạp',
                    HU: 'Hungari',
                    HR: 'Croatia',
                    IE: 'Ireland',
                    IS: 'Iceland',
                    IT: 'Ý',
                    LT: 'Lithuania',
                    LU: 'Luxembourg',
                    LV: 'Latvia',
                    MT: 'Malta',
                    NL: 'Hà Lan',
                    NO: 'Na Uy',
                    PL: 'Ba Lan',
                    PT: 'Bồ Đào Nha',
                    RO: 'Romania',
                    RU: 'Nga',
                    RS: 'Serbia',
                    SE: 'Thuỵ Điển',
                    SI: 'Slovenia',
                    SK: 'Slovakia',
                    VE: 'Venezuela',
                    ZA: 'Nam Phi'
                }
            },
            vin: {
                'default': 'Vui lòng nhập số VIN hợp lệ'
            },
            zipCode: {
                'default': 'Vui lòng nhập mã bưu điện hợp lệ',
                country: 'Vui lòng nhập mã bưu điện hợp lệ của %s',
                countries: {
                    AT: 'Áo',
                    BG: 'Bulgaria',
                    BR: 'Brazil',
                    CA: 'Canada',
                    CH: 'Thuỵ Sĩ',
                    CZ: 'Séc',
                    DE: 'Đức',
                    DK: 'Đan Mạch',
                    ES: 'Tây Ban Nha',
                    FR: 'Pháp',
                    GB: 'Vương quốc Anh',
                    IE: 'Ireland',
                    IN: 'Ấn Độ',
                    IT: 'Ý',
                    MA: 'Maroc',
                    NL: 'Hà Lan',
                    PL: 'Ba Lan',
                    PT: 'Bồ Đào Nha',
                    RO: 'Romania',
                    RU: 'Nga',
                    SE: 'Thuỵ Sĩ',
                    SG: 'Singapore',
                    SK: 'Slovakia',
                    US: 'Mỹ'
                }
            }
        }
    });
}(jQuery));

(function ($) {
    /**
     * Simplified Chinese language package
     * Translated by @shamiao
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'zh_CN': {
            base64: {
                'default': '请输入有效的Base64编码'
            },
            between: {
                'default': '请输入在 %s 和 %s 之间的数值',
                notInclusive: '请输入在 %s 和 %s 之间(不含两端)的数值'
            },
            bic: {
                'default': '请输入有效的BIC商品编码'
            },
            callback: {
                'default': '请输入有效的值'
            },
            choice: {
                'default': '请输入有效的值',
                less: '请至少选中 %s 个选项',
                more: '最多只能选中 %s 个选项',
                between: '请选择 %s 至 %s 个选项'
            },
            color: {
                'default': '请输入有效的颜色值'
            },
            creditCard: {
                'default': '请输入有效的信用卡号码'
            },
            cusip: {
                'default': '请输入有效的美国CUSIP代码'
            },
            cvv: {
                'default': '请输入有效的CVV代码'
            },
            date: {
                'default': '请输入有效的日期',
                min: '请输入 %s 或之后的日期',
                max: '请输入 %s 或以前的日期',
                range: '请输入 %s 和 %s 之间的日期'
            },
            different: {
                'default': '请输入不同的值'
            },
            digits: {
                'default': '请输入有效的数字'
            },
            ean: {
                'default': '请输入有效的EAN商品编码'
            },
            ein: {
                'default': '请输入有效的EIN商品编码'
            },
            emailAddress: {
                'default': '请输入有效的邮件地址'
            },
            file: {
                'default': '请选择有效的文件'
            },
            greaterThan: {
                'default': '请输入大于等于 %s 的数值',
                notInclusive: '请输入大于 %s 的数值'
            },
            grid: {
                'default': '请输入有效的GRId编码'
            },
            hex: {
                'default': '请输入有效的16进制数'
            },
            iban: {
                'default': '请输入有效的IBAN(国际银行账户)号码',
                country: '请输入有效的 %s 国家或地区的IBAN(国际银行账户)号码',
                countries: {
                    AD: '安道​​尔',
                    AE: '阿联酋',
                    AL: '阿尔巴尼亚',
                    AO: '安哥拉',
                    AT: '奥地利',
                    AZ: '阿塞拜疆',
                    BA: '波斯尼亚和黑塞哥维那',
                    BE: '比利时',
                    BF: '布基纳法索',
                    BG: '保加利亚',
                    BH: '巴林',
                    BI: '布隆迪',
                    BJ: '贝宁',
                    BR: '巴西',
                    CH: '瑞士',
                    CI: '科特迪瓦',
                    CM: '喀麦隆',
                    CR: '哥斯达黎加',
                    CV: '佛得角',
                    CY: '塞浦路斯',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    DO: '多米尼加共和国',
                    DZ: '阿尔及利亚',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    FO: '法罗群岛',
                    FR: '法国',
                    GB: '英国',
                    GE: '格鲁吉亚',
                    GI: '直布罗陀',
                    GL: '格陵兰岛',
                    GR: '希腊',
                    GT: '危地马拉',
                    HR: '克罗地亚',
                    HU: '匈牙利',
                    IE: '爱尔兰',
                    IL: '以色列',
                    IR: '伊朗',
                    IS: '冰岛',
                    IT: '意大利',
                    JO: '约旦',
                    KW: '科威特',
                    KZ: '哈萨克斯坦',
                    LB: '黎巴嫩',
                    LI: '列支敦士登',
                    LT: '立陶宛',
                    LU: '卢森堡',
                    LV: '拉脱维亚',
                    MC: '摩纳哥',
                    MD: '摩尔多瓦',
                    ME: '黑山',
                    MG: '马达加斯加',
                    MK: '马其顿',
                    ML: '马里',
                    MR: '毛里塔尼亚',
                    MT: '马耳他',
                    MU: '毛里求斯',
                    MZ: '莫桑比克',
                    NL: '荷兰',
                    NO: '挪威',
                    PK: '巴基斯坦',
                    PL: '波兰',
                    PS: '巴勒斯坦',
                    PT: '葡萄牙',
                    QA: '卡塔尔',
                    RO: '罗马尼亚',
                    RS: '塞尔维亚',
                    SA: '沙特阿拉伯',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    SM: '圣马力诺',
                    SN: '塞内加尔',
                    TN: '突尼斯',
                    TR: '土耳其',
                    VG: '英属维尔京群岛'
                }
            },
            id: {
                'default': '请输入有效的身份证件号码',
                country: '请输入有效的 %s 国家或地区的身份证件号码',
                countries: {
                    BA: '波黑',
                    BG: '保加利亚',
                    BR: '巴西',
                    CH: '瑞士',
                    CL: '智利',
                    CN: '中国',
                    CZ: '捷克共和国',
                    DK: '丹麦',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    HR: '克罗地亚',
                    IE: '爱尔兰',
                    IS: '冰岛',
                    LT: '立陶宛',
                    LV: '拉脱维亚',
                    ME: '黑山',
                    MK: '马其顿',
                    NL: '荷兰',
                    PL: '波兰',
                    RO: '罗马尼亚',
                    RS: '塞尔维亚',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    SM: '圣马力诺',
                    TH: '泰国',
                    ZA: '南非'
                }
            },
            identical: {
                'default': '请输入相同的值'
            },
            imei: {
                'default': '请输入有效的IMEI(手机串号)'
            },
            imo: {
                'default': '请输入有效的国际海事组织(IMO)号码'
            },
            integer: {
                'default': '请输入有效的整数值'
            },
            ip: {
                'default': '请输入有效的IP地址',
                ipv4: '请输入有效的IPv4地址',
                ipv6: '请输入有效的IPv6地址'
            },
            isbn: {
                'default': '请输入有效的ISBN(国际标准书号)'
            },
            isin: {
                'default': '请输入有效的ISIN(国际证券编码)'
            },
            ismn: {
                'default': '请输入有效的ISMN(印刷音乐作品编码)'
            },
            issn: {
                'default': '请输入有效的ISSN(国际标准杂志书号)'
            },
            lessThan: {
                'default': '请输入小于等于 %s 的数值',
                notInclusive: '请输入小于 %s 的数值'
            },
            mac: {
                'default': '请输入有效的MAC物理地址'
            },
            meid: {
                'default': '请输入有效的MEID(移动设备识别码)'
            },
            notEmpty: {
                'default': '请填写必填项目'
            },
            numeric: {
                'default': '请输入有效的数值，允许小数'
            },
            phone: {
                'default': '请输入有效的电话号码',
                country: '请输入有效的 %s 国家或地区的电话号码',
                countries: {
                    AE: '阿联酋',
                    BG: '保加利亚',
                    BR: '巴西',
                    CN: '中国',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    ES: '西班牙',
                    FR: '法国',
                    GB: '英国',
                    IN: '印度',
                    MA: '摩洛哥',
                    NL: '荷兰',
                    PK: '巴基斯坦',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    SK: '斯洛伐克',
                    TH: '泰国',
                    US: '美国',
                    VE: '委内瑞拉'
                }
            },
            regexp: {
                'default': '请输入符合正则表达式限制的值'
            },
            remote: {
                'default': '请输入有效的值'
            },
            rtn: {
                'default': '请输入有效的RTN号码'
            },
            sedol: {
                'default': '请输入有效的SEDOL代码'
            },
            siren: {
                'default': '请输入有效的SIREN号码'
            },
            siret: {
                'default': '请输入有效的SIRET号码'
            },
            step: {
                'default': '请输入在基础值上，增加 %s 的整数倍的数值'
            },
            stringCase: {
                'default': '只能输入小写字母',
                upper: '只能输入大写字母'
            },
            stringLength: {
                'default': '请输入符合长度限制的值',
                less: '最多只能输入 %s 个字符',
                more: '需要输入至少 %s 个字符',
                between: '请输入 %s 至 %s 个字符'
            },
            uri: {
                'default': '请输入一个有效的URL地址'
            },
            uuid: {
                'default': '请输入有效的UUID',
                version: '请输入版本 %s 的UUID'
            },
            vat: {
                'default': '请输入有效的VAT(税号)',
                country: '请输入有效的 %s 国家或地区的VAT(税号)',
                countries: {
                    AT: '奥地利',
                    BE: '比利时',
                    BG: '保加利亚',
                    BR: '巴西',
                    CH: '瑞士',
                    CY: '塞浦路斯',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    EE: '爱沙尼亚',
                    ES: '西班牙',
                    FI: '芬兰',
                    FR: '法语',
                    GB: '英国',
                    GR: '希腊',
                    EL: '希腊',
                    HU: '匈牙利',
                    HR: '克罗地亚',
                    IE: '爱尔兰',
                    IS: '冰岛',
                    IT: '意大利',
                    LT: '立陶宛',
                    LU: '卢森堡',
                    LV: '拉脱维亚',
                    MT: '马耳他',
                    NL: '荷兰',
                    NO: '挪威',
                    PL: '波兰',
                    PT: '葡萄牙',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    RS: '塞尔维亚',
                    SE: '瑞典',
                    SI: '斯洛文尼亚',
                    SK: '斯洛伐克',
                    VE: '委内瑞拉',
                    ZA: '南非'
                }
            },
            vin: {
                'default': '请输入有效的VIN(美国车辆识别号码)'
            },
            zipCode: {
                'default': '请输入有效的邮政编码',
                country: '请输入有效的 %s 国家或地区的邮政编码',
                countries: {
                    AT: '奥地利',
                    BG: '保加利亚',
                    BR: '巴西',
                    CA: '加拿大',
                    CH: '瑞士',
                    CZ: '捷克共和国',
                    DE: '德国',
                    DK: '丹麦',
                    ES: '西班牙',
                    FR: '法国',
                    GB: '英国',
                    IE: '爱尔兰',
                    IN: '印度',
                    IT: '意大利',
                    MA: '摩洛哥',
                    NL: '荷兰',
                    PL: '波兰',
                    PT: '葡萄牙',
                    RO: '罗马尼亚',
                    RU: '俄罗斯',
                    SE: '瑞典',
                    SG: '新加坡',
                    SK: '斯洛伐克',
                    US: '美国'
                }
            }
        }
    });
}(jQuery));

(function($) {
    /**
     * Traditional Chinese language package
     * Translated by @tureki
     */
    FormValidation.I18n = $.extend(true, FormValidation.I18n, {
        'zh_TW': {
            base64: {
                'default': '請輸入有效的Base64編碼'
            },
            between: {
                'default': '請輸入不小於 %s 且不大於 %s 的值',
                notInclusive: '請輸入不小於等於 %s 且不大於等於 %s 的值'
            },
            bic: {
                'default': '請輸入有效的BIC商品編碼'
            },
            callback: {
                'default': '請輸入有效的值'
            },
            choice: {
                'default': '請輸入有效的值',
                less: '最少選擇 %s 個選項',
                more: '最多選擇 %s 個選項',
                between: '請選擇 %s 至 %s 個選項'
            },
            color: {
                'default': '請輸入有效的元色碼'
            },
            creditCard: {
                'default': '請輸入有效的信用卡號碼'
            },
            cusip: {
                'default': '請輸入有效的CUSIP(美國證券庫斯普)號碼'
            },
            cvv: {
                'default': '請輸入有效的CVV(信用卡檢查碼)代碼'
            },
            date: {
                'default': '請輸入有效的日期',
                min: '請輸入 %s 或之後的日期',
                max: '請輸入 %s 或以前的日期',
                range: '請輸入 %s 至 %s 之間的日期'
            },
            different: {
                'default': '請輸入不同的值'
            },
            digits: {
                'default': '只能輸入數字'
            },
            ean: {
                'default': '請輸入有效的EAN商品編碼'
            },
            ein: {
                'default': '請輸入有效的EIN商品編碼'
            },
            emailAddress: {
                'default': '請輸入有效的EMAIL'
            },
            file: {
                'default': '請選擇有效的檔案'
            },
            greaterThan: {
                'default': '請輸入大於等於 %s 的值',
                notInclusive: '請輸入大於 %s 的值'
            },
            grid: {
                'default': '請輸入有效的GRId編碼'
            },
            hex: {
                'default': '請輸入有效的16位元碼'
            },
            iban: {
                'default': '請輸入有效的IBAN(國際銀行賬戶)號碼',
                country: '請輸入有效的 %s 國家的IBAN(國際銀行賬戶)號碼',
                countries: {
                    AD: '安道​​爾',
                    AE: '阿聯酋',
                    AL: '阿爾巴尼亞',
                    AO: '安哥拉',
                    AT: '奧地利',
                    AZ: '阿塞拜疆',
                    BA: '波斯尼亞和黑塞哥維那',
                    BE: '比利時',
                    BF: '布基納法索',
                    BG: '保加利亞',
                    BH: '巴林',
                    BI: '布隆迪',
                    BJ: '貝寧',
                    BR: '巴西',
                    CH: '瑞士',
                    CI: '象牙海岸',
                    CM: '喀麥隆',
                    CR: '哥斯達黎加',
                    CV: '佛得角',
                    CY: '塞浦路斯',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    DO: '多明尼加共和國',
                    DZ: '阿爾及利亞',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    FO: '法羅群島',
                    FR: '法國',
                    GB: '英國',
                    GE: '格魯吉亞',
                    GI: '直布羅陀',
                    GL: '格陵蘭島',
                    GR: '希臘',
                    GT: '危地馬拉',
                    HR: '克羅地亞',
                    HU: '匈牙利',
                    IE: '愛爾蘭',
                    IL: '以色列',
                    IR: '伊朗',
                    IS: '冰島',
                    IT: '意大利',
                    JO: '約旦',
                    KW: '科威特',
                    KZ: '哈薩克斯坦',
                    LB: '黎巴嫩',
                    LI: '列支敦士登',
                    LT: '立陶宛',
                    LU: '盧森堡',
                    LV: '拉脫維亞',
                    MC: '摩納哥',
                    MD: '摩爾多瓦',
                    ME: '蒙特內哥羅',
                    MG: '馬達加斯加',
                    MK: '馬其頓',
                    ML: '馬里',
                    MR: '毛里塔尼亞',
                    MT: '馬耳他',
                    MU: '毛里求斯',
                    MZ: '莫桑比克',
                    NL: '荷蘭',
                    NO: '挪威',
                    PK: '巴基斯坦',
                    PL: '波蘭',
                    PS: '巴勒斯坦',
                    PT: '葡萄牙',
                    QA: '卡塔爾',
                    RO: '羅馬尼亞',
                    RS: '塞爾維亞',
                    SA: '沙特阿拉伯',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    SM: '聖馬力諾',
                    SN: '塞內加爾',
                    TN: '突尼斯',
                    TR: '土耳其',
                    VG: '英屬維爾京群島'
                }
            },
            id: {
                'default': '請輸入有效的身份證字號',
                country: '請輸入有效的 %s 身份證字號',
                countries: {
                    BA: '波赫',
                    BG: '保加利亞',
                    BR: '巴西',
                    CH: '瑞士',
                    CL: '智利',
                    CN: '中國',
                    CZ: '捷克共和國',
                    DK: '丹麥',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    HR: '克羅地亞',
                    IE: '愛爾蘭',
                    IS: '冰島',
                    LT: '立陶宛',
                    LV: '拉脫維亞',
                    ME: '蒙特內哥羅',
                    MK: '馬其頓',
                    NL: '荷蘭',
                    PL: '波蘭',
                    RO: '羅馬尼亞',
                    RS: '塞爾維亞',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    SM: '聖馬力諾',
                    TH: '泰國',
                    ZA: '南非'
                }
            },
            identical: {
                'default': '請輸入相同的值'
            },
            imei: {
                'default': '請輸入有效的IMEI(手機序列號)'
            },
            imo: {
                'default': '請輸入有效的國際海事組織(IMO)號碼'
            },
            integer: {
                'default': '請輸入有效的整數'
            },
            ip: {
                'default': '請輸入有效的IP位址',
                ipv4: '請輸入有效的IPv4位址',
                ipv6: '請輸入有效的IPv6位址'
            },
            isbn: {
                'default': '請輸入有效的ISBN(國際標準書號)'
            },
            isin: {
                'default': '請輸入有效的ISIN(國際證券號碼)'
            },
            ismn: {
                'default': '請輸入有效的ISMN(國際標準音樂編號)'
            },
            issn: {
                'default': '請輸入有效的ISSN(國際標準期刊號)'
            },
            lessThan: {
                'default': '請輸入小於等於 %s 的值',
                notInclusive: '請輸入小於 %s 的值'
            },
            mac: {
                'default': '請輸入有效的MAC位址'
            },
            meid: {
                'default': '請輸入有效的MEID(行動設備識別碼)'
            },
            notEmpty: {
                'default': '請填寫必填欄位'
            },
            numeric: {
                'default': '請輸入有效的數字(含浮點數)'
            },
            phone: {
                'default': '請輸入有效的電話號碼',
                country: '請輸入有效的 %s 國家的電話號碼',
                countries: {
                    AE: '阿聯酋',
                    BG: '保加利亞',
                    BR: '巴西',
                    CN: '中国',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    ES: '西班牙',
                    FR: '法國',
                    GB: '英國',
                    IN: '印度',
                    MA: '摩洛哥',
                    NL: '荷蘭',
                    PK: '巴基斯坦',
                    RO: '罗马尼亚',
                    RU: '俄羅斯',
                    SK: '斯洛伐克',
                    TH: '泰國',
                    US: '美國',
                    VE: '委内瑞拉'
                }
            },
            regexp: {
                'default': '請輸入符合正規表示式所限制的值'
            },
            remote: {
                'default': '請輸入有效的值'
            },
            rtn: {
                'default': '請輸入有效的RTN號碼'
            },
            sedol: {
                'default': '請輸入有效的SEDOL代碼'
            },
            siren: {
                'default': '請輸入有效的SIREN號碼'
            },
            siret: {
                'default': '請輸入有效的SIRET號碼'
            },
            step: {
                'default': '請輸入 %s 的倍數'
            },
            stringCase: {
                'default': '只能輸入小寫字母',
                upper: '只能輸入大寫字母'
            },
            stringLength: {
                'default': '請輸入符合長度限制的值',
                less: '請輸入小於 %s 個字',
                more: '請輸入大於 %s 個字',
                between: '請輸入 %s 至 %s 個字'
            },
            uri: {
                'default': '請輸入一個有效的鏈接'
            },
            uuid: {
                'default': '請輸入有效的UUID',
                version: '請輸入版本 %s 的UUID'
            },
            vat: {
                'default': '請輸入有效的VAT(增值税)',
                country: '請輸入有效的 %s 國家的VAT(增值税)',
                countries: {
                    AT: '奧地利',
                    BE: '比利時',
                    BG: '保加利亞',
                    BR: '巴西',
                    CH: '瑞士',
                    CY: '塞浦路斯',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    EE: '愛沙尼亞',
                    ES: '西班牙',
                    FI: '芬蘭',
                    FR: '法語',
                    GB: '英國',
                    GR: '希臘',
                    EL: '希臘',
                    HU: '匈牙利',
                    HR: '克羅地亞',
                    IE: '愛爾蘭',
                    IS: '冰島',
                    IT: '意大利',
                    LT: '立陶宛',
                    LU: '盧森堡',
                    LV: '拉脫維亞',
                    MT: '馬耳他',
                    NL: '荷蘭',
                    NO: '挪威',
                    PL: '波蘭',
                    PT: '葡萄牙',
                    RO: '羅馬尼亞',
                    RU: '俄羅斯',
                    RS: '塞爾維亞',
                    SE: '瑞典',
                    SI: '斯洛文尼亞',
                    SK: '斯洛伐克',
                    VE: '委内瑞拉',
                    ZA: '南非'
                }
            },
            vin: {
                'default': '請輸入有效的VIN(車輛識別號碼)'
            },
            zipCode: {
                'default': '請輸入有效的郵政編碼',
                country: '請輸入有效的 %s 國家的郵政編碼',
                countries: {
                    AT: '奧地利',
                    BG: '保加利亞',
                    BR: '巴西',
                    CA: '加拿大',
                    CH: '瑞士',
                    CZ: '捷克共和國',
                    DE: '德國',
                    DK: '丹麥',
                    ES: '西班牙',
                    FR: '法國',
                    GB: '英國',
                    IE: '愛爾蘭',
                    IN: '印度',
                    IT: '意大利',
                    MA: '摩洛哥',
                    NL: '荷蘭',
                    PL: '波蘭',
                    PT: '葡萄牙',
                    RO: '羅馬尼亞',
                    RU: '俄羅斯',
                    SE: '瑞典',
                    SG: '新加坡',
                    SK: '斯洛伐克',
                    US: '美國'
                }
            }
        }
    });
}(jQuery));

/**
 * Created by mattp on 10/11/2015.
 */
/**
 * Created by Matt.Perry on 09/11/2015.
 */
$(document).ready(function () {

    var initialiseRenewal= function() {

        //renewal form validation
        $('#accountdetails-form').formValidation(
            {
                err: {
                    container: function($field, validator) {
                        // Look at the markup
                        //  <div class="col-xs-4">
                        //      <field>
                        //  </div>
                        //  <div class="col-xs-5 messageContainer"></div>
                        if ($field.parent().next('.messageContainer').length)
                        {
                            return $field.parent().next('.messageContainer');
                        }

                        return $field.parent().parent().next('.messageContainer');
                    }
                }}
        );

        var form = $("#accountdetails-form");
        var fv = form.data().formValidation;
        if (typeof (errors) !== 'undefined')
        {
            for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                fv.updateStatus(error.field, 'INVALID', 'notEmpty');
                fv.updateMessage(error.field, 'notEmpty', error.message);
            }
        }

        //must be a postback or error.
        if (($('#PreValidate').length && $('#PreValidate').val()==="1"))
        {
            $('#accountdetails-form').formValidation('validate');
        }

    };




    if ($('#accountdetails-form').length) {


        initialiseRenewal();


            if ($('#CountryId').val() === window.UNITED_KINGDOM) {
                $('#county-group').show();
            }
            else {
                $('#county-group').hide();
            }

            if ($('#PracticeTypeId').val() === window.PRACTISING) {
                $('.renewal-practice-details').show();
            }
            else {
                $('.renewal-practice-details').hide();
            }
    }

});
$(document).ready(function () {

    var initialiseannualReturn= function() {

        //Initialise hidden areas
        $('.year-error').hide();

        if ($('#CountryId').val() === UNITED_KINGDOM) {
            $('#county-group').show();
        }
        else {
            $('#county-group').hide();
        }
        if ($('#PracticeName').val() === '') {
            $('#practiceDetails-group').hide();
        }


        if ($("input:radio[name='PractisingCertificate']:checked").val()  === 'True')
        {
            $('#qualifyingBodies-group').show();
        }
        else {
            $('#qualifyingBodies-group').hide();
        }

        if ($("input:radio[name='SoleTraderWithContinuityAgreement']")[0].checked)
        {
            $('#continuityDetails-group').show();
        }
        else {
            $('#continuityDetails-group').hide();
        }




        if ($("input:radio[name='OverseasClients']:checked").val()  === 'True')
        {
            $('#overseasClientsCountries-group').show();
        }
        else {
            $('#overseasClientsCountries-group').hide();
        }

        if ($("input:radio[name='HomePractice']:checked").val()  === 'False')
        {
            $('#homeAddress-group').show();
        }
        else {
            $('#homeAddress-group').hide();
        }

        if ($("input:radio[name='CpaaPiInsurance']:checked").val()  === 'False')
        {
            $('#piInsuranceProviderOther-group').show();
            $('#AgreeStatementOfFact').hide();
            $('#PAYERefNum').hide();
        }
        else if ($("input:radio[name='CpaaPiInsurance']:checked").length ===0) {
          $('#piInsuranceProviderOther-group').hide();
          $('#AgreeStatementOfFact').hide();
            $('#PAYERefNum').hide();
        }
        else {
            $('#piInsuranceProviderOther-group').hide();
            $('#AgreeStatementOfFact').show();
            $('#PAYERefNum').show();
        }

        if ($("input:radio[name='CashBasedClients']:checked").val()  === 'True')
        {
            $('#numberOfCashBasedClients-group').show();
        }
        else {
            $('#numberOfCashBasedClients-group').hide();
        }

        if ($(".Declarations:checked").length===0 || ($(".Declarations:checked").length===1 &&  $(".Declarations")[$(".Declarations").length-1].checked))
        {
            $('#declarationDetails-group').hide();
        }
        else {
            $('#declarationDetails-group').show();
        }


        if ($(".PrincipalsDeclarations:checked").length===0 || ($(".PrincipalsDeclarations:checked").length===1 &&  $(".PrincipalsDeclarations")[$(".PrincipalsDeclarations").length-1].checked))
        {
            $('#principalsDeclarationDetails-group').hide();
        }
        else {
            $('#principalsDeclarationDetails-group').show();
        }

        //annualReturn form validation
        $('#annualReturn-form').formValidation(
            {
                fields: {
                    QualifyingBodies: {
                        selector: '.QualifyingBodies',
                        validators: {
                            notEmpty: {
                                message: 'Please select qualifying body?'
                            }
                        }
                    },
                    ConfirmationInformationAccurate : {
                        validators: {
                          callback: {
                              message: 'Please agree ',
                              callback: function (value, validator, $field) {
                                  return ($("input:radio[name='ConfirmationInformationAccurate']:checked").val() === 'True');
                              } 
                          }
                        }
                    }  ,
                      SoleTraderWithContinuityAgreement : {
                          validators: {
                              notEmpty: {
                                  message: 'Please select'
                              }
                          }
                      },
                    ConfirmationComply : {
                        validators: {
                            callback: {
                                message: 'Please agree ',
                                callback: function (value, validator, $field) {
                                    return ($("input:radio[name='ConfirmationComply']:checked").val() === 'True');
                                }
                            }
                        }
                    },
                    Declarations : {
                        selector: '.Declarations',
                      validators: {
                        notEmpty: {
                            message: 'Please select one option'
                        }
                      }
                    },
                    PrincipalsDeclarations : {
                      selector: '.PrincipalsDeclarations',
                    validators: {
                      notEmpty: {
                          message: 'Please select one option'
                      }
                    }
                  },
                    PiInsuranceProviderOther : {
                        validators: {
                            callback: {
                                message: 'Please provide details',
                                callback: function (value, validator, $field) {
                                    return !($("input:radio[name='CpaaPiInsurance']:checked").val() === 'False' && $("#PiInsuranceProviderOther").val().length === 0);
                                }
                            }
                        }
                    },
                    DeclarationDetail : {
                        validators: {
                            callback: {
                                message: 'Please provide details',
                                callback: function (value, validator, $field) {
                                    return $("#DeclarationDetail").val().length>0|| $(".Declarations:checked").length===0 ||  ($(".Declarations")[$(".Declarations").length-1].checked && $(".Declarations:checked").length===1);
                                }
                            }
                        }
                    },
                    PrincipalsDeclarationDetail : {
                        validators: {
                            callback: {
                                message: 'Please provide details',
                                callback: function (value, validator, $field) {
                                    return $("#PrincipalsDeclarationDetail").val().length>0 || $(".PrincipalsDeclarations:checked").length===0 ||  ($(".PrincipalsDeclarations")[$(".PrincipalsDeclarations").length-1].checked && $(".PrincipalsDeclarations:checked").length===1);
                                }
                            }
                        }
                    },
                    AgreeStatementOfFact : {
                        validators: {
                          notEmpty: {
                              message: 'Please select your response.'
                          }
                        }
                    },
                    CpaaPiInsurance : {
                        validators: {
                          notEmpty: {
                              message: 'Please select your response.'
                          }
                        }
                    },
                    HomePractice : {
                        validators: {
                          notEmpty: {
                              message: 'Please select your response.'
                          }
                        }
                    },
                    MlrNumber : {
                        validators: {
                            callback: {
                                message: 'Please provide your MLR Number',
                                callback: function (value, validator, $field) {

                                    var mlrRequired = false;

                                    $.each(mlrRequireSupervisors, function( index, value ) {
                                        if ($("#MlrSupervisors").val()===value) {
                                            mlrRequired=true;
                                        }
                                    });

                                    if (mlrRequired===true)
                                    {
                                        return  $("#MlrNumber").val() !=='';
                                    }

                                    return true;
                                }
                            }
                        }
                }
            },
                err: {
                    container: function($field, validator) {
                        if ($field.parent().next('.messageContainer').length)
                        {
                            return $field.parent().next('.messageContainer');
                        }
                        return $field.parent().parent().next('.messageContainer');
                    }
                }
            }
        );

        //Creates client side notifcation of server side errors.
        var form = $("#annualReturn-form");
        var fv = form.data().formValidation;
        if (typeof (errors) !== 'undefined')
        {
            for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                fv.updateStatus(error.field, 'INVALID', 'notEmpty');
                fv.updateMessage(error.field, 'notEmpty', error.message);
            }
        }

        //revalidate form on postback or error.
        if (($('#PreValidate').length && $('#PreValidate').val()==="1"))
        {
            $('#annualReturn-form').formValidation('validate');
        }
    };

    if ($('#annualReturn-form').length) {
        initialiseannualReturn();

        $("input:radio[name='CpaaPiInsurance']").change(function (e) {
            if ($("input:radio[name='CpaaPiInsurance']:checked").val() === 'False') {
                $('#piInsuranceProviderOther-group').show();
                $('#AgreeStatementOfFact').hide();
                $('#PAYERefNum').hide();
                $('#annualReturn-form').formValidation('revalidateField', 'PiInsuranceProviderOther');
            }
            else {
                $('#annualReturn-form').formValidation('revalidateField', 'PiInsuranceProviderOther');
                $('#piInsuranceProviderOther-group').hide();
                $('#AgreeStatementOfFact').show();
                $('#PAYERefNum').show();
            }
        });

        $("input:radio[name='PractisingCertificate']").change(function (e) {
            if ($("input:radio[name='PractisingCertificate']:checked").val() === 'True')  {
                $('#qualifyingBodies-group').show();
            }
            else {
                $('#qualifyingBodies-group').hide();
            }
        });

        $("input:radio[name='OverseasClients']").change(function (e) {
            if ($("input:radio[name='OverseasClients']:checked").val() === 'True') {
                $('#overseasClientsCountries-group').show();
                $('#annualReturn-form').formValidation('revalidateField', 'OverseasClients');
            }
            else {
                $('#annualReturn-form').formValidation('revalidateField', 'OverseasClients');
                $('#overseasClientsCountries-group').hide();
            }
        });


        $("input:radio[name='HomePractice']").change(function (e) {
            if ($("input:radio[name='HomePractice']:checked").val() === 'False') {
                $('#homeAddress-group').show();
                $('#annualReturn-form').formValidation('revalidateField', 'HomePractice');
            }
            else {
                $('#annualReturn-form').formValidation('revalidateField', 'HomePractice');
                $('#homeAddress-group').hide();
            }
        });



        $(".Declarations").change(function (e) {
            if ($(".Declarations:checked").length===0 ||
            ($(".Declarations:checked").length===1 &&
            $(".Declarations")[$(".Declarations").length-1].checked))
            {
                $('#annualReturn-form').formValidation('revalidateField', 'DeclarationDetail');
                $('#declarationDetails-group').hide();
            }
            else {
                $('#declarationDetails-group').show();
                $('#annualReturn-form').formValidation('revalidateField', 'DeclarationDetail');
            }

        });

        $(".PrincipalsDeclarations").change(function (e) {
            if ($(".PrincipalsDeclarations:checked").length===0 || ($(".PrincipalsDeclarations:checked").length===1 &&  $(".PrincipalsDeclarations")[$(".PrincipalsDeclarations").length-1].checked))
            {
              $('#annualReturn-form').formValidation('revalidateField', 'PrincipalsDeclarationDetail');
              $('#principalsDeclarationDetails-group').hide();
            }
            else {
                $('#principalsDeclarationDetails-group').show();
                $('#annualReturn-form').formValidation('revalidateField', 'PrincipalsDeclarationDetail');
            }
        });

        $("input:radio[name='CashBasedClients']").change(function (e) {
            if ($("input:radio[name='CashBasedClients']:checked").val()  === 'True')
            {
                $('#numberOfCashBasedClients-group').show();
            }
            else {
                $('#numberOfCashBasedClients-group').hide();
            }
        });

        $("input:radio[name='SoleTraderWithContinuityAgreement']").change(function (e) {
          if ($("input:radio[name='SoleTraderWithContinuityAgreement']")[0].checked)
          {
              $('#continuityDetails-group').show();
          }
          else {
              $('#continuityDetails-group').hide();
          }
        });

        $(".QualifyingBodies").change(function (e) {
            $('#annualReturn-form').formValidation('revalidateField', 'QualifyingBodies');
        });


        $("#MlrSupervisors").change(function (e) {
             $('#annualReturn-form').formValidation('revalidateField', 'MlrNumber');
        });

        $("input:radio[name='AgreeStatementOfFact']").change(function (e) {
             $('#registration-form').formValidation('revalidateField', 'AgreeStatementOfFact');
             if ($("input:radio[name='AgreeStatementOfFact']:checked").val()==="True")
             {
               $('#StatementOfFactNo').hide();
             }
             else {
               $('#StatementOfFactNo').show();
             }
        });




    }

});

$(document).ready(function () {

    if ($('#contact-form').length) {
        $('#contact-form').formValidation();
    }
});


/**
 * Created by Matt.Perry on 09/11/2015.
 */
$(document).ready(function () {

    var hasQualifyBodies = function()
      {
        var hasQualifyBodies = false;

        $('.QualifyingBodies').not('#NoQualifyingBodies').each(function () {
            if (this.checked) {
                hasQualifyBodies=true;
            }
        });
        return hasQualifyBodies;
      };

    var calculateMembershipType = function(){

        if ($("input[name='Step']").val()==='2'){

            var yearsPractising = $('#YearsPractising').val();
            var ifaBody="";
            if ($("input:radio[name='IfacBody']:checked").length)
            {
                ifaBody = $("input:radio[name='IfacBody']:checked").val();
            }

            var qualification = '';
            if ($("input[name='Qualification.Id']:checked").length)
            {
                qualification=$("input[name='Qualification.Id']:checked").val();
            }

            var hasQualifyBodies = false;

            $('.QualifyingBodies').each(function () {
                if (this.checked) {
                    hasQualifyBodies=true;
                }
            });

            if (((qualification !== "" && ifaBody !=="") || (yearsPractising==="5+") ) && $("#Country").val()==UNITED_KINGDOM)
            {
                if (hasQualifyBodies && ifaBody=="True")
                {
                    $('#MembershipType').val(FELLOWS);
                }
                else
                {
                    $('#MembershipType').val(ASSOCIATE);
                }
            }
            else if ($('#NoQualifyingBodies').is(':checked')) {
                $('#MembershipType').val(ASSOCIATE);
            }
            else
            {
                $('#MembershipType').val('');
            }
        }
        calculatePrice($('#Country').val(), $('#PracticeType').val(),$('#MembershipType').val());
    };

    var calculatePrice = function(country, practiceType, membershipType) {

        if (country!=='' || practiceType!=='' || (typeof (membershipType) !== 'undefined'))
        {
             var posting =  $.post("/Umbraco/Api/membershiplevel/calculatePrice",
                {
                    country: country,
                    practiceType: practiceType,
                    membershipType: membershipType
                });

            posting.done(function(data)
            {
                if (data.prices.length===0)
                {
                    $('#membershipPrices').hide();
                }
                else
                {
                    $('#membershipPrices').show();
                }
                $('#joiningFee').text('£'+data.joiningFee);
                var priceText='';
                if (data.prices.length>1) {
                    priceText = 'from';
                }
                $('#annualSubscription').text(priceText + ' £'+data.prices[0].price);
                $('#joiningFee').text('£'+data.joiningFee);

                if (data.totalPrice!==null )
                {
                    $('#totalPrice').text('£' + data.totalPrice);
                    $('#totalPriceGroup').show();
                }
                else
                {
                    $('#totalPriceGroup').hide();
                }





                //Only used on the membership fee page
                //Based on the fact there is a different partial view
                if ($('#ukPrices').length && ($('#Country').val()===UNITED_KINGDOM))
                {
                    $.each(data.prices, function() {
                        if (this.membershipType=='Fellows' && this.practiceType==='Practising')
                        {
                            $('#practisingFellowsPrice').text('£'+this.price);
                        }
                        if (this.membershipType=='Associate' && this.practiceType==='Practising')
                        {
                            $('#practisingAssociatePrice').text('£'+this.price);
                        }
                        if (this.membershipType=='Fellows' && this.practiceType==='NonPractising')
                        {
                            $('#nonPractisingFellowsPrice').text('£'+this.price);
                        }
                        if (this.membershipType=='Associate' && this.practiceType==='NonPractising')
                        {
                            $('#nonPractisingAssociatePrice').text('£'+this.price);
                        }
                    });

                    $('#ukPrices').show();
                    $('#subscriptionFee').hide();
                }
                else
                {
                    $('#subscriptionFee').show();
                    $('#ukPrices').hide();
                }
            });

        }
    };

    var validateQualifyingBodiesAndQualifications = function() {
        if ($("input[name='Qualification.Id']:checked").val() === NO_QUALIFICATION && $('#YearsPractising').val() === "2" && !hasQualifyBodies()) {
            $('.year-error').show();
            $('.ifac-details').hide();
            $('form').closest('form').find('.btn').hide();

        } else {
            $('form').closest('form').find('.btn').show();
            $('.year-error').hide();

            if ($("input[name='Qualification.Id']:checked").length && hasQualifyBodies()) {
                $('.ifac-details').show();
            } else {
                $('.ifac-details').hide();
            }

        }
    };

    var initialiseRegistration = function () {


        $('#registration-form').formValidation(
            {
                fields: {
                    'Qualification.Id': {
                        icon: false,
                        validators: {
                            notEmpty: {
                                message: 'Please select if you have gained a qualification in Accountancy or Finance?'
                            }
                        }
                    },
                    QualifyingBodies: {
                        icon: false,
                        selector: '.QualifyingBodies',
                        validators: {
                            notEmpty: {
                                message: 'Please select qualifying body?'
                            }
                        }
                    },
                    IfacBody: {
                        icon: false,
                        validators: {
                            notEmpty: {
                                message: 'Please select whether you are a fellow of an IFAC body'
                            }
                        }
                    },
                    PostCode: {
                        validators: {
                            callback: {
                                message: 'Please provide a post code if in the UK',
                                callback: function (value, validator, $field) {
                                    return ($('#Country').val() != UNITED_KINGDOM) || ($('#Country').val() == UNITED_KINGDOM && $('#PostCode').val().length > 0);
                                }
                            }
                        }
                    },
                    AgreeStatementOfFact: {
                        validators: {
                            notEmpty: {
                                message: 'Please select your response.'
                            }
                        }
                    },
                    CpaaPiInsurance: {
                      validators: {
                          notEmpty: {
                              message: 'Please select your response.'
                          }
                      }
                    }
                },
                err: {
                    container: function ($field, validator) {
                        // Look at the markup
                        //  <div class="col-xs-4">
                        //      <field>
                        //  </div>
                        //  <div class="col-xs-5 messageContainer"></div>
                        if ($field.parent().next('.messageContainer').length) {
                            return $field.parent().next('.messageContainer');
                        }

                        return $field.parent().parent().next('.messageContainer');
                    }
                }
            }
        );

        $('#membershipPrices').hide();

        //Your Details Initialisation
        $('.registration-group').hide();
        $('#county-group').hide();
        $('.year-error').hide();


        //Handle pre-populated form.
        if ($('#Country').val() === UNITED_KINGDOM) {
            $('.registration-group').show();
            $('#county-group').show();
            if ($('#PracticeType').val() === PRACTISING) {
                $('.practice-details').show();
            }
        }

        if ($('#YearsPractising').val() === "1") {
            $('.address-details').hide();
            $('.practice-details').hide();
            $('.year-error').show();
            $(this).closest('form').find('.btn').hide();
        }


        //Your Skills Initialisation

        validateQualifyingBodiesAndQualifications();

        calculateMembershipType();


        if ($('#Country').length && $('#Country').val() !== "") {
            $('.address-details').show();
        }


        //Payment Details

        //must be a postback or error.
        if (($('#PreValidate').length && $('#PreValidate').val() === "1")) {
            $('#registration-form').formValidation('validate');
        }

        var form = $("#registration-form");
        var fv = form.data().formValidation;
        if (typeof (errors) !== 'undefined') {
            for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                fv.updateStatus(error.field, 'INVALID', 'notEmpty');
                fv.updateMessage(error.field, 'notEmpty', error.message);
            }
        }

    };

    if ($('#registration-form').length) {
        //registration form validation

        initialiseRegistration();

        $('#Country').on('change', function() {
            if (this.value !== '')
            {
                calculatePrice(this.value);
            }

            if ($('#YearsPractising').val() !=="1")
            {
                $('.address-details').show();
            }

            if (this.value !=UNITED_KINGDOM) {
                $('#PracticeType').val("");

                $('.registration-group').hide();
                $('#county-group').hide();
                $('.practice-details').hide();
            }
            else {
                $('#PracticeType').val("");
                $('.address-details').hide();
                $('.registration-group').show();
                $('#county-group').show();
            }
        });

        $('#PracticeType').on('change', function () {
            if (this.Value !== '' && $('#Country').val() !=='')
            {calculatePrice($('#Country').val(), this.value);}

            if (this.value == PRACTISING) {
                $('.address-details').show();
                $('.practice-details').show();
                $('.year-error').hide();
                $('#YearsPractising').val("");
                $('#registration-form').formValidation('revalidateField', 'YearsPractising');
            }
            else if (this.value == NON_PRACTISING) {
                $('.address-details').show();
                $('.practice-details').hide();
                $('.year-error').hide();
                $('#YearsPractising').val("");
                $('#registration-form').formValidation('revalidateField', 'YearsPractising');
            }
            else {
                $('.address-details').hide();
                $('.practice-details').hide();
            }
        });

        $('#YearsPractising').on('change', function () {
            if (this.value == 1) {
                $('.address-details').hide();
                $('.practice-details').hide();
                $('.year-error').show();
                $(this).closest('form').find('.btn').hide();
            }
            else {
                $('.year-error').hide();
                $(this).closest('form').find('.btn').show();
                if ($('#PracticeType').val() == PRACTISING) {
                    $('.address-details').show();
                    $('.practice-details').show();
                }
                else if ($('#PracticeType').val() == NON_PRACTISING) {
                    $('.address-details').show();
                    $('.practice-details').hide();
                }
                else if ($('#PracticeType').val() === "" && $('#Country').val()!==UNITED_KINGDOM  && $('#Country').val()!=='') {
                    $('.address-details').show();
                    $('.practice-details').hide();
                }
            }
        });

        //Registration Stage 2

        $("input[name='Qualification.Id']").change(function (e) {
            validateQualifyingBodiesAndQualifications();
            calculateMembershipType();
        });

        $('.QualifyingBodies').not('#NoQualifyingBodies').on('change', function() {
          $('#NoQualifyingBodies')[0].checked =false;
            validateQualifyingBodiesAndQualifications();
            calculateMembershipType();
        });

        $('#NoQualifyingBodies').on('change', function() {
          $('.QualifyingBodies').not('#NoQualifyingBodies').attr('checked', false);
            validateQualifyingBodiesAndQualifications();
            calculateMembershipType();
           
        });

        $("input:radio[name='IfacBody']").on('change', function() {
            calculateMembershipType();
        });

        //Registration Stage 3

        if ($('#MonthylCost').length) {
            $('#MonthylCost').hide();
        }

        if ($("input:radio[name='CpaaPiInsurance']:checked").val()==="False")
        {
            $('#AgreeStatementOfFact').hide();
        }

        $("input:radio[name='CpaaPiInsurance']").change(function (e) {
          if ($("input:radio[name='CpaaPiInsurance']:checked").val()==="True")
          {
            $('#AgreeStatementOfFact').show();
          }
          else {
            $('#AgreeStatementOfFact').hide();
          }
        });

        $("input:radio[name='AgreeStatementOfFact']").change(function (e) {
             $('#registration-form').formValidation('revalidateField', 'AgreeStatementOfFact');
             if ($("input:radio[name='AgreeStatementOfFact']:checked").val()==="True")
             {
               $('#StatementOfFactNo').hide();
             }
             else {
               $('#StatementOfFactNo').show();
             }
        });

        $('#PaymentPlan').prop('selectedIndex', 0);
        if ($('#PaymentPlan').val()==="DirectDebit")
        {
            $('#AnnualCost').hide();
            $('#AnnualInitialPayment').hide();
            $('#MonthlyCost').show();
            $('#MonthlyInitialPayment').show();
        }
        else
        {
            $('#AnnualCost').show();
            $('#AnnualInitialPayment').show();
            $('#MonthlyCost').hide();
            $('#MonthlyInitialPayment').hide();
        }

        $('#PaymentPlan').change(function (e) {
            if ($(this).val()==="DirectDebit")
            {
                $('#AnnualCost').hide();
                $('#AnnualInitialPayment').hide();
                $('#MonthlyCost').show();
                $('#MonthlyInitialPayment').show();
            }
            else
            {
                $('#AnnualCost').show();
                $('#AnnualInitialPayment').show();
                $('#MonthlyCost').hide();
                $('#MonthlyInitialPayment').hide();
            }
        });

    }
});

/**
 * Created by Matt.Perry on 09/11/2015.
 */
$(document).ready(function () {

    var initialiseRenewal= function() {

        //renewal form validation
        $('#renewal-form').formValidation(
            {
                err: {
                    container: function($field, validator) {
                        // Look at the markup
                        //  <div class="col-xs-4">
                        //      <field>
                        //  </div>
                        //  <div class="col-xs-5 messageContainer"></div>
                        if ($field.parent().next('.messageContainer').length)
                        {
                            return $field.parent().next('.messageContainer');
                        }

                        return $field.parent().parent().next('.messageContainer');
                    }
                }}
        );

        var form = $("#renewal-form");
        var fv = form.data().formValidation;
        if (typeof (errors) !== 'undefined')
        {
            for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                fv.updateStatus(error.field, 'INVALID', 'notEmpty');
                fv.updateMessage(error.field, 'notEmpty', error.message);
            }
        }

        //must be a postback or error.
        if (($('#PreValidate').length && $('#PreValidate').val()==="1"))
        {
            $('#renewal-form').formValidation('validate');
        }


    };


    if ($('#renewal-form').length) {


        initialiseRenewal();


        var init = function () {
            $('.year-error').hide();

            if ($('#CountryId').val() == UNITED_KINGDOM) {
                $('#county-group').show();
            }
            else {
                $('#county-group').hide();
            }

            if ($('#PracticeTypeId').val() == PRACTISING) {
                $('.renewal-practice-details').show();
            }
            else {
                $('.renewal-practice-details').hide();
            }

        };

        init();
    }

});
function deleteAuthCookie() {
    document.cookie = 'yourAuthCookie' +
    '=; expires=Thu, 01-Jan-70 00:00:01 GMT;';
    }


  $(document).ready(function () {



  //toggle mobile nav
  $('.navbar-toggle').click(function () {
    $('.site-nav ul').toggle();
  });

  //open close accordian
  $('.accordion__body').hide();
  $('.accordion__body').first().show();
  $('.accordion__header').first().addClass('open');

  $('.accordion__header').click(function() {
    $(this).toggleClass('open');
    $(this).siblings().slideToggle();
  });

  // initialize Google map
  if ($('#map').length) {
      initializeMap();
  }


  //Member search - toggle county search for UK
  if ($('.member-search').length) {
    $('#memberCountry').on('change', function() {
      if (this.value == 2) {
        $('.member-county').show();
      }
      else {
        $('.member-county').hide();
      }
    });
  }

  //toggle archive sections on news
  $('.archive__label--year').click(function () {
    if ( $(this).hasClass('open') ) {
      $(this).removeClass('open');
      $('.archive__months').slideUp();
    }
    else {
      $('.archive__label--year').removeClass('open');
      $(this).addClass('open');
      $('.archive__months').slideUp();
      $(this).siblings().slideDown();
    }
  });

  $('.archive__label--month').click(function () {
    if ( $(this).hasClass('open') ) {
      $(this).removeClass('open');
      $('.archive__items').slideUp();
    }
    else {
      $('.archive__label--month').removeClass('open');
      $(this).addClass('open');
      $('.archive__items').slideUp();
      $(this).siblings().slideDown();
    }
  });



});

function multiply(R,G,B){
  imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  data = imgData.data;
  for (var i=0;i<data.length;i+=4){
    data[i  ] = R*data[i]/255;
    data[i+1] = G*data[i+1]/255;
    data[i+2] = B*data[i+2]/255;
  }
  ctx.putImageData(imgData,0,0);
}


// Google map function
function initializeMap() {

  var setVenue = venues[0];

  if (venues.length > 1) {
    var setZoom = 6;
    var latlng = new google.maps.LatLng(52.562995, -1.472168);
  }
  else {
    var setZoom = 13;
    var latlng = new google.maps.LatLng(setVenue[1], setVenue[2]);
  }
  var myOptions = {
    zoom: setZoom,
    center: latlng,
    //disable scroll hell
    scrollwheel: false,
    panControl: false,
    panControlOptions: {
      position:google.maps.ControlPosition.TOP_RIGHT
    },
    zoomControl: true,
    zoomControlOptions: {
      position:google.maps.ControlPosition.TOP_RIGHT
    },
    mapTypeControl: false,
    mapTypeControlOptions: {
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    scaleControl: true,
    streetViewControl: false,
    overviewMapControl: true,
    mapTypeId: google.maps.MapTypeId.TERRAIN,
  };

  var map = new google.maps.Map(document.getElementById("map"), myOptions);



  setMarkers(map, venues);
  infowindow = new google.maps.InfoWindow({content: "loading..."});
}

function setMarkers(map, venues) {
  var image = new google.maps.MarkerImage("static/img/map-marker.png",
  new google.maps.Size(50, 61),
  new google.maps.Point(0,0),
  new google.maps.Point(25, 61));

  var shadow = new google.maps.MarkerImage("static/img/map-marker-shadow.png",
  new google.maps.Size(50, 61),
  new google.maps.Point(0,0),
  new google.maps.Point(25, 61));

  for (var i = 0; i < venues.length; i++) {

    var venue = venues[i];
    var siteLatLng = new google.maps.LatLng(venue[1], venue[2]);
    var marker = new google.maps.Marker({
      position: siteLatLng,
      map: map,
      shadow: shadow,
      icon: image,
      title: venue[11],
      zIndex: venue[3],
      html: locationsHtml(venue)
    });

    google.maps.event.addListener(marker, "click", function () {
      infowindow.setContent(this.html);
      infowindow.open(map, this);
    });
  }
}

function locationsHtml(venue) {
  var html =
  '<div>' +
  '<h2>' + venue[0] + '</h2>' +
  '<p>' + venue[3] + '</p>';
  html += '</div>';

  return html;
}
